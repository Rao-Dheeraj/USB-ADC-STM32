
USB-ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006858  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080069e0  080069e0  000169e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006a8c  08006a8c  00016a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006a90  08006a90  00016a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000160  20000000  08006a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001234  20000160  08006bf4  00020160  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001394  08006bf4  00021394  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
  9 .debug_info   000172ed  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002f92  00000000  00000000  0003747d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a70  00000000  00000000  0003a410  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000928  00000000  00000000  0003ae80  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000066b9  00000000  00000000  0003b7a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003522  00000000  00000000  00041e61  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00045383  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002828  00000000  00000000  00045400  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000160 	.word	0x20000160
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080069c8 	.word	0x080069c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000164 	.word	0x20000164
 80001c4:	080069c8 	.word	0x080069c8

080001c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001cc:	4a08      	ldr	r2, [pc, #32]	; (80001f0 <HAL_Init+0x28>)
 80001ce:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <HAL_Init+0x28>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	f043 0310 	orr.w	r3, r3, #16
 80001d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d8:	2003      	movs	r0, #3
 80001da:	f000 ff6d 	bl	80010b8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001de:	2000      	movs	r0, #0
 80001e0:	f000 f808 	bl	80001f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001e4:	f005 fe08 	bl	8005df8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001e8:	2300      	movs	r3, #0
}
 80001ea:	4618      	mov	r0, r3
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	40022000 	.word	0x40022000

080001f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001fc:	4b12      	ldr	r3, [pc, #72]	; (8000248 <HAL_InitTick+0x54>)
 80001fe:	681a      	ldr	r2, [r3, #0]
 8000200:	4b12      	ldr	r3, [pc, #72]	; (800024c <HAL_InitTick+0x58>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	4619      	mov	r1, r3
 8000206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800020a:	fbb3 f3f1 	udiv	r3, r3, r1
 800020e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000212:	4618      	mov	r0, r3
 8000214:	f000 ff85 	bl	8001122 <HAL_SYSTICK_Config>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800021e:	2301      	movs	r3, #1
 8000220:	e00e      	b.n	8000240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2b0f      	cmp	r3, #15
 8000226:	d80a      	bhi.n	800023e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000228:	2200      	movs	r2, #0
 800022a:	6879      	ldr	r1, [r7, #4]
 800022c:	f04f 30ff 	mov.w	r0, #4294967295
 8000230:	f000 ff4d 	bl	80010ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000234:	4a06      	ldr	r2, [pc, #24]	; (8000250 <HAL_InitTick+0x5c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
 800023c:	e000      	b.n	8000240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800023e:	2301      	movs	r3, #1
}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	20000118 	.word	0x20000118
 800024c:	20000004 	.word	0x20000004
 8000250:	20000000 	.word	0x20000000

08000254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <HAL_IncTick+0x20>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	461a      	mov	r2, r3
 800025e:	4b06      	ldr	r3, [pc, #24]	; (8000278 <HAL_IncTick+0x24>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4413      	add	r3, r2
 8000264:	4a04      	ldr	r2, [pc, #16]	; (8000278 <HAL_IncTick+0x24>)
 8000266:	6013      	str	r3, [r2, #0]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	20000004 	.word	0x20000004
 8000278:	200003a0 	.word	0x200003a0

0800027c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000280:	4b03      	ldr	r3, [pc, #12]	; (8000290 <HAL_GetTick+0x14>)
 8000282:	681b      	ldr	r3, [r3, #0]
}
 8000284:	4618      	mov	r0, r3
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	200003a0 	.word	0x200003a0

08000294 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800029c:	f7ff ffee 	bl	800027c <HAL_GetTick>
 80002a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002ac:	d005      	beq.n	80002ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80002ae:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <HAL_Delay+0x40>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	461a      	mov	r2, r3
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	4413      	add	r3, r2
 80002b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002ba:	bf00      	nop
 80002bc:	f7ff ffde 	bl	800027c <HAL_GetTick>
 80002c0:	4602      	mov	r2, r0
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	1ad2      	subs	r2, r2, r3
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	429a      	cmp	r2, r3
 80002ca:	d3f7      	bcc.n	80002bc <HAL_Delay+0x28>
  {
  }
}
 80002cc:	bf00      	nop
 80002ce:	3710      	adds	r7, #16
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	20000004 	.word	0x20000004

080002d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b09c      	sub	sp, #112	; 0x70
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80002e0:	2300      	movs	r3, #0
 80002e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80002e6:	2300      	movs	r3, #0
 80002e8:	66bb      	str	r3, [r7, #104]	; 0x68
  __IO uint32_t wait_loop_index = 0U;
 80002ea:	2300      	movs	r3, #0
 80002ec:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d101      	bne.n	80002f8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80002f4:	2301      	movs	r3, #1
 80002f6:	e167      	b.n	80005c8 <HAL_ADC_Init+0x2f0>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	691b      	ldr	r3, [r3, #16]
 80002fc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000302:	f003 0310 	and.w	r3, r3, #16
 8000306:	2b00      	cmp	r3, #0
 8000308:	d176      	bne.n	80003f8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800030e:	2b00      	cmp	r3, #0
 8000310:	d152      	bne.n	80003b8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2200      	movs	r2, #0
 8000316:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2200      	movs	r2, #0
 800031c:	651a      	str	r2, [r3, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	2200      	movs	r2, #0
 8000322:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	2200      	movs	r2, #0
 8000328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      
      /* Init the low level hardware */
      HAL_ADC_MspInit(hadc);
 800032c:	6878      	ldr	r0, [r7, #4]
 800032e:	f005 fdb1 	bl	8005e94 <HAL_ADC_MspInit>
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800033c:	2b00      	cmp	r3, #0
 800033e:	d13b      	bne.n	80003b8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000340:	6878      	ldr	r0, [r7, #4]
 8000342:	f000 fd8f 	bl	8000e64 <ADC_Disable>
 8000346:	4603      	mov	r3, r0
 8000348:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000350:	f003 0310 	and.w	r3, r3, #16
 8000354:	2b00      	cmp	r3, #0
 8000356:	d12f      	bne.n	80003b8 <HAL_ADC_Init+0xe0>
 8000358:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800035c:	2b00      	cmp	r3, #0
 800035e:	d12b      	bne.n	80003b8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000364:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000368:	f023 0302 	bic.w	r3, r3, #2
 800036c:	f043 0202 	orr.w	r2, r3, #2
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	645a      	str	r2, [r3, #68]	; 0x44
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	687a      	ldr	r2, [r7, #4]
 800037a:	6812      	ldr	r2, [r2, #0]
 800037c:	6892      	ldr	r2, [r2, #8]
 800037e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000382:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	687a      	ldr	r2, [r7, #4]
 800038a:	6812      	ldr	r2, [r2, #0]
 800038c:	6892      	ldr	r2, [r2, #8]
 800038e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000392:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000394:	4b8e      	ldr	r3, [pc, #568]	; (80005d0 <HAL_ADC_Init+0x2f8>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a8e      	ldr	r2, [pc, #568]	; (80005d4 <HAL_ADC_Init+0x2fc>)
 800039a:	fba2 2303 	umull	r2, r3, r2, r3
 800039e:	0c9a      	lsrs	r2, r3, #18
 80003a0:	4613      	mov	r3, r2
 80003a2:	009b      	lsls	r3, r3, #2
 80003a4:	4413      	add	r3, r2
 80003a6:	005b      	lsls	r3, r3, #1
 80003a8:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 80003aa:	e002      	b.n	80003b2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	3b01      	subs	r3, #1
 80003b0:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d1f9      	bne.n	80003ac <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	689b      	ldr	r3, [r3, #8]
 80003be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d007      	beq.n	80003d6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80003d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003d4:	d110      	bne.n	80003f8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003da:	f023 0312 	bic.w	r3, r3, #18
 80003de:	f043 0210 	orr.w	r2, r3, #16
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80003ea:	f043 0201 	orr.w	r2, r3, #1
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	649a      	str	r2, [r3, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 80003f2:	2301      	movs	r3, #1
 80003f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003fc:	f003 0310 	and.w	r3, r3, #16
 8000400:	2b00      	cmp	r3, #0
 8000402:	f040 80d4 	bne.w	80005ae <HAL_ADC_Init+0x2d6>
 8000406:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 80cf 	bne.w	80005ae <HAL_ADC_Init+0x2d6>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	689b      	ldr	r3, [r3, #8]
 8000416:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800041a:	2b00      	cmp	r3, #0
 800041c:	f040 80c7 	bne.w	80005ae <HAL_ADC_Init+0x2d6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000424:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000428:	f043 0202 	orr.w	r2, r3, #2
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000430:	4b69      	ldr	r3, [pc, #420]	; (80005d8 <HAL_ADC_Init+0x300>)
 8000432:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000434:	2300      	movs	r3, #0
 8000436:	613b      	str	r3, [r7, #16]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	689b      	ldr	r3, [r3, #8]
 800043e:	f003 0303 	and.w	r3, r3, #3
 8000442:	2b01      	cmp	r3, #1
 8000444:	d108      	bne.n	8000458 <HAL_ADC_Init+0x180>
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	f003 0301 	and.w	r3, r3, #1
 8000450:	2b01      	cmp	r3, #1
 8000452:	d101      	bne.n	8000458 <HAL_ADC_Init+0x180>
 8000454:	2301      	movs	r3, #1
 8000456:	e000      	b.n	800045a <HAL_ADC_Init+0x182>
 8000458:	2300      	movs	r3, #0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d11c      	bne.n	8000498 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800045e:	693b      	ldr	r3, [r7, #16]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000460:	2b00      	cmp	r3, #0
 8000462:	d010      	beq.n	8000486 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000464:	693b      	ldr	r3, [r7, #16]
 8000466:	689b      	ldr	r3, [r3, #8]
 8000468:	f003 0303 	and.w	r3, r3, #3
 800046c:	2b01      	cmp	r3, #1
 800046e:	d107      	bne.n	8000480 <HAL_ADC_Init+0x1a8>
 8000470:	693b      	ldr	r3, [r7, #16]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	f003 0301 	and.w	r3, r3, #1
 8000478:	2b01      	cmp	r3, #1
 800047a:	d101      	bne.n	8000480 <HAL_ADC_Init+0x1a8>
 800047c:	2301      	movs	r3, #1
 800047e:	e000      	b.n	8000482 <HAL_ADC_Init+0x1aa>
 8000480:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000482:	2b00      	cmp	r3, #0
 8000484:	d108      	bne.n	8000498 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000486:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000488:	689b      	ldr	r3, [r3, #8]
 800048a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	685b      	ldr	r3, [r3, #4]
 8000492:	431a      	orrs	r2, r3
 8000494:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000496:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	69db      	ldr	r3, [r3, #28]
 800049c:	035a      	lsls	r2, r3, #13
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004a2:	2b01      	cmp	r3, #1
 80004a4:	d002      	beq.n	80004ac <HAL_ADC_Init+0x1d4>
 80004a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004aa:	e000      	b.n	80004ae <HAL_ADC_Init+0x1d6>
 80004ac:	2300      	movs	r3, #0
 80004ae:	431a      	orrs	r2, r3
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	431a      	orrs	r2, r3
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	689b      	ldr	r3, [r3, #8]
 80004ba:	4313      	orrs	r3, r2
 80004bc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80004be:	4313      	orrs	r3, r2
 80004c0:	66bb      	str	r3, [r7, #104]	; 0x68
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004c6:	2b01      	cmp	r3, #1
 80004c8:	d11b      	bne.n	8000502 <HAL_ADC_Init+0x22a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	69db      	ldr	r3, [r3, #28]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d109      	bne.n	80004e6 <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004d6:	3b01      	subs	r3, #1
 80004d8:	045a      	lsls	r2, r3, #17
 80004da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80004dc:	4313      	orrs	r3, r2
 80004de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80004e4:	e00d      	b.n	8000502 <HAL_ADC_Init+0x22a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004ea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80004ee:	f043 0220 	orr.w	r2, r3, #32
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	645a      	str	r2, [r3, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004fa:	f043 0201 	orr.w	r2, r3, #1
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000506:	2b01      	cmp	r3, #1
 8000508:	d007      	beq.n	800051a <HAL_ADC_Init+0x242>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	4313      	orrs	r3, r2
 8000514:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000516:	4313      	orrs	r3, r2
 8000518:	66bb      	str	r3, [r7, #104]	; 0x68
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	689b      	ldr	r3, [r3, #8]
 8000520:	f003 030c 	and.w	r3, r3, #12
 8000524:	2b00      	cmp	r3, #0
 8000526:	d113      	bne.n	8000550 <HAL_ADC_Init+0x278>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681a      	ldr	r2, [r3, #0]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	68db      	ldr	r3, [r3, #12]
 8000532:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000536:	f023 0302 	bic.w	r3, r3, #2
 800053a:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	039a      	lsls	r2, r3, #14
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000546:	005b      	lsls	r3, r3, #1
 8000548:	4313      	orrs	r3, r2
 800054a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800054c:	4313      	orrs	r3, r2
 800054e:	66bb      	str	r3, [r7, #104]	; 0x68
                       ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	68d9      	ldr	r1, [r3, #12]
 800055a:	4b20      	ldr	r3, [pc, #128]	; (80005dc <HAL_ADC_Init+0x304>)
 800055c:	400b      	ands	r3, r1
 800055e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000560:	430b      	orrs	r3, r1
 8000562:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	691b      	ldr	r3, [r3, #16]
 8000568:	2b01      	cmp	r3, #1
 800056a:	d10c      	bne.n	8000586 <HAL_ADC_Init+0x2ae>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	687a      	ldr	r2, [r7, #4]
 8000572:	6812      	ldr	r2, [r2, #0]
 8000574:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000576:	f022 010f 	bic.w	r1, r2, #15
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	6a12      	ldr	r2, [r2, #32]
 800057e:	3a01      	subs	r2, #1
 8000580:	430a      	orrs	r2, r1
 8000582:	631a      	str	r2, [r3, #48]	; 0x30
 8000584:	e007      	b.n	8000596 <HAL_ADC_Init+0x2be>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	6812      	ldr	r2, [r2, #0]
 800058e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000590:	f022 020f 	bic.w	r2, r2, #15
 8000594:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2200      	movs	r2, #0
 800059a:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005a0:	f023 0303 	bic.w	r3, r3, #3
 80005a4:	f043 0201 	orr.w	r2, r3, #1
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	645a      	str	r2, [r3, #68]	; 0x44
 80005ac:	e00a      	b.n	80005c4 <HAL_ADC_Init+0x2ec>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005b2:	f023 0312 	bic.w	r3, r3, #18
 80005b6:	f043 0210 	orr.w	r2, r3, #16
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	645a      	str	r2, [r3, #68]	; 0x44
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80005be:	2301      	movs	r3, #1
 80005c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80005c4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3770      	adds	r7, #112	; 0x70
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000118 	.word	0x20000118
 80005d4:	431bde83 	.word	0x431bde83
 80005d8:	50000300 	.word	0x50000300
 80005dc:	fff0c007 	.word	0xfff0c007

080005e0 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005e8:	2300      	movs	r3, #0
 80005ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	f003 0304 	and.w	r3, r3, #4
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d158      	bne.n	80006ac <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000600:	2b01      	cmp	r3, #1
 8000602:	d101      	bne.n	8000608 <HAL_ADC_Start+0x28>
 8000604:	2302      	movs	r3, #2
 8000606:	e054      	b.n	80006b2 <HAL_ADC_Start+0xd2>
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2201      	movs	r2, #1
 800060c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f000 fbc9 	bl	8000da8 <ADC_Enable>
 8000616:	4603      	mov	r3, r0
 8000618:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800061a:	7bfb      	ldrb	r3, [r7, #15]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d140      	bne.n	80006a2 <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000624:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000628:	f023 0301 	bic.w	r3, r3, #1
 800062c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	645a      	str	r2, [r3, #68]	; 0x44
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000638:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	68db      	ldr	r3, [r3, #12]
 8000646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800064a:	2b00      	cmp	r3, #0
 800064c:	d007      	beq.n	800065e <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000652:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000656:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	645a      	str	r2, [r3, #68]	; 0x44
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000662:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800066a:	d106      	bne.n	800067a <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000670:	f023 0206 	bic.w	r2, r3, #6
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	649a      	str	r2, [r3, #72]	; 0x48
 8000678:	e002      	b.n	8000680 <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2200      	movs	r2, #0
 800067e:	649a      	str	r2, [r3, #72]	; 0x48
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	2200      	movs	r2, #0
 8000684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	221c      	movs	r2, #28
 800068e:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	6812      	ldr	r2, [r2, #0]
 8000698:	6892      	ldr	r2, [r2, #8]
 800069a:	f042 0204 	orr.w	r2, r2, #4
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	e006      	b.n	80006b0 <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2200      	movs	r2, #0
 80006a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80006aa:	e001      	b.n	80006b0 <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80006ac:	2302      	movs	r3, #2
 80006ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80006b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80006c6:	2300      	movs	r3, #0
 80006c8:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	2b08      	cmp	r3, #8
 80006d0:	d102      	bne.n	80006d8 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80006d2:	2308      	movs	r3, #8
 80006d4:	617b      	str	r3, [r7, #20]
 80006d6:	e02e      	b.n	8000736 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80006d8:	4b52      	ldr	r3, [pc, #328]	; (8000824 <HAL_ADC_PollForConversion+0x168>)
 80006da:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	689b      	ldr	r3, [r3, #8]
 80006e0:	f003 031f 	and.w	r3, r3, #31
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d112      	bne.n	800070e <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	68db      	ldr	r3, [r3, #12]
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d11d      	bne.n	8000732 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006fa:	f043 0220 	orr.w	r2, r3, #32
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2200      	movs	r2, #0
 8000706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        return HAL_ERROR;
 800070a:	2301      	movs	r3, #1
 800070c:	e086      	b.n	800081c <HAL_ADC_PollForConversion+0x160>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	689b      	ldr	r3, [r3, #8]
 8000712:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000716:	2b00      	cmp	r3, #0
 8000718:	d00b      	beq.n	8000732 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071e:	f043 0220 	orr.w	r2, r3, #32
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2200      	movs	r2, #0
 800072a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        return HAL_ERROR;
 800072e:	2301      	movs	r3, #1
 8000730:	e074      	b.n	800081c <HAL_ADC_PollForConversion+0x160>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000732:	230c      	movs	r3, #12
 8000734:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800073e:	f7ff fd9d 	bl	800027c <HAL_GetTick>
 8000742:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000744:	e01a      	b.n	800077c <HAL_ADC_PollForConversion+0xc0>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800074c:	d016      	beq.n	800077c <HAL_ADC_PollForConversion+0xc0>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d007      	beq.n	8000764 <HAL_ADC_PollForConversion+0xa8>
 8000754:	f7ff fd92 	bl	800027c <HAL_GetTick>
 8000758:	4602      	mov	r2, r0
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	1ad2      	subs	r2, r2, r3
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	429a      	cmp	r2, r3
 8000762:	d90b      	bls.n	800077c <HAL_ADC_PollForConversion+0xc0>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000768:	f043 0204 	orr.w	r2, r3, #4
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2200      	movs	r2, #0
 8000774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        return HAL_TIMEOUT;
 8000778:	2303      	movs	r3, #3
 800077a:	e04f      	b.n	800081c <HAL_ADC_PollForConversion+0x160>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	4013      	ands	r3, r2
 8000786:	2b00      	cmp	r3, #0
 8000788:	d0dd      	beq.n	8000746 <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d131      	bne.n	8000808 <HAL_ADC_PollForConversion+0x14c>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80007a4:	693b      	ldr	r3, [r7, #16]
 80007a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d12c      	bne.n	8000808 <HAL_ADC_PollForConversion+0x14c>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f003 0308 	and.w	r3, r3, #8
 80007b8:	2b08      	cmp	r3, #8
 80007ba:	d125      	bne.n	8000808 <HAL_ADC_PollForConversion+0x14c>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	689b      	ldr	r3, [r3, #8]
 80007c2:	f003 0304 	and.w	r3, r3, #4
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d112      	bne.n	80007f0 <HAL_ADC_PollForConversion+0x134>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	645a      	str	r2, [r3, #68]	; 0x44
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d112      	bne.n	8000808 <HAL_ADC_PollForConversion+0x14c>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e6:	f043 0201 	orr.w	r2, r3, #1
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	645a      	str	r2, [r3, #68]	; 0x44
 80007ee:	e00b      	b.n	8000808 <HAL_ADC_PollForConversion+0x14c>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f4:	f043 0220 	orr.w	r2, r3, #32
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000800:	f043 0201 	orr.w	r2, r3, #1
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	649a      	str	r2, [r3, #72]	; 0x48
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8000808:	693b      	ldr	r3, [r7, #16]
 800080a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800080e:	2b00      	cmp	r3, #0
 8000810:	d103      	bne.n	800081a <HAL_ADC_PollForConversion+0x15e>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	697a      	ldr	r2, [r7, #20]
 8000818:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800081a:	2300      	movs	r3, #0
}
 800081c:	4618      	mov	r0, r3
 800081e:	3718      	adds	r7, #24
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	50000300 	.word	0x50000300

08000828 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000836:	4618      	mov	r0, r3
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
	...

08000844 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000844:	b490      	push	{r4, r7}
 8000846:	b09c      	sub	sp, #112	; 0x70
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800084e:	2300      	movs	r3, #0
 8000850:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800085e:	2b01      	cmp	r3, #1
 8000860:	d101      	bne.n	8000866 <HAL_ADC_ConfigChannel+0x22>
 8000862:	2302      	movs	r3, #2
 8000864:	e297      	b.n	8000d96 <HAL_ADC_ConfigChannel+0x552>
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2201      	movs	r2, #1
 800086a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	689b      	ldr	r3, [r3, #8]
 8000874:	f003 0304 	and.w	r3, r3, #4
 8000878:	2b00      	cmp	r3, #0
 800087a:	f040 827b 	bne.w	8000d74 <HAL_ADC_ConfigChannel+0x530>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	2b04      	cmp	r3, #4
 8000884:	d81c      	bhi.n	80008c0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6819      	ldr	r1, [r3, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	685a      	ldr	r2, [r3, #4]
 8000894:	4613      	mov	r3, r2
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	4413      	add	r3, r2
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	461a      	mov	r2, r3
 800089e:	231f      	movs	r3, #31
 80008a0:	4093      	lsls	r3, r2
 80008a2:	43db      	mvns	r3, r3
 80008a4:	4018      	ands	r0, r3
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	681c      	ldr	r4, [r3, #0]
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	685a      	ldr	r2, [r3, #4]
 80008ae:	4613      	mov	r3, r2
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	4413      	add	r3, r2
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	fa04 f303 	lsl.w	r3, r4, r3
 80008ba:	4303      	orrs	r3, r0
 80008bc:	630b      	str	r3, [r1, #48]	; 0x30
 80008be:	e063      	b.n	8000988 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	2b09      	cmp	r3, #9
 80008c6:	d81e      	bhi.n	8000906 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	6819      	ldr	r1, [r3, #0]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	685a      	ldr	r2, [r3, #4]
 80008d6:	4613      	mov	r3, r2
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	4413      	add	r3, r2
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	3b1e      	subs	r3, #30
 80008e0:	221f      	movs	r2, #31
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	43db      	mvns	r3, r3
 80008e8:	4018      	ands	r0, r3
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	681c      	ldr	r4, [r3, #0]
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	685a      	ldr	r2, [r3, #4]
 80008f2:	4613      	mov	r3, r2
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	4413      	add	r3, r2
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	3b1e      	subs	r3, #30
 80008fc:	fa04 f303 	lsl.w	r3, r4, r3
 8000900:	4303      	orrs	r3, r0
 8000902:	634b      	str	r3, [r1, #52]	; 0x34
 8000904:	e040      	b.n	8000988 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	2b0e      	cmp	r3, #14
 800090c:	d81e      	bhi.n	800094c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6819      	ldr	r1, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	685a      	ldr	r2, [r3, #4]
 800091c:	4613      	mov	r3, r2
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	4413      	add	r3, r2
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	3b3c      	subs	r3, #60	; 0x3c
 8000926:	221f      	movs	r2, #31
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	43db      	mvns	r3, r3
 800092e:	4018      	ands	r0, r3
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	681c      	ldr	r4, [r3, #0]
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685a      	ldr	r2, [r3, #4]
 8000938:	4613      	mov	r3, r2
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	4413      	add	r3, r2
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	3b3c      	subs	r3, #60	; 0x3c
 8000942:	fa04 f303 	lsl.w	r3, r4, r3
 8000946:	4303      	orrs	r3, r0
 8000948:	638b      	str	r3, [r1, #56]	; 0x38
 800094a:	e01d      	b.n	8000988 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6819      	ldr	r1, [r3, #0]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	685a      	ldr	r2, [r3, #4]
 800095a:	4613      	mov	r3, r2
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	4413      	add	r3, r2
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	3b5a      	subs	r3, #90	; 0x5a
 8000964:	221f      	movs	r2, #31
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	43db      	mvns	r3, r3
 800096c:	4018      	ands	r0, r3
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	681c      	ldr	r4, [r3, #0]
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	685a      	ldr	r2, [r3, #4]
 8000976:	4613      	mov	r3, r2
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	4413      	add	r3, r2
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	3b5a      	subs	r3, #90	; 0x5a
 8000980:	fa04 f303 	lsl.w	r3, r4, r3
 8000984:	4303      	orrs	r3, r0
 8000986:	63cb      	str	r3, [r1, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	689b      	ldr	r3, [r3, #8]
 800098e:	f003 030c 	and.w	r3, r3, #12
 8000992:	2b00      	cmp	r3, #0
 8000994:	f040 80e5 	bne.w	8000b62 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b09      	cmp	r3, #9
 800099e:	d91c      	bls.n	80009da <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	6819      	ldr	r1, [r3, #0]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	6998      	ldr	r0, [r3, #24]
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	4613      	mov	r3, r2
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	4413      	add	r3, r2
 80009b4:	3b1e      	subs	r3, #30
 80009b6:	2207      	movs	r2, #7
 80009b8:	fa02 f303 	lsl.w	r3, r2, r3
 80009bc:	43db      	mvns	r3, r3
 80009be:	4018      	ands	r0, r3
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	689c      	ldr	r4, [r3, #8]
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	4613      	mov	r3, r2
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	4413      	add	r3, r2
 80009ce:	3b1e      	subs	r3, #30
 80009d0:	fa04 f303 	lsl.w	r3, r4, r3
 80009d4:	4303      	orrs	r3, r0
 80009d6:	618b      	str	r3, [r1, #24]
 80009d8:	e019      	b.n	8000a0e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6819      	ldr	r1, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	6958      	ldr	r0, [r3, #20]
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	4613      	mov	r3, r2
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	4413      	add	r3, r2
 80009ee:	2207      	movs	r2, #7
 80009f0:	fa02 f303 	lsl.w	r3, r2, r3
 80009f4:	43db      	mvns	r3, r3
 80009f6:	4018      	ands	r0, r3
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	689c      	ldr	r4, [r3, #8]
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	4613      	mov	r3, r2
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	4413      	add	r3, r2
 8000a06:	fa04 f303 	lsl.w	r3, r4, r3
 8000a0a:	4303      	orrs	r3, r0
 8000a0c:	614b      	str	r3, [r1, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	695a      	ldr	r2, [r3, #20]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	08db      	lsrs	r3, r3, #3
 8000a1a:	f003 0303 	and.w	r3, r3, #3
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	66bb      	str	r3, [r7, #104]	; 0x68
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	691b      	ldr	r3, [r3, #16]
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	2b03      	cmp	r3, #3
 8000a2e:	d84f      	bhi.n	8000ad0 <HAL_ADC_ConfigChannel+0x28c>
 8000a30:	a201      	add	r2, pc, #4	; (adr r2, 8000a38 <HAL_ADC_ConfigChannel+0x1f4>)
 8000a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a36:	bf00      	nop
 8000a38:	08000a49 	.word	0x08000a49
 8000a3c:	08000a6b 	.word	0x08000a6b
 8000a40:	08000a8d 	.word	0x08000a8d
 8000a44:	08000aaf 	.word	0x08000aaf
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8000a52:	4ba1      	ldr	r3, [pc, #644]	; (8000cd8 <HAL_ADC_ConfigChannel+0x494>)
 8000a54:	400b      	ands	r3, r1
 8000a56:	6839      	ldr	r1, [r7, #0]
 8000a58:	6809      	ldr	r1, [r1, #0]
 8000a5a:	0688      	lsls	r0, r1, #26
 8000a5c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000a5e:	4301      	orrs	r1, r0
 8000a60:	430b      	orrs	r3, r1
 8000a62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a66:	6613      	str	r3, [r2, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000a68:	e07b      	b.n	8000b62 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8000a74:	4b98      	ldr	r3, [pc, #608]	; (8000cd8 <HAL_ADC_ConfigChannel+0x494>)
 8000a76:	400b      	ands	r3, r1
 8000a78:	6839      	ldr	r1, [r7, #0]
 8000a7a:	6809      	ldr	r1, [r1, #0]
 8000a7c:	0688      	lsls	r0, r1, #26
 8000a7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000a80:	4301      	orrs	r1, r0
 8000a82:	430b      	orrs	r3, r1
 8000a84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a88:	6653      	str	r3, [r2, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000a8a:	e06a      	b.n	8000b62 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8000a96:	4b90      	ldr	r3, [pc, #576]	; (8000cd8 <HAL_ADC_ConfigChannel+0x494>)
 8000a98:	400b      	ands	r3, r1
 8000a9a:	6839      	ldr	r1, [r7, #0]
 8000a9c:	6809      	ldr	r1, [r1, #0]
 8000a9e:	0688      	lsls	r0, r1, #26
 8000aa0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000aa2:	4301      	orrs	r1, r0
 8000aa4:	430b      	orrs	r3, r1
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aaa:	6693      	str	r3, [r2, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000aac:	e059      	b.n	8000b62 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8000ab8:	4b87      	ldr	r3, [pc, #540]	; (8000cd8 <HAL_ADC_ConfigChannel+0x494>)
 8000aba:	400b      	ands	r3, r1
 8000abc:	6839      	ldr	r1, [r7, #0]
 8000abe:	6809      	ldr	r1, [r1, #0]
 8000ac0:	0688      	lsls	r0, r1, #26
 8000ac2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000ac4:	4301      	orrs	r1, r0
 8000ac6:	430b      	orrs	r3, r1
 8000ac8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000acc:	66d3      	str	r3, [r2, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000ace:	e048      	b.n	8000b62 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ad6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	069b      	lsls	r3, r3, #26
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d107      	bne.n	8000af4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	6812      	ldr	r2, [r2, #0]
 8000aec:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8000aee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000af2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000afa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	069b      	lsls	r3, r3, #26
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d107      	bne.n	8000b18 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	6812      	ldr	r2, [r2, #0]
 8000b10:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8000b12:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000b16:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000b1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	069b      	lsls	r3, r3, #26
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d107      	bne.n	8000b3c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	6812      	ldr	r2, [r2, #0]
 8000b34:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8000b36:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000b3a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000b42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	069b      	lsls	r3, r3, #26
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d107      	bne.n	8000b60 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	687a      	ldr	r2, [r7, #4]
 8000b56:	6812      	ldr	r2, [r2, #0]
 8000b58:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8000b5a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000b5e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8000b60:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	f003 0303 	and.w	r3, r3, #3
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d108      	bne.n	8000b82 <HAL_ADC_ConfigChannel+0x33e>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d101      	bne.n	8000b82 <HAL_ADC_ConfigChannel+0x33e>
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e000      	b.n	8000b84 <HAL_ADC_ConfigChannel+0x340>
 8000b82:	2300      	movs	r3, #0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	f040 8100 	bne.w	8000d8a <HAL_ADC_ConfigChannel+0x546>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	68db      	ldr	r3, [r3, #12]
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d00f      	beq.n	8000bb2 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	6812      	ldr	r2, [r2, #0]
 8000b9a:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 8000b9e:	683a      	ldr	r2, [r7, #0]
 8000ba0:	6812      	ldr	r2, [r2, #0]
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	fa00 f202 	lsl.w	r2, r0, r2
 8000ba8:	43d2      	mvns	r2, r2
 8000baa:	400a      	ands	r2, r1
 8000bac:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8000bb0:	e04a      	b.n	8000c48 <HAL_ADC_ConfigChannel+0x404>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	6812      	ldr	r2, [r2, #0]
 8000bba:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 8000bbe:	683a      	ldr	r2, [r7, #0]
 8000bc0:	6812      	ldr	r2, [r2, #0]
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	fa00 f202 	lsl.w	r2, r0, r2
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b09      	cmp	r3, #9
 8000bd4:	d91c      	bls.n	8000c10 <HAL_ADC_ConfigChannel+0x3cc>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6819      	ldr	r1, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	6998      	ldr	r0, [r3, #24]
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4613      	mov	r3, r2
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	4413      	add	r3, r2
 8000bea:	3b1b      	subs	r3, #27
 8000bec:	2207      	movs	r2, #7
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	4018      	ands	r0, r3
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	689c      	ldr	r4, [r3, #8]
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	4413      	add	r3, r2
 8000c04:	3b1b      	subs	r3, #27
 8000c06:	fa04 f303 	lsl.w	r3, r4, r3
 8000c0a:	4303      	orrs	r3, r0
 8000c0c:	618b      	str	r3, [r1, #24]
 8000c0e:	e01b      	b.n	8000c48 <HAL_ADC_ConfigChannel+0x404>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6819      	ldr	r1, [r3, #0]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	6958      	ldr	r0, [r3, #20]
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	1c5a      	adds	r2, r3, #1
 8000c20:	4613      	mov	r3, r2
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	4413      	add	r3, r2
 8000c26:	2207      	movs	r2, #7
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	4018      	ands	r0, r3
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	689c      	ldr	r4, [r3, #8]
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	1c5a      	adds	r2, r3, #1
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	4413      	add	r3, r2
 8000c40:	fa04 f303 	lsl.w	r3, r4, r3
 8000c44:	4303      	orrs	r3, r0
 8000c46:	614b      	str	r3, [r1, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c48:	4b24      	ldr	r3, [pc, #144]	; (8000cdc <HAL_ADC_ConfigChannel+0x498>)
 8000c4a:	667b      	str	r3, [r7, #100]	; 0x64
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b10      	cmp	r3, #16
 8000c52:	d105      	bne.n	8000c60 <HAL_ADC_ConfigChannel+0x41c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000c54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d014      	beq.n	8000c8a <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000c64:	2b11      	cmp	r3, #17
 8000c66:	d105      	bne.n	8000c74 <HAL_ADC_ConfigChannel+0x430>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000c68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d00a      	beq.n	8000c8a <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000c78:	2b12      	cmp	r3, #18
 8000c7a:	f040 8086 	bne.w	8000d8a <HAL_ADC_ConfigChannel+0x546>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8000c7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d17f      	bne.n	8000d8a <HAL_ADC_ConfigChannel+0x546>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	f003 0303 	and.w	r3, r3, #3
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d108      	bne.n	8000cae <HAL_ADC_ConfigChannel+0x46a>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d101      	bne.n	8000cae <HAL_ADC_ConfigChannel+0x46a>
 8000caa:	2301      	movs	r3, #1
 8000cac:	e000      	b.n	8000cb0 <HAL_ADC_ConfigChannel+0x46c>
 8000cae:	2300      	movs	r3, #0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d155      	bne.n	8000d60 <HAL_ADC_ConfigChannel+0x51c>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000cb4:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d015      	beq.n	8000ce6 <HAL_ADC_ConfigChannel+0x4a2>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	f003 0303 	and.w	r3, r3, #3
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d10c      	bne.n	8000ce0 <HAL_ADC_ConfigChannel+0x49c>
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d106      	bne.n	8000ce0 <HAL_ADC_ConfigChannel+0x49c>
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e005      	b.n	8000ce2 <HAL_ADC_ConfigChannel+0x49e>
 8000cd6:	bf00      	nop
 8000cd8:	83fff000 	.word	0x83fff000
 8000cdc:	50000300 	.word	0x50000300
 8000ce0:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d13c      	bne.n	8000d60 <HAL_ADC_ConfigChannel+0x51c>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	2b10      	cmp	r3, #16
 8000cec:	d11d      	bne.n	8000d2a <HAL_ADC_ConfigChannel+0x4e6>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cf6:	d118      	bne.n	8000d2a <HAL_ADC_ConfigChannel+0x4e6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000cf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000d00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d02:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d04:	4b26      	ldr	r3, [pc, #152]	; (8000da0 <HAL_ADC_ConfigChannel+0x55c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a26      	ldr	r2, [pc, #152]	; (8000da4 <HAL_ADC_ConfigChannel+0x560>)
 8000d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d0e:	0c9a      	lsrs	r2, r3, #18
 8000d10:	4613      	mov	r3, r2
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	4413      	add	r3, r2
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000d1a:	e002      	b.n	8000d22 <HAL_ADC_ConfigChannel+0x4de>
          {
            wait_loop_index--;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d1f9      	bne.n	8000d1c <HAL_ADC_ConfigChannel+0x4d8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000d28:	e02e      	b.n	8000d88 <HAL_ADC_ConfigChannel+0x544>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2b11      	cmp	r3, #17
 8000d30:	d10b      	bne.n	8000d4a <HAL_ADC_ConfigChannel+0x506>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d3a:	d106      	bne.n	8000d4a <HAL_ADC_ConfigChannel+0x506>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000d3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8000d44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d46:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000d48:	e01e      	b.n	8000d88 <HAL_ADC_ConfigChannel+0x544>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2b12      	cmp	r3, #18
 8000d50:	d11a      	bne.n	8000d88 <HAL_ADC_ConfigChannel+0x544>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8000d52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000d5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d5c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000d5e:	e013      	b.n	8000d88 <HAL_ADC_ConfigChannel+0x544>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d64:	f043 0220 	orr.w	r2, r3, #32
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	645a      	str	r2, [r3, #68]	; 0x44
        
        tmp_hal_status = HAL_ERROR;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000d72:	e00a      	b.n	8000d8a <HAL_ADC_ConfigChannel+0x546>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d78:	f043 0220 	orr.w	r2, r3, #32
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000d86:	e000      	b.n	8000d8a <HAL_ADC_ConfigChannel+0x546>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000d88:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 8000d92:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3770      	adds	r7, #112	; 0x70
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc90      	pop	{r4, r7}
 8000d9e:	4770      	bx	lr
 8000da0:	20000118 	.word	0x20000118
 8000da4:	431bde83 	.word	0x431bde83

08000da8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	f003 0303 	and.w	r3, r3, #3
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d108      	bne.n	8000dd4 <ADC_Enable+0x2c>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d101      	bne.n	8000dd4 <ADC_Enable+0x2c>
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e000      	b.n	8000dd6 <ADC_Enable+0x2e>
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d13c      	bne.n	8000e54 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	689a      	ldr	r2, [r3, #8]
 8000de0:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <ADC_Enable+0xb8>)
 8000de2:	4013      	ands	r3, r2
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d00d      	beq.n	8000e04 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dec:	f043 0210 	orr.w	r2, r3, #16
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000df8:	f043 0201 	orr.w	r2, r3, #1
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	649a      	str	r2, [r3, #72]	; 0x48
      
      return HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	e028      	b.n	8000e56 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	6812      	ldr	r2, [r2, #0]
 8000e0c:	6892      	ldr	r2, [r2, #8]
 8000e0e:	f042 0201 	orr.w	r2, r2, #1
 8000e12:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8000e14:	f7ff fa32 	bl	800027c <HAL_GetTick>
 8000e18:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000e1a:	e014      	b.n	8000e46 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000e1c:	f7ff fa2e 	bl	800027c <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d90d      	bls.n	8000e46 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	f043 0210 	orr.w	r2, r3, #16
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e3a:	f043 0201 	orr.w	r2, r3, #1
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	649a      	str	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e007      	b.n	8000e56 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d1e3      	bne.n	8000e1c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	8000003f 	.word	0x8000003f

08000e64 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	f003 0303 	and.w	r3, r3, #3
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d108      	bne.n	8000e90 <ADC_Disable+0x2c>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d101      	bne.n	8000e90 <ADC_Disable+0x2c>
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e000      	b.n	8000e92 <ADC_Disable+0x2e>
 8000e90:	2300      	movs	r3, #0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d040      	beq.n	8000f18 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	f003 030d 	and.w	r3, r3, #13
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d10f      	bne.n	8000ec4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	6812      	ldr	r2, [r2, #0]
 8000eac:	6892      	ldr	r2, [r2, #8]
 8000eae:	f042 0202 	orr.w	r2, r2, #2
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2203      	movs	r2, #3
 8000eba:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8000ebc:	f7ff f9de 	bl	800027c <HAL_GetTick>
 8000ec0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000ec2:	e022      	b.n	8000f0a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec8:	f043 0210 	orr.w	r2, r3, #16
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	645a      	str	r2, [r3, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ed4:	f043 0201 	orr.w	r2, r3, #1
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	649a      	str	r2, [r3, #72]	; 0x48
      return HAL_ERROR;
 8000edc:	2301      	movs	r3, #1
 8000ede:	e01c      	b.n	8000f1a <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000ee0:	f7ff f9cc 	bl	800027c <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d90d      	bls.n	8000f0a <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	f043 0210 	orr.w	r2, r3, #16
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000efe:	f043 0201 	orr.w	r2, r3, #1
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e007      	b.n	8000f1a <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d0e3      	beq.n	8000ee0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <NVIC_SetPriorityGrouping+0x44>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f40:	4013      	ands	r3, r2
 8000f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f56:	4a04      	ldr	r2, [pc, #16]	; (8000f68 <NVIC_SetPriorityGrouping+0x44>)
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	60d3      	str	r3, [r2, #12]
}
 8000f5c:	bf00      	nop
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f70:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <NVIC_GetPriorityGrouping+0x18>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	0a1b      	lsrs	r3, r3, #8
 8000f76:	f003 0307 	and.w	r3, r3, #7
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000f92:	4909      	ldr	r1, [pc, #36]	; (8000fb8 <NVIC_EnableIRQ+0x30>)
 8000f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f98:	095b      	lsrs	r3, r3, #5
 8000f9a:	79fa      	ldrb	r2, [r7, #7]
 8000f9c:	f002 021f 	and.w	r2, r2, #31
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000e100 	.word	0xe000e100

08000fbc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	6039      	str	r1, [r7, #0]
 8000fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	da0b      	bge.n	8000fe8 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd0:	490d      	ldr	r1, [pc, #52]	; (8001008 <NVIC_SetPriority+0x4c>)
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	f003 030f 	and.w	r3, r3, #15
 8000fd8:	3b04      	subs	r3, #4
 8000fda:	683a      	ldr	r2, [r7, #0]
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	0112      	lsls	r2, r2, #4
 8000fe0:	b2d2      	uxtb	r2, r2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe6:	e009      	b.n	8000ffc <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe8:	4908      	ldr	r1, [pc, #32]	; (800100c <NVIC_SetPriority+0x50>)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	683a      	ldr	r2, [r7, #0]
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	0112      	lsls	r2, r2, #4
 8000ff4:	b2d2      	uxtb	r2, r2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00
 800100c:	e000e100 	.word	0xe000e100

08001010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001010:	b480      	push	{r7}
 8001012:	b089      	sub	sp, #36	; 0x24
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f1c3 0307 	rsb	r3, r3, #7
 800102a:	2b04      	cmp	r3, #4
 800102c:	bf28      	it	cs
 800102e:	2304      	movcs	r3, #4
 8001030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3304      	adds	r3, #4
 8001036:	2b06      	cmp	r3, #6
 8001038:	d902      	bls.n	8001040 <NVIC_EncodePriority+0x30>
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3b03      	subs	r3, #3
 800103e:	e000      	b.n	8001042 <NVIC_EncodePriority+0x32>
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	2201      	movs	r2, #1
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	1e5a      	subs	r2, r3, #1
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	401a      	ands	r2, r3
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001056:	2101      	movs	r1, #1
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa01 f303 	lsl.w	r3, r1, r3
 800105e:	1e59      	subs	r1, r3, #1
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	4313      	orrs	r3, r2
         );
}
 8001066:	4618      	mov	r0, r3
 8001068:	3724      	adds	r7, #36	; 0x24
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001084:	d301      	bcc.n	800108a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001086:	2301      	movs	r3, #1
 8001088:	e00f      	b.n	80010aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108a:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <SysTick_Config+0x40>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001092:	210f      	movs	r1, #15
 8001094:	f04f 30ff 	mov.w	r0, #4294967295
 8001098:	f7ff ff90 	bl	8000fbc <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <SysTick_Config+0x40>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a2:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <SysTick_Config+0x40>)
 80010a4:	2207      	movs	r2, #7
 80010a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	e000e010 	.word	0xe000e010

080010b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff ff2f 	bl	8000f24 <NVIC_SetPriorityGrouping>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b086      	sub	sp, #24
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	4603      	mov	r3, r0
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]
 80010da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e0:	f7ff ff44 	bl	8000f6c <NVIC_GetPriorityGrouping>
 80010e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	68b9      	ldr	r1, [r7, #8]
 80010ea:	6978      	ldr	r0, [r7, #20]
 80010ec:	f7ff ff90 	bl	8001010 <NVIC_EncodePriority>
 80010f0:	4602      	mov	r2, r0
 80010f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f6:	4611      	mov	r1, r2
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff5f 	bl	8000fbc <NVIC_SetPriority>
}
 80010fe:	bf00      	nop
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	4603      	mov	r3, r0
 800110e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff37 	bl	8000f88 <NVIC_EnableIRQ>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ffa2 	bl	8001074 <SysTick_Config>
 8001130:	4603      	mov	r3, r0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b04      	cmp	r3, #4
 8001148:	d106      	bne.n	8001158 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800114a:	4a09      	ldr	r2, [pc, #36]	; (8001170 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f043 0304 	orr.w	r3, r3, #4
 8001154:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001156:	e005      	b.n	8001164 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001158:	4a05      	ldr	r2, [pc, #20]	; (8001170 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800115a:	4b05      	ldr	r3, [pc, #20]	; (8001170 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f023 0304 	bic.w	r3, r3, #4
 8001162:	6013      	str	r3, [r2, #0]
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000e010 	.word	0xe000e010

08001174 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001178:	f000 f802 	bl	8001180 <HAL_SYSTICK_Callback>
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}

08001180 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001190:	b480      	push	{r7}
 8001192:	b087      	sub	sp, #28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80011a6:	e14e      	b.n	8001446 <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	2101      	movs	r1, #1
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	fa01 f303 	lsl.w	r3, r1, r3
 80011b4:	4013      	ands	r3, r2
 80011b6:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f000 8140 	beq.w	8001440 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d003      	beq.n	80011d0 <HAL_GPIO_Init+0x40>
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	2b12      	cmp	r3, #18
 80011ce:	d123      	bne.n	8001218 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	08da      	lsrs	r2, r3, #3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3208      	adds	r2, #8
 80011d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	f003 0307 	and.w	r3, r3, #7
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	220f      	movs	r2, #15
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4013      	ands	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	691a      	ldr	r2, [r3, #16]
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	4313      	orrs	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	08da      	lsrs	r2, r3, #3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3208      	adds	r2, #8
 8001212:	6939      	ldr	r1, [r7, #16]
 8001214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	2203      	movs	r2, #3
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 0203 	and.w	r2, r3, #3
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4313      	orrs	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d00b      	beq.n	800126c <HAL_GPIO_Init+0xdc>
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	2b02      	cmp	r3, #2
 800125a:	d007      	beq.n	800126c <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001260:	2b11      	cmp	r3, #17
 8001262:	d003      	beq.n	800126c <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2b12      	cmp	r3, #18
 800126a:	d130      	bne.n	80012ce <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	2203      	movs	r2, #3
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4013      	ands	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	68da      	ldr	r2, [r3, #12]
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	4313      	orrs	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012a2:	2201      	movs	r2, #1
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	4013      	ands	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	091b      	lsrs	r3, r3, #4
 80012b8:	f003 0201 	and.w	r2, r3, #1
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	2203      	movs	r2, #3
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4013      	ands	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	689a      	ldr	r2, [r3, #8]
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001306:	2b00      	cmp	r3, #0
 8001308:	f000 809a 	beq.w	8001440 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130c:	4a55      	ldr	r2, [pc, #340]	; (8001464 <HAL_GPIO_Init+0x2d4>)
 800130e:	4b55      	ldr	r3, [pc, #340]	; (8001464 <HAL_GPIO_Init+0x2d4>)
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	6193      	str	r3, [r2, #24]
 8001318:	4b52      	ldr	r3, [pc, #328]	; (8001464 <HAL_GPIO_Init+0x2d4>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001324:	4a50      	ldr	r2, [pc, #320]	; (8001468 <HAL_GPIO_Init+0x2d8>)
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	089b      	lsrs	r3, r3, #2
 800132a:	3302      	adds	r3, #2
 800132c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001330:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	220f      	movs	r2, #15
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4013      	ands	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800134e:	d013      	beq.n	8001378 <HAL_GPIO_Init+0x1e8>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a46      	ldr	r2, [pc, #280]	; (800146c <HAL_GPIO_Init+0x2dc>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d00d      	beq.n	8001374 <HAL_GPIO_Init+0x1e4>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a45      	ldr	r2, [pc, #276]	; (8001470 <HAL_GPIO_Init+0x2e0>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d007      	beq.n	8001370 <HAL_GPIO_Init+0x1e0>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a44      	ldr	r2, [pc, #272]	; (8001474 <HAL_GPIO_Init+0x2e4>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d101      	bne.n	800136c <HAL_GPIO_Init+0x1dc>
 8001368:	2303      	movs	r3, #3
 800136a:	e006      	b.n	800137a <HAL_GPIO_Init+0x1ea>
 800136c:	2305      	movs	r3, #5
 800136e:	e004      	b.n	800137a <HAL_GPIO_Init+0x1ea>
 8001370:	2302      	movs	r3, #2
 8001372:	e002      	b.n	800137a <HAL_GPIO_Init+0x1ea>
 8001374:	2301      	movs	r3, #1
 8001376:	e000      	b.n	800137a <HAL_GPIO_Init+0x1ea>
 8001378:	2300      	movs	r3, #0
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	f002 0203 	and.w	r2, r2, #3
 8001380:	0092      	lsls	r2, r2, #2
 8001382:	4093      	lsls	r3, r2
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4313      	orrs	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800138a:	4937      	ldr	r1, [pc, #220]	; (8001468 <HAL_GPIO_Init+0x2d8>)
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	089b      	lsrs	r3, r3, #2
 8001390:	3302      	adds	r3, #2
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001398:	4b37      	ldr	r3, [pc, #220]	; (8001478 <HAL_GPIO_Init+0x2e8>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013bc:	4a2e      	ldr	r2, [pc, #184]	; (8001478 <HAL_GPIO_Init+0x2e8>)
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013c2:	4b2d      	ldr	r3, [pc, #180]	; (8001478 <HAL_GPIO_Init+0x2e8>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	43db      	mvns	r3, r3
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4013      	ands	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013e6:	4a24      	ldr	r2, [pc, #144]	; (8001478 <HAL_GPIO_Init+0x2e8>)
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ec:	4b22      	ldr	r3, [pc, #136]	; (8001478 <HAL_GPIO_Init+0x2e8>)
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	43db      	mvns	r3, r3
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	4013      	ands	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d003      	beq.n	8001410 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	4313      	orrs	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001410:	4a19      	ldr	r2, [pc, #100]	; (8001478 <HAL_GPIO_Init+0x2e8>)
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001416:	4b18      	ldr	r3, [pc, #96]	; (8001478 <HAL_GPIO_Init+0x2e8>)
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	43db      	mvns	r3, r3
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	4013      	ands	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4313      	orrs	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800143a:	4a0f      	ldr	r2, [pc, #60]	; (8001478 <HAL_GPIO_Init+0x2e8>)
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	3301      	adds	r3, #1
 8001444:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	fa22 f303 	lsr.w	r3, r2, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	f47f aea9 	bne.w	80011a8 <HAL_GPIO_Init+0x18>
  }
}
 8001456:	bf00      	nop
 8001458:	371c      	adds	r7, #28
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	40021000 	.word	0x40021000
 8001468:	40010000 	.word	0x40010000
 800146c:	48000400 	.word	0x48000400
 8001470:	48000800 	.word	0x48000800
 8001474:	48000c00 	.word	0x48000c00
 8001478:	40010400 	.word	0x40010400

0800147c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	807b      	strh	r3, [r7, #2]
 8001488:	4613      	mov	r3, r2
 800148a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800148c:	787b      	ldrb	r3, [r7, #1]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001492:	887a      	ldrh	r2, [r7, #2]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001498:	e002      	b.n	80014a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800149a:	887a      	ldrh	r2, [r7, #2]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	695a      	ldr	r2, [r3, #20]
 80014bc:	887b      	ldrh	r3, [r7, #2]
 80014be:	405a      	eors	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	615a      	str	r2, [r3, #20]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80014d8:	2300      	movs	r3, #0
 80014da:	60fb      	str	r3, [r7, #12]

  uint32_t wInterrupt_Mask = 0U;
 80014dc:	2300      	movs	r3, #0
 80014de:	60bb      	str	r3, [r7, #8]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_PCD_Init+0x1a>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e0ce      	b.n	8001688 <HAL_PCD_Init+0x1b8>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f893 3371 	ldrb.w	r3, [r3, #881]	; 0x371
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d106      	bne.n	8001504 <HAL_PCD_Init+0x34>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f004 fe1c 	bl	800613c <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2203      	movs	r2, #3
 8001508:	f883 2371 	strb.w	r2, [r3, #881]	; 0x371
 
 /* Init endpoints structures */
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 800150c:	2300      	movs	r3, #0
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	e040      	b.n	8001594 <HAL_PCD_Init+0xc4>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	4613      	mov	r3, r2
 8001518:	00db      	lsls	r3, r3, #3
 800151a:	1a9b      	subs	r3, r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	440b      	add	r3, r1
 8001520:	3329      	adds	r3, #41	; 0x29
 8001522:	2201      	movs	r2, #1
 8001524:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].num = i;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	b2d8      	uxtb	r0, r3
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	4613      	mov	r3, r2
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	1a9b      	subs	r3, r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	440b      	add	r3, r1
 8001538:	3328      	adds	r3, #40	; 0x28
 800153a:	4602      	mov	r2, r0
 800153c:	701a      	strb	r2, [r3, #0]
   /* Control until ep is actvated */
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	4613      	mov	r3, r2
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	1a9b      	subs	r3, r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	440b      	add	r3, r1
 800154c:	332b      	adds	r3, #43	; 0x2b
 800154e:	2200      	movs	r2, #0
 8001550:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket =  0U;
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	4613      	mov	r3, r2
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	1a9b      	subs	r3, r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	440b      	add	r3, r1
 8001560:	3334      	adds	r3, #52	; 0x34
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_buff = 0U;
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	4613      	mov	r3, r2
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	1a9b      	subs	r3, r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	440b      	add	r3, r1
 8001574:	3338      	adds	r3, #56	; 0x38
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_len = 0U;
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	4613      	mov	r3, r2
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	1a9b      	subs	r3, r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	440b      	add	r3, r1
 8001588:	333c      	adds	r3, #60	; 0x3c
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	3301      	adds	r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	429a      	cmp	r2, r3
 800159c:	d8b9      	bhi.n	8001512 <HAL_PCD_Init+0x42>
 }
 
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	e046      	b.n	8001632 <HAL_PCD_Init+0x162>
 {
   hpcd->OUT_ep[i].is_in = 0U;
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	4613      	mov	r3, r2
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	1a9b      	subs	r3, r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	f203 13cd 	addw	r3, r3, #461	; 0x1cd
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].num = i;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	b2d8      	uxtb	r0, r3
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	68fa      	ldr	r2, [r7, #12]
 80015c2:	4613      	mov	r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	1a9b      	subs	r3, r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	440b      	add	r3, r1
 80015cc:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 80015d0:	4602      	mov	r2, r0
 80015d2:	701a      	strb	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	4613      	mov	r3, r2
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	1a9b      	subs	r3, r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	440b      	add	r3, r1
 80015e2:	f203 13cf 	addw	r3, r3, #463	; 0x1cf
 80015e6:	2200      	movs	r2, #0
 80015e8:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].maxpacket = 0U;
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	68fa      	ldr	r2, [r7, #12]
 80015ee:	4613      	mov	r3, r2
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	1a9b      	subs	r3, r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	440b      	add	r3, r1
 80015f8:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_buff = 0U;
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	4613      	mov	r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	1a9b      	subs	r3, r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	440b      	add	r3, r1
 800160e:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_len = 0U;
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	4613      	mov	r3, r2
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	1a9b      	subs	r3, r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	440b      	add	r3, r1
 8001624:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	3301      	adds	r3, #1
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	429a      	cmp	r2, r3
 800163a:	d8b3      	bhi.n	80015a4 <HAL_PCD_Init+0xd4>
 }
  
 /* Init Device */
 /*CNTR_FRES = 1U*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2201      	movs	r2, #1
 8001642:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 
 /*CNTR_FRES = 0U*/
 hpcd->Instance->CNTR = 0U;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2200      	movs	r2, #0
 800164c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 
 /*Clear pending interrupts*/
 hpcd->Instance->ISTR = 0U;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2200      	movs	r2, #0
 8001656:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 
  /*Set Btable Adress*/
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2200      	movs	r2, #0
 8001660:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  
  /*set wInterrupt_Mask global variable*/
  wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8001664:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8001668:	60bb      	str	r3, [r7, #8]
  | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68ba      	ldr	r2, [r7, #8]
 8001670:	b292      	uxth	r2, r2
 8001672:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  hpcd->USB_Address = 0U;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 2371 	strb.w	r2, [r3, #881]	; 0x371

 return HAL_OK;
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <HAL_PCD_Start>:
  * @brief  Start the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /*  DP Pull-Down is external */
  HAL_PCDEx_SetConnectionState (hpcd, 1U);
 8001698:	2101      	movs	r1, #1
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f005 f88a 	bl	80067b4 <HAL_PCDEx_SetConnectionState>
  
  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
	...

080016ac <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80016ac:	b590      	push	{r4, r7, lr}
 80016ae:	b089      	sub	sp, #36	; 0x24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count=0U;
 80016b4:	2300      	movs	r3, #0
 80016b6:	83fb      	strh	r3, [r7, #30]
  uint8_t EPindex;
  __IO uint16_t wIstr;  
  __IO uint16_t wEPVal = 0U;
 80016b8:	2300      	movs	r3, #0
 80016ba:	81bb      	strh	r3, [r7, #12]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0U)
 80016bc:	e2f8      	b.n	8001cb0 <PCD_EP_ISR_Handler+0x604>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80016be:	89fb      	ldrh	r3, [r7, #14]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	f003 030f 	and.w	r3, r3, #15
 80016c8:	76fb      	strb	r3, [r7, #27]
    
    if (EPindex == 0U)
 80016ca:	7efb      	ldrb	r3, [r7, #27]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f040 8121 	bne.w	8001914 <PCD_EP_ISR_Handler+0x268>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80016d2:	89fb      	ldrh	r3, [r7, #14]
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	f003 0310 	and.w	r3, r3, #16
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d14b      	bne.n	8001776 <PCD_EP_ISR_Handler+0xca>
      {
        /* DIR = 0U */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1U) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80016ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3328      	adds	r3, #40	; 0x28
 80016fa:	617b      	str	r3, [r7, #20]
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001704:	b29b      	uxth	r3, r3
 8001706:	461a      	mov	r2, r3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	4413      	add	r3, r2
 8001710:	461a      	mov	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4413      	add	r3, r2
 8001718:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800171c:	881b      	ldrh	r3, [r3, #0]
 800171e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	619a      	str	r2, [r3, #24]
        ep->xfer_buff += ep->xfer_count;
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	691a      	ldr	r2, [r3, #16]
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	441a      	add	r2, r3
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	611a      	str	r2, [r3, #16]
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001734:	2100      	movs	r1, #0
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f004 fd53 	bl	80061e2 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b00      	cmp	r3, #0
 8001746:	f000 82b3 	beq.w	8001cb0 <PCD_EP_ISR_Handler+0x604>
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	2b00      	cmp	r3, #0
 8001750:	f040 82ae 	bne.w	8001cb0 <PCD_EP_ISR_Handler+0x604>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	b292      	uxth	r2, r2
 8001768:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001774:	e29c      	b.n	8001cb0 <PCD_EP_ISR_Handler+0x604>
      {
        /* DIR = 1U */
        
        /* DIR = 1U & CTR_RX       => SETUP or OUT int */
        /* DIR = 1U & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 800177c:	617b      	str	r3, [r7, #20]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	b29b      	uxth	r3, r3
 8001786:	81bb      	strh	r3, [r7, #12]
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001788:	89bb      	ldrh	r3, [r7, #12]
 800178a:	b29b      	uxth	r3, r3
 800178c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001790:	2b00      	cmp	r3, #0
 8001792:	d02f      	beq.n	80017f4 <PCD_EP_ISR_Handler+0x148>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800179c:	b29b      	uxth	r3, r3
 800179e:	461a      	mov	r2, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	4413      	add	r3, r2
 80017a8:	461a      	mov	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4413      	add	r3, r2
 80017b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80017b4:	881b      	ldrh	r3, [r3, #0]
 80017b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	619a      	str	r2, [r3, #24]
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)(void*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6818      	ldr	r0, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f503 715d 	add.w	r1, r3, #884	; 0x374
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	889a      	ldrh	r2, [r3, #4]
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	f001 fce9 	bl	80031a8 <PCD_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1U*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	881b      	ldrh	r3, [r3, #0]
 80017e0:	b299      	uxth	r1, r3
 80017e2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80017e6:	400b      	ands	r3, r1
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f004 fccb 	bl	8006188 <HAL_PCD_SetupStageCallback>
 80017f2:	e25d      	b.n	8001cb0 <PCD_EP_ISR_Handler+0x604>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80017f4:	89bb      	ldrh	r3, [r7, #12]
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	b21b      	sxth	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f280 8258 	bge.w	8001cb0 <PCD_EP_ISR_Handler+0x604>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	b299      	uxth	r1, r3
 800180c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001810:	400b      	ands	r3, r1
 8001812:	b29b      	uxth	r3, r3
 8001814:	8013      	strh	r3, [r2, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800181e:	b29b      	uxth	r3, r3
 8001820:	461a      	mov	r2, r3
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	4413      	add	r3, r2
 800182a:	461a      	mov	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4413      	add	r3, r2
 8001832:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001836:	881b      	ldrh	r3, [r3, #0]
 8001838:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	619a      	str	r2, [r3, #24]
          
          if (ep->xfer_count != 0U)
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d011      	beq.n	800186c <PCD_EP_ISR_Handler+0x1c0>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6818      	ldr	r0, [r3, #0]
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	6919      	ldr	r1, [r3, #16]
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	889a      	ldrh	r2, [r3, #4]
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	b29b      	uxth	r3, r3
 800185a:	f001 fca5 	bl	80031a8 <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	691a      	ldr	r2, [r3, #16]
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	441a      	add	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	611a      	str	r2, [r3, #16]
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800186c:	2100      	movs	r1, #0
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f004 fc9c 	bl	80061ac <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800187c:	b29b      	uxth	r3, r3
 800187e:	461a      	mov	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4413      	add	r3, r2
 8001886:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	2b3e      	cmp	r3, #62	; 0x3e
 8001892:	d917      	bls.n	80018c4 <PCD_EP_ISR_Handler+0x218>
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	095b      	lsrs	r3, r3, #5
 800189a:	83bb      	strh	r3, [r7, #28]
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	f003 031f 	and.w	r3, r3, #31
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d102      	bne.n	80018ae <PCD_EP_ISR_Handler+0x202>
 80018a8:	8bbb      	ldrh	r3, [r7, #28]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	83bb      	strh	r3, [r7, #28]
 80018ae:	8bbb      	ldrh	r3, [r7, #28]
 80018b0:	029b      	lsls	r3, r3, #10
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018bc:	b29a      	uxth	r2, r3
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	801a      	strh	r2, [r3, #0]
 80018c2:	e011      	b.n	80018e8 <PCD_EP_ISR_Handler+0x23c>
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	085b      	lsrs	r3, r3, #1
 80018ca:	83bb      	strh	r3, [r7, #28]
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d002      	beq.n	80018de <PCD_EP_ISR_Handler+0x232>
 80018d8:	8bbb      	ldrh	r3, [r7, #28]
 80018da:	3301      	adds	r3, #1
 80018dc:	83bb      	strh	r3, [r7, #28]
 80018de:	8bbb      	ldrh	r3, [r7, #28]
 80018e0:	029b      	lsls	r3, r3, #10
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018f8:	b29c      	uxth	r4, r3
 80018fa:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80018fe:	b29c      	uxth	r4, r3
 8001900:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8001904:	b29c      	uxth	r4, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	4b98      	ldr	r3, [pc, #608]	; (8001b6c <PCD_EP_ISR_Handler+0x4c0>)
 800190c:	4323      	orrs	r3, r4
 800190e:	b29b      	uxth	r3, r3
 8001910:	8013      	strh	r3, [r2, #0]
 8001912:	e1cd      	b.n	8001cb0 <PCD_EP_ISR_Handler+0x604>
    {
      
      /* Decode and service non control endpoints interrupt  */
      
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	7efb      	ldrb	r3, [r7, #27]
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	b29b      	uxth	r3, r3
 8001924:	81bb      	strh	r3, [r7, #12]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001926:	89bb      	ldrh	r3, [r7, #12]
 8001928:	b29b      	uxth	r3, r3
 800192a:	b21b      	sxth	r3, r3
 800192c:	2b00      	cmp	r3, #0
 800192e:	f280 80cf 	bge.w	8001ad0 <PCD_EP_ISR_Handler+0x424>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	461a      	mov	r2, r3
 8001938:	7efb      	ldrb	r3, [r7, #27]
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	441a      	add	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4619      	mov	r1, r3
 8001944:	7efb      	ldrb	r3, [r7, #27]
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	440b      	add	r3, r1
 800194a:	881b      	ldrh	r3, [r3, #0]
 800194c:	b299      	uxth	r1, r3
 800194e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001952:	400b      	ands	r3, r1
 8001954:	b29b      	uxth	r3, r3
 8001956:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->OUT_ep[EPindex];
 8001958:	7efa      	ldrb	r2, [r7, #27]
 800195a:	4613      	mov	r3, r2
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	1a9b      	subs	r3, r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	4413      	add	r3, r2
 800196a:	3304      	adds	r3, #4
 800196c:	617b      	str	r3, [r7, #20]
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	7a9b      	ldrb	r3, [r3, #10]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d120      	bne.n	80019b8 <PCD_EP_ISR_Handler+0x30c>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800197e:	b29b      	uxth	r3, r3
 8001980:	461a      	mov	r2, r3
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	4413      	add	r3, r2
 800198a:	461a      	mov	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4413      	add	r3, r2
 8001992:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001996:	881b      	ldrh	r3, [r3, #0]
 8001998:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800199c:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 800199e:	8bfb      	ldrh	r3, [r7, #30]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d070      	beq.n	8001a86 <PCD_EP_ISR_Handler+0x3da>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6818      	ldr	r0, [r3, #0]
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	6919      	ldr	r1, [r3, #16]
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	889a      	ldrh	r2, [r3, #4]
 80019b0:	8bfb      	ldrh	r3, [r7, #30]
 80019b2:	f001 fbf9 	bl	80031a8 <PCD_ReadPMA>
 80019b6:	e066      	b.n	8001a86 <PCD_EP_ISR_Handler+0x3da>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_RX) == USB_EP_DTOG_RX)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	461a      	mov	r2, r3
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4413      	add	r3, r2
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019d2:	d120      	bne.n	8001a16 <PCD_EP_ISR_Handler+0x36a>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019dc:	b29b      	uxth	r3, r3
 80019de:	461a      	mov	r2, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	4413      	add	r3, r2
 80019e8:	461a      	mov	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4413      	add	r3, r2
 80019f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019fa:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80019fc:	8bfb      	ldrh	r3, [r7, #30]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d029      	beq.n	8001a56 <PCD_EP_ISR_Handler+0x3aa>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6818      	ldr	r0, [r3, #0]
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	6919      	ldr	r1, [r3, #16]
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	88da      	ldrh	r2, [r3, #6]
 8001a0e:	8bfb      	ldrh	r3, [r7, #30]
 8001a10:	f001 fbca 	bl	80031a8 <PCD_ReadPMA>
 8001a14:	e01f      	b.n	8001a56 <PCD_EP_ISR_Handler+0x3aa>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	461a      	mov	r2, r3
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	4413      	add	r3, r2
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4413      	add	r3, r2
 8001a32:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a3c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001a3e:	8bfb      	ldrh	r3, [r7, #30]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d008      	beq.n	8001a56 <PCD_EP_ISR_Handler+0x3aa>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6818      	ldr	r0, [r3, #0]
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	6919      	ldr	r1, [r3, #16]
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	891a      	ldrh	r2, [r3, #8]
 8001a50:	8bfb      	ldrh	r3, [r7, #30]
 8001a52:	f001 fba9 	bl	80031a8 <PCD_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT)  
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	441a      	add	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4619      	mov	r1, r3
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	b299      	uxth	r1, r3
 8001a76:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001a7a:	400b      	ands	r3, r1
 8001a7c:	b299      	uxth	r1, r3
 8001a7e:	4b3c      	ldr	r3, [pc, #240]	; (8001b70 <PCD_EP_ISR_Handler+0x4c4>)
 8001a80:	430b      	orrs	r3, r1
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	699a      	ldr	r2, [r3, #24]
 8001a8a:	8bfb      	ldrh	r3, [r7, #30]
 8001a8c:	441a      	add	r2, r3
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	619a      	str	r2, [r3, #24]
        ep->xfer_buff+=count;
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	691a      	ldr	r2, [r3, #16]
 8001a96:	8bfb      	ldrh	r3, [r7, #30]
 8001a98:	441a      	add	r2, r3
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	611a      	str	r2, [r3, #16]
       
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d004      	beq.n	8001ab0 <PCD_EP_ISR_Handler+0x404>
 8001aa6:	8bfa      	ldrh	r2, [r7, #30]
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d206      	bcs.n	8001abe <PCD_EP_ISR_Handler+0x412>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f004 fb78 	bl	80061ac <HAL_PCD_DataOutStageCallback>
 8001abc:	e008      	b.n	8001ad0 <PCD_EP_ISR_Handler+0x424>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	7819      	ldrb	r1, [r3, #0]
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	691a      	ldr	r2, [r3, #16]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 ff78 	bl	80029c0 <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001ad0:	89bb      	ldrh	r3, [r7, #12]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 80e9 	beq.w	8001cb0 <PCD_EP_ISR_Handler+0x604>
      {
        ep = &hpcd->IN_ep[EPindex];
 8001ade:	7efa      	ldrb	r2, [r7, #27]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	1a9b      	subs	r3, r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	3328      	adds	r3, #40	; 0x28
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	617b      	str	r3, [r7, #20]
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	461a      	mov	r2, r3
 8001af6:	7efb      	ldrb	r3, [r7, #27]
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	441a      	add	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4619      	mov	r1, r3
 8001b02:	7efb      	ldrb	r3, [r7, #27]
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	440b      	add	r3, r1
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	8013      	strh	r3, [r2, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	7a9b      	ldrb	r3, [r3, #10]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d129      	bne.n	8001b74 <PCD_EP_ISR_Handler+0x4c8>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	4413      	add	r3, r2
 8001b34:	461a      	mov	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001b40:	881b      	ldrh	r3, [r3, #0]
 8001b42:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	619a      	str	r2, [r3, #24]
          if (ep->xfer_count != 0U)
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d07e      	beq.n	8001c50 <PCD_EP_ISR_Handler+0x5a4>
          {
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6818      	ldr	r0, [r3, #0]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	6919      	ldr	r1, [r3, #16]
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	889a      	ldrh	r2, [r3, #4]
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	f001 fae6 	bl	8003134 <PCD_WritePMA>
 8001b68:	e072      	b.n	8001c50 <PCD_EP_ISR_Handler+0x5a4>
 8001b6a:	bf00      	nop
 8001b6c:	ffff8080 	.word	0xffff8080
 8001b70:	ffff80c0 	.word	0xffff80c0
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b8a:	2b40      	cmp	r3, #64	; 0x40
 8001b8c:	d124      	bne.n	8001bd8 <PCD_EP_ISR_Handler+0x52c>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	461a      	mov	r2, r3
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4413      	add	r3, r2
 8001baa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	619a      	str	r2, [r3, #24]
            if (ep->xfer_count != 0U)
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d02f      	beq.n	8001c20 <PCD_EP_ISR_Handler+0x574>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6818      	ldr	r0, [r3, #0]
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	6919      	ldr	r1, [r3, #16]
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	88da      	ldrh	r2, [r3, #6]
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	f001 faaf 	bl	8003134 <PCD_WritePMA>
 8001bd6:	e023      	b.n	8001c20 <PCD_EP_ISR_Handler+0x574>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	461a      	mov	r2, r3
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	4413      	add	r3, r2
 8001bec:	461a      	mov	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	619a      	str	r2, [r3, #24]
            if (ep->xfer_count != 0U)
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00a      	beq.n	8001c20 <PCD_EP_ISR_Handler+0x574>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6818      	ldr	r0, [r3, #0]
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	6919      	ldr	r1, [r3, #16]
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	891a      	ldrh	r2, [r3, #8]
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	f001 fa8a 	bl	8003134 <PCD_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN)  
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	461a      	mov	r2, r3
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	441a      	add	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4619      	mov	r1, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	881b      	ldrh	r3, [r3, #0]
 8001c3e:	b299      	uxth	r1, r3
 8001c40:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001c44:	400b      	ands	r3, r1
 8001c46:	b299      	uxth	r1, r3
 8001c48:	4b21      	ldr	r3, [pc, #132]	; (8001cd0 <PCD_EP_ISR_Handler+0x624>)
 8001c4a:	430b      	orrs	r3, r1
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	4413      	add	r3, r2
 8001c64:	461a      	mov	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001c70:	881b      	ldrh	r3, [r3, #0]
 8001c72:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	619a      	str	r2, [r3, #24]
        ep->xfer_buff+=ep->xfer_count;
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	691a      	ldr	r2, [r3, #16]
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	441a      	add	r2, r3
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	611a      	str	r2, [r3, #16]
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d106      	bne.n	8001c9e <PCD_EP_ISR_Handler+0x5f2>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	4619      	mov	r1, r3
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f004 faa3 	bl	80061e2 <HAL_PCD_DataInStageCallback>
 8001c9c:	e008      	b.n	8001cb0 <PCD_EP_ISR_Handler+0x604>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	7819      	ldrb	r1, [r3, #0]
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	691a      	ldr	r2, [r3, #16]
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 ff9c 	bl	8002be8 <HAL_PCD_EP_Transmit>
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0U)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	461a      	mov	r2, r3
 8001cbc:	81fa      	strh	r2, [r7, #14]
 8001cbe:	b21b      	sxth	r3, r3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f6ff acfc 	blt.w	80016be <PCD_EP_ISR_Handler+0x12>
        }
      } 
    }
  }
  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3724      	adds	r7, #36	; 0x24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd90      	pop	{r4, r7, pc}
 8001cd0:	ffffc080 	.word	0xffffc080

08001cd4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cee:	d102      	bne.n	8001cf6 <HAL_PCD_IRQHandler+0x22>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff fcdb 	bl	80016ac <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d08:	d10c      	bne.n	8001d24 <HAL_PCD_IRQHandler+0x50>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 8001d12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f004 fa8b 	bl	8006232 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f8a7 	bl	8001e72 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d36:	d105      	bne.n	8001d44 <HAL_PCD_IRQHandler+0x70>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8001d40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d56:	d105      	bne.n	8001d64 <HAL_PCD_IRQHandler+0x90>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f64d 72ff 	movw	r2, #57343	; 0xdfff
 8001d60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d76:	d120      	bne.n	8001dba <HAL_PCD_IRQHandler+0xe6>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6812      	ldr	r2, [r2, #0]
 8001d80:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001d84:	b292      	uxth	r2, r2
 8001d86:	f022 0204 	bic.w	r2, r2, #4
 8001d8a:	b292      	uxth	r2, r2
 8001d8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6812      	ldr	r2, [r2, #0]
 8001d98:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001d9c:	b292      	uxth	r2, r2
 8001d9e:	f022 0208 	bic.w	r2, r2, #8
 8001da2:	b292      	uxth	r2, r2
 8001da4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    HAL_PCD_ResumeCallback(hpcd);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f004 fa7f 	bl	80062ac <HAL_PCD_ResumeCallback>

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f64e 72ff 	movw	r2, #61439	; 0xefff
 8001db6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001dcc:	d12a      	bne.n	8001e24 <HAL_PCD_IRQHandler+0x150>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	6812      	ldr	r2, [r2, #0]
 8001dd6:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001dda:	b292      	uxth	r2, r2
 8001ddc:	f042 0208 	orr.w	r2, r2, #8
 8001de0:	b292      	uxth	r2, r2
 8001de2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
 8001dee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	6812      	ldr	r2, [r2, #0]
 8001dfa:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001dfe:	b292      	uxth	r2, r2
 8001e00:	f042 0204 	orr.w	r2, r2, #4
 8001e04:	b292      	uxth	r2, r2
 8001e06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e1c:	d002      	beq.n	8001e24 <HAL_PCD_IRQHandler+0x150>
    {
      HAL_PCD_SuspendCallback(hpcd);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f004 fa2a 	bl	8006278 <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e36:	d108      	bne.n	8001e4a <HAL_PCD_IRQHandler+0x176>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 8001e40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f004 f9e6 	bl	8006216 <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e5c:	d105      	bne.n	8001e6a <HAL_PCD_IRQHandler+0x196>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8001e66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	70fb      	strb	r3, [r7, #3]
   __HAL_LOCK(hpcd); 
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <HAL_PCD_SetAddress+0x1a>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e015      	b.n	8001eb8 <HAL_PCD_SetAddress+0x46>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370

   if(address == 0U) 
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d105      	bne.n	8001ea6 <HAL_PCD_SetAddress+0x34>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2280      	movs	r2, #128	; 0x80
 8001ea0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8001ea4:	e003      	b.n	8001eae <HAL_PCD_SetAddress+0x3c>
   }
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	78fa      	ldrb	r2, [r7, #3]
 8001eaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   }

  __HAL_UNLOCK(hpcd);   
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001ec4:	b490      	push	{r4, r7}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	4608      	mov	r0, r1
 8001ece:	4611      	mov	r1, r2
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	70fb      	strb	r3, [r7, #3]
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	803b      	strh	r3, [r7, #0]
 8001eda:	4613      	mov	r3, r2
 8001edc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	747b      	strb	r3, [r7, #17]
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8001ee2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	da0b      	bge.n	8001f02 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001eea:	78fb      	ldrb	r3, [r7, #3]
 8001eec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	1a9b      	subs	r3, r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	3328      	adds	r3, #40	; 0x28
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	617b      	str	r3, [r7, #20]
 8001f00:	e00c      	b.n	8001f1c <HAL_PCD_EP_Open+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001f02:	78fb      	ldrb	r3, [r7, #3]
 8001f04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f08:	4613      	mov	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	1a9b      	subs	r3, r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	4413      	add	r3, r2
 8001f18:	3304      	adds	r3, #4
 8001f1a:	617b      	str	r3, [r7, #20]
  }
  ep->num   = ep_addr & 0x7FU;
 8001f1c:	78fb      	ldrb	r3, [r7, #3]
 8001f1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8001f28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	09db      	lsrs	r3, r3, #7
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	461a      	mov	r2, r3
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8001f38:	883a      	ldrh	r2, [r7, #0]
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	78ba      	ldrb	r2, [r7, #2]
 8001f42:	70da      	strb	r2, [r3, #3]
  
  __HAL_LOCK(hpcd); 
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d101      	bne.n	8001f52 <HAL_PCD_EP_Open+0x8e>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e323      	b.n	800259a <HAL_PCD_EP_Open+0x6d6>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370

  /* initialize Endpoint */
  switch (ep->type)
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	78db      	ldrb	r3, [r3, #3]
 8001f5e:	2b03      	cmp	r3, #3
 8001f60:	d86f      	bhi.n	8002042 <HAL_PCD_EP_Open+0x17e>
 8001f62:	a201      	add	r2, pc, #4	; (adr r2, 8001f68 <HAL_PCD_EP_Open+0xa4>)
 8001f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f68:	08001f79 	.word	0x08001f79
 8001f6c:	0800200f 	.word	0x0800200f
 8001f70:	08001fad 	.word	0x08001fad
 8001f74:	08001fdb 	.word	0x08001fdb
  {
  case PCD_EP_TYPE_CTRL:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	441a      	add	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	440b      	add	r3, r1
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	8013      	strh	r3, [r2, #0]
    break;
 8001faa:	e04b      	b.n	8002044 <HAL_PCD_EP_Open+0x180>
  case PCD_EP_TYPE_BULK:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	441a      	add	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	8013      	strh	r3, [r2, #0]
    break;
 8001fd8:	e034      	b.n	8002044 <HAL_PCD_EP_Open+0x180>
  case PCD_EP_TYPE_INTR:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	441a      	add	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4619      	mov	r1, r3
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002002:	b29b      	uxth	r3, r3
 8002004:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002008:	b29b      	uxth	r3, r3
 800200a:	8013      	strh	r3, [r2, #0]
    break;
 800200c:	e01a      	b.n	8002044 <HAL_PCD_EP_Open+0x180>
  case PCD_EP_TYPE_ISOC:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	461a      	mov	r2, r3
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	441a      	add	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4619      	mov	r1, r3
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	440b      	add	r3, r1
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	b29b      	uxth	r3, r3
 800202e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002036:	b29b      	uxth	r3, r3
 8002038:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800203c:	b29b      	uxth	r3, r3
 800203e:	8013      	strh	r3, [r2, #0]
    break;
 8002040:	e000      	b.n	8002044 <HAL_PCD_EP_Open+0x180>
  default:
    break;
 8002042:	bf00      	nop
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	461a      	mov	r2, r3
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	441a      	add	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4619      	mov	r1, r3
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	440b      	add	r3, r1
 8002060:	881b      	ldrh	r3, [r3, #0]
 8002062:	b299      	uxth	r1, r3
 8002064:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002068:	400b      	ands	r3, r1
 800206a:	b299      	uxth	r1, r3
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	b29b      	uxth	r3, r3
 8002072:	430b      	orrs	r3, r1
 8002074:	b299      	uxth	r1, r3
 8002076:	4b81      	ldr	r3, [pc, #516]	; (800227c <HAL_PCD_EP_Open+0x3b8>)
 8002078:	430b      	orrs	r3, r1
 800207a:	b29b      	uxth	r3, r3
 800207c:	8013      	strh	r3, [r2, #0]
  
  if (ep->doublebuffer == 0U) 
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	7a9b      	ldrb	r3, [r3, #10]
 8002082:	2b00      	cmp	r3, #0
 8002084:	f040 8100 	bne.w	8002288 <HAL_PCD_EP_Open+0x3c4>
  {
    if (ep->is_in)
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	785b      	ldrb	r3, [r3, #1]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d059      	beq.n	8002144 <HAL_PCD_EP_Open+0x280>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002098:	b29b      	uxth	r3, r3
 800209a:	461a      	mov	r2, r3
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	4413      	add	r3, r2
 80020a4:	461a      	mov	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4413      	add	r3, r2
 80020ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020b0:	461a      	mov	r2, r3
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	889b      	ldrh	r3, [r3, #4]
 80020b6:	085b      	lsrs	r3, r3, #1
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	b29b      	uxth	r3, r3
 80020be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	461a      	mov	r2, r3
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d017      	beq.n	800210a <HAL_PCD_EP_Open+0x246>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	461a      	mov	r2, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	441a      	add	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4619      	mov	r1, r3
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	440b      	add	r3, r1
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	b299      	uxth	r1, r3
 80020fa:	f640 730f 	movw	r3, #3855	; 0xf0f
 80020fe:	400b      	ands	r3, r1
 8002100:	b299      	uxth	r1, r3
 8002102:	4b5f      	ldr	r3, [pc, #380]	; (8002280 <HAL_PCD_EP_Open+0x3bc>)
 8002104:	430b      	orrs	r3, r1
 8002106:	b29b      	uxth	r3, r3
 8002108:	8013      	strh	r3, [r2, #0]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK) 
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	b29b      	uxth	r3, r3
 800211c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002120:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002124:	b29c      	uxth	r4, r3
 8002126:	f084 0320 	eor.w	r3, r4, #32
 800212a:	b29c      	uxth	r4, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	461a      	mov	r2, r3
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	441a      	add	r2, r3
 800213a:	4b50      	ldr	r3, [pc, #320]	; (800227c <HAL_PCD_EP_Open+0x3b8>)
 800213c:	4323      	orrs	r3, r4
 800213e:	b29b      	uxth	r3, r3
 8002140:	8013      	strh	r3, [r2, #0]
 8002142:	e225      	b.n	8002590 <HAL_PCD_EP_Open+0x6cc>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800214c:	b29b      	uxth	r3, r3
 800214e:	461a      	mov	r2, r3
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	4413      	add	r3, r2
 8002158:	461a      	mov	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4413      	add	r3, r2
 8002160:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002164:	461a      	mov	r2, r3
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	889b      	ldrh	r3, [r3, #4]
 800216a:	085b      	lsrs	r3, r3, #1
 800216c:	b29b      	uxth	r3, r3
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	b29b      	uxth	r3, r3
 8002172:	8013      	strh	r3, [r2, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800217c:	b29b      	uxth	r3, r3
 800217e:	461a      	mov	r2, r3
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	4413      	add	r3, r2
 8002188:	461a      	mov	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4413      	add	r3, r2
 8002190:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	2b3e      	cmp	r3, #62	; 0x3e
 800219c:	d917      	bls.n	80021ce <HAL_PCD_EP_Open+0x30a>
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	095b      	lsrs	r3, r3, #5
 80021a4:	827b      	strh	r3, [r7, #18]
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	f003 031f 	and.w	r3, r3, #31
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d102      	bne.n	80021b8 <HAL_PCD_EP_Open+0x2f4>
 80021b2:	8a7b      	ldrh	r3, [r7, #18]
 80021b4:	3b01      	subs	r3, #1
 80021b6:	827b      	strh	r3, [r7, #18]
 80021b8:	8a7b      	ldrh	r3, [r7, #18]
 80021ba:	029b      	lsls	r3, r3, #10
 80021bc:	b29b      	uxth	r3, r3
 80021be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	801a      	strh	r2, [r3, #0]
 80021cc:	e011      	b.n	80021f2 <HAL_PCD_EP_Open+0x32e>
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	085b      	lsrs	r3, r3, #1
 80021d4:	827b      	strh	r3, [r7, #18]
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d002      	beq.n	80021e8 <HAL_PCD_EP_Open+0x324>
 80021e2:	8a7b      	ldrh	r3, [r7, #18]
 80021e4:	3301      	adds	r3, #1
 80021e6:	827b      	strh	r3, [r7, #18]
 80021e8:	8a7b      	ldrh	r3, [r7, #18]
 80021ea:	029b      	lsls	r3, r3, #10
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	461a      	mov	r2, r3
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	b29b      	uxth	r3, r3
 8002204:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d017      	beq.n	800223c <HAL_PCD_EP_Open+0x378>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	461a      	mov	r2, r3
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	441a      	add	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4619      	mov	r1, r3
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	440b      	add	r3, r1
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	b299      	uxth	r1, r3
 800222c:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002230:	400b      	ands	r3, r1
 8002232:	b299      	uxth	r1, r3
 8002234:	4b13      	ldr	r3, [pc, #76]	; (8002284 <HAL_PCD_EP_Open+0x3c0>)
 8002236:	430b      	orrs	r3, r1
 8002238:	b29b      	uxth	r3, r3
 800223a:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	461a      	mov	r2, r3
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	881b      	ldrh	r3, [r3, #0]
 800224c:	b29b      	uxth	r3, r3
 800224e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002256:	b29c      	uxth	r4, r3
 8002258:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800225c:	b29c      	uxth	r4, r3
 800225e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002262:	b29c      	uxth	r4, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	461a      	mov	r2, r3
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	441a      	add	r2, r3
 8002272:	4b02      	ldr	r3, [pc, #8]	; (800227c <HAL_PCD_EP_Open+0x3b8>)
 8002274:	4323      	orrs	r3, r4
 8002276:	b29b      	uxth	r3, r3
 8002278:	8013      	strh	r3, [r2, #0]
 800227a:	e189      	b.n	8002590 <HAL_PCD_EP_Open+0x6cc>
 800227c:	ffff8080 	.word	0xffff8080
 8002280:	ffff80c0 	.word	0xffff80c0
 8002284:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	461a      	mov	r2, r3
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	441a      	add	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4619      	mov	r1, r3
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	440b      	add	r3, r1
 80022a4:	881b      	ldrh	r3, [r3, #0]
 80022a6:	b299      	uxth	r1, r3
 80022a8:	f640 630f 	movw	r3, #3599	; 0xe0f
 80022ac:	400b      	ands	r3, r1
 80022ae:	b299      	uxth	r1, r3
 80022b0:	4b69      	ldr	r3, [pc, #420]	; (8002458 <HAL_PCD_EP_Open+0x594>)
 80022b2:	430b      	orrs	r3, r1
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	8013      	strh	r3, [r2, #0]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	461a      	mov	r2, r3
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	4413      	add	r3, r2
 80022cc:	461a      	mov	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4413      	add	r3, r2
 80022d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022d8:	461a      	mov	r2, r3
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	88db      	ldrh	r3, [r3, #6]
 80022de:	085b      	lsrs	r3, r3, #1
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	8013      	strh	r3, [r2, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	461a      	mov	r2, r3
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4413      	add	r3, r2
 80022fc:	461a      	mov	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4413      	add	r3, r2
 8002304:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002308:	461a      	mov	r2, r3
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	891b      	ldrh	r3, [r3, #8]
 800230e:	085b      	lsrs	r3, r3, #1
 8002310:	b29b      	uxth	r3, r3
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	b29b      	uxth	r3, r3
 8002316:	8013      	strh	r3, [r2, #0]
    
    if (ep->is_in==0U)
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	785b      	ldrb	r3, [r3, #1]
 800231c:	2b00      	cmp	r3, #0
 800231e:	f040 80a3 	bne.w	8002468 <HAL_PCD_EP_Open+0x5a4>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	461a      	mov	r2, r3
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	b29b      	uxth	r3, r3
 8002334:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d017      	beq.n	800236c <HAL_PCD_EP_Open+0x4a8>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	461a      	mov	r2, r3
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	441a      	add	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4619      	mov	r1, r3
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	440b      	add	r3, r1
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	b299      	uxth	r1, r3
 800235c:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002360:	400b      	ands	r3, r1
 8002362:	b299      	uxth	r1, r3
 8002364:	4b3d      	ldr	r3, [pc, #244]	; (800245c <HAL_PCD_EP_Open+0x598>)
 8002366:	430b      	orrs	r3, r1
 8002368:	b29b      	uxth	r3, r3
 800236a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	881b      	ldrh	r3, [r3, #0]
 800237c:	b29b      	uxth	r3, r3
 800237e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002382:	2b00      	cmp	r3, #0
 8002384:	d017      	beq.n	80023b6 <HAL_PCD_EP_Open+0x4f2>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	441a      	add	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4619      	mov	r1, r3
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	440b      	add	r3, r1
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	b299      	uxth	r1, r3
 80023a6:	f640 730f 	movw	r3, #3855	; 0xf0f
 80023aa:	400b      	ands	r3, r1
 80023ac:	b299      	uxth	r1, r3
 80023ae:	4b2c      	ldr	r3, [pc, #176]	; (8002460 <HAL_PCD_EP_Open+0x59c>)
 80023b0:	430b      	orrs	r3, r1
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	461a      	mov	r2, r3
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	441a      	add	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4619      	mov	r1, r3
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	b299      	uxth	r1, r3
 80023d6:	f640 730f 	movw	r3, #3855	; 0xf0f
 80023da:	400b      	ands	r3, r1
 80023dc:	b299      	uxth	r1, r3
 80023de:	4b20      	ldr	r3, [pc, #128]	; (8002460 <HAL_PCD_EP_Open+0x59c>)
 80023e0:	430b      	orrs	r3, r1
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	461a      	mov	r2, r3
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002400:	b29c      	uxth	r4, r3
 8002402:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002406:	b29c      	uxth	r4, r3
 8002408:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800240c:	b29c      	uxth	r4, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	461a      	mov	r2, r3
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	441a      	add	r2, r3
 800241c:	4b11      	ldr	r3, [pc, #68]	; (8002464 <HAL_PCD_EP_Open+0x5a0>)
 800241e:	4323      	orrs	r3, r4
 8002420:	b29b      	uxth	r3, r3
 8002422:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	461a      	mov	r2, r3
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4413      	add	r3, r2
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	b29b      	uxth	r3, r3
 8002436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800243a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800243e:	b29c      	uxth	r4, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	461a      	mov	r2, r3
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	441a      	add	r2, r3
 800244e:	4b05      	ldr	r3, [pc, #20]	; (8002464 <HAL_PCD_EP_Open+0x5a0>)
 8002450:	4323      	orrs	r3, r4
 8002452:	b29b      	uxth	r3, r3
 8002454:	8013      	strh	r3, [r2, #0]
 8002456:	e09b      	b.n	8002590 <HAL_PCD_EP_Open+0x6cc>
 8002458:	ffff8180 	.word	0xffff8180
 800245c:	ffffc080 	.word	0xffffc080
 8002460:	ffff80c0 	.word	0xffff80c0
 8002464:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	461a      	mov	r2, r3
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	b29b      	uxth	r3, r3
 800247a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d017      	beq.n	80024b2 <HAL_PCD_EP_Open+0x5ee>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	461a      	mov	r2, r3
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	441a      	add	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4619      	mov	r1, r3
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	b299      	uxth	r1, r3
 80024a2:	f640 730f 	movw	r3, #3855	; 0xf0f
 80024a6:	400b      	ands	r3, r1
 80024a8:	b299      	uxth	r1, r3
 80024aa:	4b3e      	ldr	r3, [pc, #248]	; (80025a4 <HAL_PCD_EP_Open+0x6e0>)
 80024ac:	430b      	orrs	r3, r1
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	461a      	mov	r2, r3
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d017      	beq.n	80024fc <HAL_PCD_EP_Open+0x638>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	461a      	mov	r2, r3
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	441a      	add	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4619      	mov	r1, r3
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	440b      	add	r3, r1
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	b299      	uxth	r1, r3
 80024ec:	f640 730f 	movw	r3, #3855	; 0xf0f
 80024f0:	400b      	ands	r3, r1
 80024f2:	b299      	uxth	r1, r3
 80024f4:	4b2c      	ldr	r3, [pc, #176]	; (80025a8 <HAL_PCD_EP_Open+0x6e4>)
 80024f6:	430b      	orrs	r3, r1
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	461a      	mov	r2, r3
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	441a      	add	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4619      	mov	r1, r3
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	b299      	uxth	r1, r3
 800251c:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002520:	400b      	ands	r3, r1
 8002522:	b299      	uxth	r1, r3
 8002524:	4b1f      	ldr	r3, [pc, #124]	; (80025a4 <HAL_PCD_EP_Open+0x6e0>)
 8002526:	430b      	orrs	r3, r1
 8002528:	b29b      	uxth	r3, r3
 800252a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	461a      	mov	r2, r3
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	b29b      	uxth	r3, r3
 800253e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002542:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002546:	b29c      	uxth	r4, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	461a      	mov	r2, r3
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	441a      	add	r2, r3
 8002556:	4b15      	ldr	r3, [pc, #84]	; (80025ac <HAL_PCD_EP_Open+0x6e8>)
 8002558:	4323      	orrs	r3, r4
 800255a:	b29b      	uxth	r3, r3
 800255c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	461a      	mov	r2, r3
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	881b      	ldrh	r3, [r3, #0]
 800256e:	b29b      	uxth	r3, r3
 8002570:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002578:	b29c      	uxth	r4, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	461a      	mov	r2, r3
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	441a      	add	r2, r3
 8002588:	4b08      	ldr	r3, [pc, #32]	; (80025ac <HAL_PCD_EP_Open+0x6e8>)
 800258a:	4323      	orrs	r3, r4
 800258c:	b29b      	uxth	r3, r3
 800258e:	8013      	strh	r3, [r2, #0]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  return ret;
 8002598:	7c7b      	ldrb	r3, [r7, #17]
}
 800259a:	4618      	mov	r0, r3
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc90      	pop	{r4, r7}
 80025a2:	4770      	bx	lr
 80025a4:	ffffc080 	.word	0xffffc080
 80025a8:	ffff80c0 	.word	0xffff80c0
 80025ac:	ffff8080 	.word	0xffff8080

080025b0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 80025b0:	b490      	push	{r4, r7}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	460b      	mov	r3, r1
 80025ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 80025bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	da0b      	bge.n	80025dc <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80025c4:	78fb      	ldrb	r3, [r7, #3]
 80025c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80025ca:	4613      	mov	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	1a9b      	subs	r3, r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	3328      	adds	r3, #40	; 0x28
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	4413      	add	r3, r2
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	e00c      	b.n	80025f6 <HAL_PCD_EP_Close+0x46>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80025dc:	78fb      	ldrb	r3, [r7, #3]
 80025de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80025e2:	4613      	mov	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	1a9b      	subs	r3, r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	4413      	add	r3, r2
 80025f2:	3304      	adds	r3, #4
 80025f4:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 80025f6:	78fb      	ldrb	r3, [r7, #3]
 80025f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8002602:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002606:	b2db      	uxtb	r3, r3
 8002608:	09db      	lsrs	r3, r3, #7
 800260a:	b2db      	uxtb	r3, r3
 800260c:	461a      	mov	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_PCD_EP_Close+0x70>
 800261c:	2302      	movs	r3, #2
 800261e:	e1c4      	b.n	80029aa <HAL_PCD_EP_Close+0x3fa>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370

  if (ep->doublebuffer == 0U) 
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	7a9b      	ldrb	r3, [r3, #10]
 800262c:	2b00      	cmp	r3, #0
 800262e:	f040 8082 	bne.w	8002736 <HAL_PCD_EP_Close+0x186>
  {
    if (ep->is_in)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	785b      	ldrb	r3, [r3, #1]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d03e      	beq.n	80026b8 <HAL_PCD_EP_Close+0x108>
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	461a      	mov	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	b29b      	uxth	r3, r3
 800264c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002650:	2b00      	cmp	r3, #0
 8002652:	d017      	beq.n	8002684 <HAL_PCD_EP_Close+0xd4>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	461a      	mov	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	441a      	add	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4619      	mov	r1, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	440b      	add	r3, r1
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	b299      	uxth	r1, r3
 8002674:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002678:	400b      	ands	r3, r1
 800267a:	b299      	uxth	r1, r3
 800267c:	4b7b      	ldr	r3, [pc, #492]	; (800286c <HAL_PCD_EP_Close+0x2bc>)
 800267e:	430b      	orrs	r3, r1
 8002680:	b29b      	uxth	r3, r3
 8002682:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS) 
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	461a      	mov	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4413      	add	r3, r2
 8002692:	881b      	ldrh	r3, [r3, #0]
 8002694:	b29b      	uxth	r3, r3
 8002696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800269a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800269e:	b29c      	uxth	r4, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	461a      	mov	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	441a      	add	r2, r3
 80026ae:	4b70      	ldr	r3, [pc, #448]	; (8002870 <HAL_PCD_EP_Close+0x2c0>)
 80026b0:	4323      	orrs	r3, r4
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	8013      	strh	r3, [r2, #0]
 80026b6:	e173      	b.n	80029a0 <HAL_PCD_EP_Close+0x3f0>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	461a      	mov	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d017      	beq.n	8002702 <HAL_PCD_EP_Close+0x152>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	461a      	mov	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	441a      	add	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4619      	mov	r1, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	b299      	uxth	r1, r3
 80026f2:	f640 730f 	movw	r3, #3855	; 0xf0f
 80026f6:	400b      	ands	r3, r1
 80026f8:	b299      	uxth	r1, r3
 80026fa:	4b5e      	ldr	r3, [pc, #376]	; (8002874 <HAL_PCD_EP_Close+0x2c4>)
 80026fc:	430b      	orrs	r3, r1
 80026fe:	b29b      	uxth	r3, r3
 8002700:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	461a      	mov	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	b29b      	uxth	r3, r3
 8002714:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800271c:	b29c      	uxth	r4, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	461a      	mov	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	441a      	add	r2, r3
 800272c:	4b50      	ldr	r3, [pc, #320]	; (8002870 <HAL_PCD_EP_Close+0x2c0>)
 800272e:	4323      	orrs	r3, r4
 8002730:	b29b      	uxth	r3, r3
 8002732:	8013      	strh	r3, [r2, #0]
 8002734:	e134      	b.n	80029a0 <HAL_PCD_EP_Close+0x3f0>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0U)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	785b      	ldrb	r3, [r3, #1]
 800273a:	2b00      	cmp	r3, #0
 800273c:	f040 809c 	bne.w	8002878 <HAL_PCD_EP_Close+0x2c8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	461a      	mov	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	881b      	ldrh	r3, [r3, #0]
 8002750:	b29b      	uxth	r3, r3
 8002752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d017      	beq.n	800278a <HAL_PCD_EP_Close+0x1da>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	461a      	mov	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	441a      	add	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4619      	mov	r1, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	b299      	uxth	r1, r3
 800277a:	f640 730f 	movw	r3, #3855	; 0xf0f
 800277e:	400b      	ands	r3, r1
 8002780:	b299      	uxth	r1, r3
 8002782:	4b3c      	ldr	r3, [pc, #240]	; (8002874 <HAL_PCD_EP_Close+0x2c4>)
 8002784:	430b      	orrs	r3, r1
 8002786:	b29b      	uxth	r3, r3
 8002788:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	461a      	mov	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	b29b      	uxth	r3, r3
 800279c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d017      	beq.n	80027d4 <HAL_PCD_EP_Close+0x224>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	461a      	mov	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	441a      	add	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4619      	mov	r1, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	440b      	add	r3, r1
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	b299      	uxth	r1, r3
 80027c4:	f640 730f 	movw	r3, #3855	; 0xf0f
 80027c8:	400b      	ands	r3, r1
 80027ca:	b299      	uxth	r1, r3
 80027cc:	4b27      	ldr	r3, [pc, #156]	; (800286c <HAL_PCD_EP_Close+0x2bc>)
 80027ce:	430b      	orrs	r3, r1
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	461a      	mov	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	441a      	add	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4619      	mov	r1, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	440b      	add	r3, r1
 80027f0:	881b      	ldrh	r3, [r3, #0]
 80027f2:	b299      	uxth	r1, r3
 80027f4:	f640 730f 	movw	r3, #3855	; 0xf0f
 80027f8:	400b      	ands	r3, r1
 80027fa:	b299      	uxth	r1, r3
 80027fc:	4b1b      	ldr	r3, [pc, #108]	; (800286c <HAL_PCD_EP_Close+0x2bc>)
 80027fe:	430b      	orrs	r3, r1
 8002800:	b29b      	uxth	r3, r3
 8002802:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	461a      	mov	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	881b      	ldrh	r3, [r3, #0]
 8002814:	b29b      	uxth	r3, r3
 8002816:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800281a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800281e:	b29c      	uxth	r4, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	461a      	mov	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	441a      	add	r2, r3
 800282e:	4b10      	ldr	r3, [pc, #64]	; (8002870 <HAL_PCD_EP_Close+0x2c0>)
 8002830:	4323      	orrs	r3, r4
 8002832:	b29b      	uxth	r3, r3
 8002834:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	461a      	mov	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	b29b      	uxth	r3, r3
 8002848:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800284c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002850:	b29c      	uxth	r4, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	461a      	mov	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	441a      	add	r2, r3
 8002860:	4b03      	ldr	r3, [pc, #12]	; (8002870 <HAL_PCD_EP_Close+0x2c0>)
 8002862:	4323      	orrs	r3, r4
 8002864:	b29b      	uxth	r3, r3
 8002866:	8013      	strh	r3, [r2, #0]
 8002868:	e09a      	b.n	80029a0 <HAL_PCD_EP_Close+0x3f0>
 800286a:	bf00      	nop
 800286c:	ffff80c0 	.word	0xffff80c0
 8002870:	ffff8080 	.word	0xffff8080
 8002874:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	461a      	mov	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	881b      	ldrh	r3, [r3, #0]
 8002888:	b29b      	uxth	r3, r3
 800288a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d017      	beq.n	80028c2 <HAL_PCD_EP_Close+0x312>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	461a      	mov	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	441a      	add	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4619      	mov	r1, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	b299      	uxth	r1, r3
 80028b2:	f640 730f 	movw	r3, #3855	; 0xf0f
 80028b6:	400b      	ands	r3, r1
 80028b8:	b299      	uxth	r1, r3
 80028ba:	4b3e      	ldr	r3, [pc, #248]	; (80029b4 <HAL_PCD_EP_Close+0x404>)
 80028bc:	430b      	orrs	r3, r1
 80028be:	b29b      	uxth	r3, r3
 80028c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	461a      	mov	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d017      	beq.n	800290c <HAL_PCD_EP_Close+0x35c>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	461a      	mov	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	441a      	add	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4619      	mov	r1, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	440b      	add	r3, r1
 80028f8:	881b      	ldrh	r3, [r3, #0]
 80028fa:	b299      	uxth	r1, r3
 80028fc:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002900:	400b      	ands	r3, r1
 8002902:	b299      	uxth	r1, r3
 8002904:	4b2c      	ldr	r3, [pc, #176]	; (80029b8 <HAL_PCD_EP_Close+0x408>)
 8002906:	430b      	orrs	r3, r1
 8002908:	b29b      	uxth	r3, r3
 800290a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	461a      	mov	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	441a      	add	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4619      	mov	r1, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	440b      	add	r3, r1
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	b299      	uxth	r1, r3
 800292c:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002930:	400b      	ands	r3, r1
 8002932:	b299      	uxth	r1, r3
 8002934:	4b1f      	ldr	r3, [pc, #124]	; (80029b4 <HAL_PCD_EP_Close+0x404>)
 8002936:	430b      	orrs	r3, r1
 8002938:	b29b      	uxth	r3, r3
 800293a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	461a      	mov	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	881b      	ldrh	r3, [r3, #0]
 800294c:	b29b      	uxth	r3, r3
 800294e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002952:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002956:	b29c      	uxth	r4, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	441a      	add	r2, r3
 8002966:	4b15      	ldr	r3, [pc, #84]	; (80029bc <HAL_PCD_EP_Close+0x40c>)
 8002968:	4323      	orrs	r3, r4
 800296a:	b29b      	uxth	r3, r3
 800296c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	461a      	mov	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	4413      	add	r3, r2
 800297c:	881b      	ldrh	r3, [r3, #0]
 800297e:	b29b      	uxth	r3, r3
 8002980:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002988:	b29c      	uxth	r4, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	461a      	mov	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	441a      	add	r2, r3
 8002998:	4b08      	ldr	r3, [pc, #32]	; (80029bc <HAL_PCD_EP_Close+0x40c>)
 800299a:	4323      	orrs	r3, r4
 800299c:	b29b      	uxth	r3, r3
 800299e:	8013      	strh	r3, [r2, #0]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc90      	pop	{r4, r7}
 80029b2:	4770      	bx	lr
 80029b4:	ffffc080 	.word	0xffffc080
 80029b8:	ffff80c0 	.word	0xffff80c0
 80029bc:	ffff8080 	.word	0xffff8080

080029c0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer   
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029c0:	b490      	push	{r4, r7}
 80029c2:	b088      	sub	sp, #32
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	607a      	str	r2, [r7, #4]
 80029ca:	603b      	str	r3, [r7, #0]
 80029cc:	460b      	mov	r3, r1
 80029ce:	72fb      	strb	r3, [r7, #11]
  
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80029d0:	7afb      	ldrb	r3, [r7, #11]
 80029d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80029d6:	4613      	mov	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	1a9b      	subs	r3, r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	4413      	add	r3, r2
 80029e6:	3304      	adds	r3, #4
 80029e8:	61bb      	str	r3, [r7, #24]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	2200      	movs	r2, #0
 80029fa:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	2200      	movs	r2, #0
 8002a00:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8002a02:	7afb      	ldrb	r3, [r7, #11]
 8002a04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	701a      	strb	r2, [r3, #0]

  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	695a      	ldr	r2, [r3, #20]
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d909      	bls.n	8002a2e <HAL_PCD_EP_Receive+0x6e>
  {
    len=ep->maxpacket;
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	603b      	str	r3, [r7, #0]
    ep->xfer_len-=len; 
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	695a      	ldr	r2, [r3, #20]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	1ad2      	subs	r2, r2, r3
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	615a      	str	r2, [r3, #20]
 8002a2c:	e005      	b.n	8002a3a <HAL_PCD_EP_Receive+0x7a>
  }
  else
  {
    len=ep->xfer_len;
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	603b      	str	r3, [r7, #0]
    ep->xfer_len =0U;
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	2200      	movs	r2, #0
 8002a38:	615a      	str	r2, [r3, #20]
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0U) 
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	7a9b      	ldrb	r3, [r3, #10]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d13a      	bne.n	8002ab8 <HAL_PCD_EP_Receive+0xf8>
  {
    /*Set RX buffer count*/
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	4413      	add	r3, r2
 8002a56:	461a      	mov	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	2b3e      	cmp	r3, #62	; 0x3e
 8002a68:	d915      	bls.n	8002a96 <HAL_PCD_EP_Receive+0xd6>
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	095b      	lsrs	r3, r3, #5
 8002a6e:	83fb      	strh	r3, [r7, #30]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	f003 031f 	and.w	r3, r3, #31
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d102      	bne.n	8002a80 <HAL_PCD_EP_Receive+0xc0>
 8002a7a:	8bfb      	ldrh	r3, [r7, #30]
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	83fb      	strh	r3, [r7, #30]
 8002a80:	8bfb      	ldrh	r3, [r7, #30]
 8002a82:	029b      	lsls	r3, r3, #10
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	801a      	strh	r2, [r3, #0]
 8002a94:	e066      	b.n	8002b64 <HAL_PCD_EP_Receive+0x1a4>
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	085b      	lsrs	r3, r3, #1
 8002a9a:	83fb      	strh	r3, [r7, #30]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d002      	beq.n	8002aac <HAL_PCD_EP_Receive+0xec>
 8002aa6:	8bfb      	ldrh	r3, [r7, #30]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	83fb      	strh	r3, [r7, #30]
 8002aac:	8bfb      	ldrh	r3, [r7, #30]
 8002aae:	029b      	lsls	r3, r3, #10
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	801a      	strh	r2, [r3, #0]
 8002ab6:	e055      	b.n	8002b64 <HAL_PCD_EP_Receive+0x1a4>
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	785b      	ldrb	r3, [r3, #1]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d13a      	bne.n	8002b36 <HAL_PCD_EP_Receive+0x176>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	461a      	mov	r2, r3
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	4413      	add	r3, r2
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4413      	add	r3, r2
 8002adc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	2b3e      	cmp	r3, #62	; 0x3e
 8002ae6:	d915      	bls.n	8002b14 <HAL_PCD_EP_Receive+0x154>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	095b      	lsrs	r3, r3, #5
 8002aec:	83bb      	strh	r3, [r7, #28]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	f003 031f 	and.w	r3, r3, #31
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d102      	bne.n	8002afe <HAL_PCD_EP_Receive+0x13e>
 8002af8:	8bbb      	ldrh	r3, [r7, #28]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	83bb      	strh	r3, [r7, #28]
 8002afe:	8bbb      	ldrh	r3, [r7, #28]
 8002b00:	029b      	lsls	r3, r3, #10
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	801a      	strh	r2, [r3, #0]
 8002b12:	e027      	b.n	8002b64 <HAL_PCD_EP_Receive+0x1a4>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	085b      	lsrs	r3, r3, #1
 8002b18:	83bb      	strh	r3, [r7, #28]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d002      	beq.n	8002b2a <HAL_PCD_EP_Receive+0x16a>
 8002b24:	8bbb      	ldrh	r3, [r7, #28]
 8002b26:	3301      	adds	r3, #1
 8002b28:	83bb      	strh	r3, [r7, #28]
 8002b2a:	8bbb      	ldrh	r3, [r7, #28]
 8002b2c:	029b      	lsls	r3, r3, #10
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	801a      	strh	r2, [r3, #0]
 8002b34:	e016      	b.n	8002b64 <HAL_PCD_EP_Receive+0x1a4>
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	785b      	ldrb	r3, [r3, #1]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d112      	bne.n	8002b64 <HAL_PCD_EP_Receive+0x1a4>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	461a      	mov	r2, r3
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	4413      	add	r3, r2
 8002b52:	461a      	mov	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4413      	add	r3, r2
 8002b5a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	b292      	uxth	r2, r2
 8002b62:	801a      	strh	r2, [r3, #0]
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b7e:	b29c      	uxth	r4, r3
 8002b80:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002b84:	b29c      	uxth	r4, r3
 8002b86:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002b8a:	b29c      	uxth	r4, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	461a      	mov	r2, r3
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	441a      	add	r2, r3
 8002b9a:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <HAL_PCD_EP_Receive+0x1f0>)
 8002b9c:	4323      	orrs	r3, r4
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3720      	adds	r7, #32
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bc90      	pop	{r4, r7}
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	ffff8080 	.word	0xffff8080

08002bb4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 8002bc0:	78fb      	ldrb	r3, [r7, #3]
 8002bc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	b29b      	uxth	r3, r3
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
	...

08002be8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer   
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002be8:	b590      	push	{r4, r7, lr}
 8002bea:	b087      	sub	sp, #28
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	607a      	str	r2, [r7, #4]
 8002bf2:	603b      	str	r3, [r7, #0]
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;
  uint16_t pmabuffer = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	82fb      	strh	r3, [r7, #22]
    
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002bfc:	7afb      	ldrb	r3, [r7, #11]
 8002bfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c02:	4613      	mov	r3, r2
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	1a9b      	subs	r3, r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	3328      	adds	r3, #40	; 0x28
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	4413      	add	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	2200      	movs	r2, #0
 8002c22:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	2201      	movs	r2, #1
 8002c28:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8002c2a:	7afb      	ldrb	r3, [r7, #11]
 8002c2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	701a      	strb	r2, [r3, #0]

  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	695a      	ldr	r2, [r3, #20]
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d909      	bls.n	8002c56 <HAL_PCD_EP_Transmit+0x6e>
  {
    len=ep->maxpacket;
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	603b      	str	r3, [r7, #0]
    ep->xfer_len-=len; 
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	695a      	ldr	r2, [r3, #20]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	1ad2      	subs	r2, r2, r3
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	615a      	str	r2, [r3, #20]
 8002c54:	e005      	b.n	8002c62 <HAL_PCD_EP_Transmit+0x7a>
  }
  else
  {  
    len=ep->xfer_len;
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	603b      	str	r3, [r7, #0]
    ep->xfer_len =0U;
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	615a      	str	r2, [r3, #20]
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0U) 
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	7a9b      	ldrb	r3, [r3, #10]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d11d      	bne.n	8002ca6 <HAL_PCD_EP_Transmit+0xbe>
  {
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6818      	ldr	r0, [r3, #0]
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	6919      	ldr	r1, [r3, #16]
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	889a      	ldrh	r2, [r3, #4]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	f000 fa5b 	bl	8003134 <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	461a      	mov	r2, r3
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	4413      	add	r3, r2
 8002c92:	461a      	mov	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4413      	add	r3, r2
 8002c9a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	b292      	uxth	r2, r2
 8002ca2:	801a      	strh	r2, [r3, #0]
 8002ca4:	e055      	b.n	8002d52 <HAL_PCD_EP_Transmit+0x16a>
  }
  else
  {
    /*Write the data to the USB endpoint*/
    if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	461a      	mov	r2, r3
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	881b      	ldrh	r3, [r3, #0]
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cbc:	2b40      	cmp	r3, #64	; 0x40
 8002cbe:	d103      	bne.n	8002cc8 <HAL_PCD_EP_Transmit+0xe0>
    {
      pmabuffer = ep->pmaaddr1;
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	891b      	ldrh	r3, [r3, #8]
 8002cc4:	82fb      	strh	r3, [r7, #22]
 8002cc6:	e002      	b.n	8002cce <HAL_PCD_EP_Transmit+0xe6>
    }
    else
    {
      pmabuffer = ep->pmaaddr0;
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	88db      	ldrh	r3, [r3, #6]
 8002ccc:	82fb      	strh	r3, [r7, #22]
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6818      	ldr	r0, [r3, #0]
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	6919      	ldr	r1, [r3, #16]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	8afa      	ldrh	r2, [r7, #22]
 8002cdc:	f000 fa2a 	bl	8003134 <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in)
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	785b      	ldrb	r3, [r3, #1]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d118      	bne.n	8002d1a <HAL_PCD_EP_Transmit+0x132>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	461a      	mov	r2, r3
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	441a      	add	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	440b      	add	r3, r1
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	b299      	uxth	r1, r3
 8002d08:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002d0c:	400b      	ands	r3, r1
 8002d0e:	b299      	uxth	r1, r3
 8002d10:	4b22      	ldr	r3, [pc, #136]	; (8002d9c <HAL_PCD_EP_Transmit+0x1b4>)
 8002d12:	430b      	orrs	r3, r1
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	8013      	strh	r3, [r2, #0]
 8002d18:	e01b      	b.n	8002d52 <HAL_PCD_EP_Transmit+0x16a>
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	785b      	ldrb	r3, [r3, #1]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d117      	bne.n	8002d52 <HAL_PCD_EP_Transmit+0x16a>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	441a      	add	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4619      	mov	r1, r3
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	881b      	ldrh	r3, [r3, #0]
 8002d40:	b299      	uxth	r1, r3
 8002d42:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002d46:	400b      	ands	r3, r1
 8002d48:	b299      	uxth	r1, r3
 8002d4a:	4b15      	ldr	r3, [pc, #84]	; (8002da0 <HAL_PCD_EP_Transmit+0x1b8>)
 8002d4c:	430b      	orrs	r3, r1
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	8013      	strh	r3, [r2, #0]
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	461a      	mov	r2, r3
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d6c:	b29c      	uxth	r4, r3
 8002d6e:	f084 0310 	eor.w	r3, r4, #16
 8002d72:	b29c      	uxth	r4, r3
 8002d74:	f084 0320 	eor.w	r3, r4, #32
 8002d78:	b29c      	uxth	r4, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	441a      	add	r2, r3
 8002d88:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <HAL_PCD_EP_Transmit+0x1bc>)
 8002d8a:	4323      	orrs	r3, r4
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	371c      	adds	r7, #28
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd90      	pop	{r4, r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	ffff80c0 	.word	0xffff80c0
 8002da0:	ffffc080 	.word	0xffffc080
 8002da4:	ffff8080 	.word	0xffff8080

08002da8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002da8:	b490      	push	{r4, r7}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	460b      	mov	r3, r1
 8002db2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d101      	bne.n	8002dc2 <HAL_PCD_EP_SetStall+0x1a>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	e092      	b.n	8002ee8 <HAL_PCD_EP_SetStall+0x140>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
   
  if ((0x80U & ep_addr) == 0x80U)
 8002dca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	da0b      	bge.n	8002dea <HAL_PCD_EP_SetStall+0x42>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002dd2:	78fb      	ldrb	r3, [r7, #3]
 8002dd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002dd8:	4613      	mov	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	1a9b      	subs	r3, r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	3328      	adds	r3, #40	; 0x28
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	4413      	add	r3, r2
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	e00a      	b.n	8002e00 <HAL_PCD_EP_SetStall+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002dea:	78fa      	ldrb	r2, [r7, #3]
 8002dec:	4613      	mov	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	1a9b      	subs	r3, r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1U;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2201      	movs	r2, #1
 8002e04:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8002e06:	78fb      	ldrb	r3, [r7, #3]
 8002e08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8002e12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	09db      	lsrs	r3, r3, #7
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	705a      	strb	r2, [r3, #1]
  
  if (ep->num == 0U)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d11c      	bne.n	8002e64 <HAL_PCD_EP_SetStall+0xbc>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL) 
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 8002e40:	401c      	ands	r4, r3
 8002e42:	f484 5480 	eor.w	r4, r4, #4096	; 0x1000
 8002e46:	f084 0410 	eor.w	r4, r4, #16
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	441a      	add	r2, r3
 8002e58:	b2a1      	uxth	r1, r4
 8002e5a:	4b26      	ldr	r3, [pc, #152]	; (8002ef4 <HAL_PCD_EP_SetStall+0x14c>)
 8002e5c:	430b      	orrs	r3, r1
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	8013      	strh	r3, [r2, #0]
 8002e62:	e03c      	b.n	8002ede <HAL_PCD_EP_SetStall+0x136>
  }
  else
  {
    if (ep->is_in)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	785b      	ldrb	r3, [r3, #1]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d01c      	beq.n	8002ea6 <HAL_PCD_EP_SetStall+0xfe>
    {
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL) 
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	461a      	mov	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	881b      	ldrh	r3, [r3, #0]
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e86:	b29c      	uxth	r4, r3
 8002e88:	f084 0310 	eor.w	r3, r4, #16
 8002e8c:	b29c      	uxth	r4, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	461a      	mov	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	441a      	add	r2, r3
 8002e9c:	4b15      	ldr	r3, [pc, #84]	; (8002ef4 <HAL_PCD_EP_SetStall+0x14c>)
 8002e9e:	4323      	orrs	r3, r4
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	8013      	strh	r3, [r2, #0]
 8002ea4:	e01b      	b.n	8002ede <HAL_PCD_EP_SetStall+0x136>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4413      	add	r3, r2
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec0:	b29c      	uxth	r4, r3
 8002ec2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002ec6:	b29c      	uxth	r4, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	441a      	add	r2, r3
 8002ed6:	4b07      	ldr	r3, [pc, #28]	; (8002ef4 <HAL_PCD_EP_SetStall+0x14c>)
 8002ed8:	4323      	orrs	r3, r4
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	8013      	strh	r3, [r2, #0]
    }
  }
  __HAL_UNLOCK(hpcd); 
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  
  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bc90      	pop	{r4, r7}
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	ffff8080 	.word	0xffff8080

08002ef8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ef8:	b490      	push	{r4, r7}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;
  
  if ((0x80U & ep_addr) == 0x80U)
 8002f04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	da0b      	bge.n	8002f24 <HAL_PCD_EP_ClrStall+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002f0c:	78fb      	ldrb	r3, [r7, #3]
 8002f0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f12:	4613      	mov	r3, r2
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	1a9b      	subs	r3, r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	3328      	adds	r3, #40	; 0x28
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	4413      	add	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	e00a      	b.n	8002f3a <HAL_PCD_EP_ClrStall+0x42>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f24:	78fa      	ldrb	r2, [r7, #3]
 8002f26:	4613      	mov	r3, r2
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	1a9b      	subs	r3, r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	4413      	add	r3, r2
 8002f36:	3304      	adds	r3, #4
 8002f38:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8002f40:	78fb      	ldrb	r3, [r7, #3]
 8002f42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8002f4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	09db      	lsrs	r3, r3, #7
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	461a      	mov	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d101      	bne.n	8002f6a <HAL_PCD_EP_ClrStall+0x72>
 8002f66:	2302      	movs	r3, #2
 8002f68:	e095      	b.n	8003096 <HAL_PCD_EP_ClrStall+0x19e>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  
  if (ep->is_in)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	785b      	ldrb	r3, [r3, #1]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d044      	beq.n	8003004 <HAL_PCD_EP_ClrStall+0x10c>
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4413      	add	r3, r2
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d017      	beq.n	8002fc4 <HAL_PCD_EP_ClrStall+0xcc>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	441a      	add	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	440b      	add	r3, r1
 8002fb0:	881b      	ldrh	r3, [r3, #0]
 8002fb2:	b299      	uxth	r1, r3
 8002fb4:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002fb8:	400b      	ands	r3, r1
 8002fba:	b299      	uxth	r1, r3
 8002fbc:	4b38      	ldr	r3, [pc, #224]	; (80030a0 <HAL_PCD_EP_ClrStall+0x1a8>)
 8002fbe:	430b      	orrs	r3, r1
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fde:	b29c      	uxth	r4, r3
 8002fe0:	f084 0310 	eor.w	r3, r4, #16
 8002fe4:	b29c      	uxth	r4, r3
 8002fe6:	f084 0320 	eor.w	r3, r4, #32
 8002fea:	b29c      	uxth	r4, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	441a      	add	r2, r3
 8002ffa:	4b2a      	ldr	r3, [pc, #168]	; (80030a4 <HAL_PCD_EP_ClrStall+0x1ac>)
 8002ffc:	4323      	orrs	r3, r4
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	8013      	strh	r3, [r2, #0]
 8003002:	e043      	b.n	800308c <HAL_PCD_EP_ClrStall+0x194>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	461a      	mov	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	b29b      	uxth	r3, r3
 8003016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d017      	beq.n	800304e <HAL_PCD_EP_ClrStall+0x156>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	461a      	mov	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	441a      	add	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4619      	mov	r1, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	881b      	ldrh	r3, [r3, #0]
 800303c:	b299      	uxth	r1, r3
 800303e:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003042:	400b      	ands	r3, r1
 8003044:	b299      	uxth	r1, r3
 8003046:	4b18      	ldr	r3, [pc, #96]	; (80030a8 <HAL_PCD_EP_ClrStall+0x1b0>)
 8003048:	430b      	orrs	r3, r1
 800304a:	b29b      	uxth	r3, r3
 800304c:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	461a      	mov	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4413      	add	r3, r2
 800305c:	881b      	ldrh	r3, [r3, #0]
 800305e:	b29b      	uxth	r3, r3
 8003060:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003068:	b29c      	uxth	r4, r3
 800306a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800306e:	b29c      	uxth	r4, r3
 8003070:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003074:	b29c      	uxth	r4, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	461a      	mov	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	441a      	add	r2, r3
 8003084:	4b07      	ldr	r3, [pc, #28]	; (80030a4 <HAL_PCD_EP_ClrStall+0x1ac>)
 8003086:	4323      	orrs	r3, r4
 8003088:	b29b      	uxth	r3, r3
 800308a:	8013      	strh	r3, [r2, #0]
  }
  __HAL_UNLOCK(hpcd); 
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
    
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bc90      	pop	{r4, r7}
 800309e:	4770      	bx	lr
 80030a0:	ffff80c0 	.word	0xffff80c0
 80030a4:	ffff8080 	.word	0xffff8080
 80030a8:	ffffc080 	.word	0xffffc080

080030ac <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                        uint16_t ep_addr,
                        uint16_t ep_kind,
                        uint32_t pmaadress)

{
 80030ac:	b480      	push	{r7}
 80030ae:	b087      	sub	sp, #28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	607b      	str	r3, [r7, #4]
 80030b6:	460b      	mov	r3, r1
 80030b8:	817b      	strh	r3, [r7, #10]
 80030ba:	4613      	mov	r3, r2
 80030bc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80030be:	897b      	ldrh	r3, [r7, #10]
 80030c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00b      	beq.n	80030e2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80030ca:	897b      	ldrh	r3, [r7, #10]
 80030cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030d0:	4613      	mov	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	1a9b      	subs	r3, r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	3328      	adds	r3, #40	; 0x28
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	4413      	add	r3, r2
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	e00a      	b.n	80030f8 <HAL_PCDEx_PMAConfig+0x4c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030e2:	897a      	ldrh	r2, [r7, #10]
 80030e4:	4613      	mov	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	1a9b      	subs	r3, r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	4413      	add	r3, r2
 80030f4:	3304      	adds	r3, #4
 80030f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80030f8:	893b      	ldrh	r3, [r7, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d107      	bne.n	800310e <HAL_PCDEx_PMAConfig+0x62>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	2200      	movs	r2, #0
 8003102:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	b29a      	uxth	r2, r3
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	809a      	strh	r2, [r3, #4]
 800310c:	e00b      	b.n	8003126 <HAL_PCDEx_PMAConfig+0x7a>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	2201      	movs	r2, #1
 8003112:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFFU;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	b29a      	uxth	r2, r3
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	0c1b      	lsrs	r3, r3, #16
 8003120:	b29a      	uxth	r2, r3
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	811a      	strh	r2, [r3, #8]
  }
  
  return HAL_OK; 
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	371c      	adds	r7, #28
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <PCD_WritePMA>:
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003134:	b480      	push	{r7}
 8003136:	b089      	sub	sp, #36	; 0x24
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	4611      	mov	r1, r2
 8003140:	461a      	mov	r2, r3
 8003142:	460b      	mov	r3, r1
 8003144:	80fb      	strh	r3, [r7, #6]
 8003146:	4613      	mov	r3, r2
 8003148:	80bb      	strh	r3, [r7, #4]
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 800314a:	88bb      	ldrh	r3, [r7, #4]
 800314c:	3301      	adds	r3, #1
 800314e:	085b      	lsrs	r3, r3, #1
 8003150:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint16_t temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));  
 8003152:	88fa      	ldrh	r2, [r7, #6]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4413      	add	r3, r2
 8003158:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800315c:	61bb      	str	r3, [r7, #24]
  for (i = n; i != 0U; i--)
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	61fb      	str	r3, [r7, #28]
 8003162:	e018      	b.n	8003196 <PCD_WritePMA+0x62>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	827b      	strh	r3, [r7, #18]
    pbUsrBuf++;
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	3301      	adds	r3, #1
 800316e:	60bb      	str	r3, [r7, #8]
    temp2 = temp1 | ((uint16_t)((uint16_t)  * pbUsrBuf << 8U)) ;
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	b29b      	uxth	r3, r3
 8003176:	021b      	lsls	r3, r3, #8
 8003178:	b29a      	uxth	r2, r3
 800317a:	8a7b      	ldrh	r3, [r7, #18]
 800317c:	4313      	orrs	r3, r2
 800317e:	823b      	strh	r3, [r7, #16]
    *pdwVal++ = temp2;
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	1c9a      	adds	r2, r3, #2
 8003184:	61ba      	str	r2, [r7, #24]
 8003186:	8a3a      	ldrh	r2, [r7, #16]
 8003188:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	3301      	adds	r3, #1
 800318e:	60bb      	str	r3, [r7, #8]
  for (i = n; i != 0U; i--)
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	3b01      	subs	r3, #1
 8003194:	61fb      	str	r3, [r7, #28]
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1e3      	bne.n	8003164 <PCD_WritePMA+0x30>
  }
}
 800319c:	bf00      	nop
 800319e:	3724      	adds	r7, #36	; 0x24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <PCD_ReadPMA>:
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b089      	sub	sp, #36	; 0x24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	4611      	mov	r1, r2
 80031b4:	461a      	mov	r2, r3
 80031b6:	460b      	mov	r3, r1
 80031b8:	80fb      	strh	r3, [r7, #6]
 80031ba:	4613      	mov	r3, r2
 80031bc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1U;
 80031be:	88bb      	ldrh	r3, [r7, #4]
 80031c0:	085b      	lsrs	r3, r3, #1
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint16_t *pdwVal;
  uint32_t temp;
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 80031c6:	88fa      	ldrh	r2, [r7, #6]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4413      	add	r3, r2
 80031cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031d0:	61bb      	str	r3, [r7, #24]

  for (i = n; i != 0U; i--)
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	61fb      	str	r3, [r7, #28]
 80031d6:	e014      	b.n	8003202 <PCD_ReadPMA+0x5a>
  {
    temp = *pdwVal++;
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	1c9a      	adds	r2, r3, #2
 80031dc:	61ba      	str	r2, [r7, #24]
 80031de:	881b      	ldrh	r3, [r3, #0]
 80031e0:	613b      	str	r3, [r7, #16]
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	60ba      	str	r2, [r7, #8]
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	701a      	strb	r2, [r3, #0]
    *pbUsrBuf++ = ((temp >> 8) & 0xFF);
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	60ba      	str	r2, [r7, #8]
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	0a12      	lsrs	r2, r2, #8
 80031f8:	b2d2      	uxtb	r2, r2
 80031fa:	701a      	strb	r2, [r3, #0]
  for (i = n; i != 0U; i--)
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	3b01      	subs	r3, #1
 8003200:	61fb      	str	r3, [r7, #28]
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1e7      	bne.n	80031d8 <PCD_ReadPMA+0x30>
  }

  if (wNBytes % 2)
 8003208:	88bb      	ldrh	r3, [r7, #4]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	b29b      	uxth	r3, r3
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00a      	beq.n	800322a <PCD_ReadPMA+0x82>
  {
    temp = *pdwVal++;
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	1c9a      	adds	r2, r3, #2
 8003218:	61ba      	str	r2, [r7, #24]
 800321a:	881b      	ldrh	r3, [r3, #0]
 800321c:	613b      	str	r3, [r7, #16]
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	1c5a      	adds	r2, r3, #1
 8003222:	60ba      	str	r2, [r7, #8]
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	701a      	strb	r2, [r3, #0]
  }
}
 800322a:	bf00      	nop
 800322c:	3724      	adds	r7, #36	; 0x24
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
	...

08003238 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800323e:	af00      	add	r7, sp, #0
 8003240:	1d3b      	adds	r3, r7, #4
 8003242:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0U;
 8003244:	2300      	movs	r3, #0
 8003246:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800324a:	1d3b      	adds	r3, r7, #4
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 816e 	beq.w	8003536 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800325a:	4bb5      	ldr	r3, [pc, #724]	; (8003530 <HAL_RCC_OscConfig+0x2f8>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f003 030c 	and.w	r3, r3, #12
 8003262:	2b04      	cmp	r3, #4
 8003264:	d00c      	beq.n	8003280 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003266:	4bb2      	ldr	r3, [pc, #712]	; (8003530 <HAL_RCC_OscConfig+0x2f8>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f003 030c 	and.w	r3, r3, #12
 800326e:	2b08      	cmp	r3, #8
 8003270:	d15a      	bne.n	8003328 <HAL_RCC_OscConfig+0xf0>
 8003272:	4baf      	ldr	r3, [pc, #700]	; (8003530 <HAL_RCC_OscConfig+0x2f8>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800327a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800327e:	d153      	bne.n	8003328 <HAL_RCC_OscConfig+0xf0>
 8003280:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003284:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003288:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800328c:	fa93 f3a3 	rbit	r3, r3
 8003290:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003294:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003298:	fab3 f383 	clz	r3, r3
 800329c:	b2db      	uxtb	r3, r3
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	f043 0301 	orr.w	r3, r3, #1
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d102      	bne.n	80032b2 <HAL_RCC_OscConfig+0x7a>
 80032ac:	4ba0      	ldr	r3, [pc, #640]	; (8003530 <HAL_RCC_OscConfig+0x2f8>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	e015      	b.n	80032de <HAL_RCC_OscConfig+0xa6>
 80032b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032b6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ba:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80032be:	fa93 f3a3 	rbit	r3, r3
 80032c2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80032c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032ca:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80032ce:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80032d2:	fa93 f3a3 	rbit	r3, r3
 80032d6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80032da:	4b95      	ldr	r3, [pc, #596]	; (8003530 <HAL_RCC_OscConfig+0x2f8>)
 80032dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032e2:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80032e6:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80032ea:	fa92 f2a2 	rbit	r2, r2
 80032ee:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 80032f2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80032f6:	fab2 f282 	clz	r2, r2
 80032fa:	b252      	sxtb	r2, r2
 80032fc:	f042 0220 	orr.w	r2, r2, #32
 8003300:	b252      	sxtb	r2, r2
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	f002 021f 	and.w	r2, r2, #31
 8003308:	2101      	movs	r1, #1
 800330a:	fa01 f202 	lsl.w	r2, r1, r2
 800330e:	4013      	ands	r3, r2
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 810f 	beq.w	8003534 <HAL_RCC_OscConfig+0x2fc>
 8003316:	1d3b      	adds	r3, r7, #4
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	f040 8109 	bne.w	8003534 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	f000 be6b 	b.w	8003ffe <HAL_RCC_OscConfig+0xdc6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003328:	1d3b      	adds	r3, r7, #4
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003332:	d106      	bne.n	8003342 <HAL_RCC_OscConfig+0x10a>
 8003334:	4a7e      	ldr	r2, [pc, #504]	; (8003530 <HAL_RCC_OscConfig+0x2f8>)
 8003336:	4b7e      	ldr	r3, [pc, #504]	; (8003530 <HAL_RCC_OscConfig+0x2f8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800333e:	6013      	str	r3, [r2, #0]
 8003340:	e030      	b.n	80033a4 <HAL_RCC_OscConfig+0x16c>
 8003342:	1d3b      	adds	r3, r7, #4
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10c      	bne.n	8003366 <HAL_RCC_OscConfig+0x12e>
 800334c:	4a78      	ldr	r2, [pc, #480]	; (8003530 <HAL_RCC_OscConfig+0x2f8>)
 800334e:	4b78      	ldr	r3, [pc, #480]	; (8003530 <HAL_RCC_OscConfig+0x2f8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003356:	6013      	str	r3, [r2, #0]
 8003358:	4a75      	ldr	r2, [pc, #468]	; (8003530 <HAL_RCC_OscConfig+0x2f8>)
 800335a:	4b75      	ldr	r3, [pc, #468]	; (8003530 <HAL_RCC_OscConfig+0x2f8>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003362:	6013      	str	r3, [r2, #0]
 8003364:	e01e      	b.n	80033a4 <HAL_RCC_OscConfig+0x16c>
 8003366:	1d3b      	adds	r3, r7, #4
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003370:	d10c      	bne.n	800338c <HAL_RCC_OscConfig+0x154>
 8003372:	4a6f      	ldr	r2, [pc, #444]	; (8003530 <HAL_RCC_OscConfig+0x2f8>)
 8003374:	4b6e      	ldr	r3, [pc, #440]	; (8003530 <HAL_RCC_OscConfig+0x2f8>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	4a6c      	ldr	r2, [pc, #432]	; (8003530 <HAL_RCC_OscConfig+0x2f8>)
 8003380:	4b6b      	ldr	r3, [pc, #428]	; (8003530 <HAL_RCC_OscConfig+0x2f8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	e00b      	b.n	80033a4 <HAL_RCC_OscConfig+0x16c>
 800338c:	4a68      	ldr	r2, [pc, #416]	; (8003530 <HAL_RCC_OscConfig+0x2f8>)
 800338e:	4b68      	ldr	r3, [pc, #416]	; (8003530 <HAL_RCC_OscConfig+0x2f8>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003396:	6013      	str	r3, [r2, #0]
 8003398:	4a65      	ldr	r2, [pc, #404]	; (8003530 <HAL_RCC_OscConfig+0x2f8>)
 800339a:	4b65      	ldr	r3, [pc, #404]	; (8003530 <HAL_RCC_OscConfig+0x2f8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033a2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033a4:	4962      	ldr	r1, [pc, #392]	; (8003530 <HAL_RCC_OscConfig+0x2f8>)
 80033a6:	4b62      	ldr	r3, [pc, #392]	; (8003530 <HAL_RCC_OscConfig+0x2f8>)
 80033a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033aa:	f023 020f 	bic.w	r2, r3, #15
 80033ae:	1d3b      	adds	r3, r7, #4
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033b8:	1d3b      	adds	r3, r7, #4
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d05a      	beq.n	8003478 <HAL_RCC_OscConfig+0x240>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c2:	f7fc ff5b 	bl	800027c <HAL_GetTick>
 80033c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ca:	e00a      	b.n	80033e2 <HAL_RCC_OscConfig+0x1aa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033cc:	f7fc ff56 	bl	800027c <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b64      	cmp	r3, #100	; 0x64
 80033da:	d902      	bls.n	80033e2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	f000 be0e 	b.w	8003ffe <HAL_RCC_OscConfig+0xdc6>
 80033e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033e6:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ea:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80033ee:	fa93 f3a3 	rbit	r3, r3
 80033f2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 80033f6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fa:	fab3 f383 	clz	r3, r3
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	095b      	lsrs	r3, r3, #5
 8003402:	b2db      	uxtb	r3, r3
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b01      	cmp	r3, #1
 800340c:	d102      	bne.n	8003414 <HAL_RCC_OscConfig+0x1dc>
 800340e:	4b48      	ldr	r3, [pc, #288]	; (8003530 <HAL_RCC_OscConfig+0x2f8>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	e015      	b.n	8003440 <HAL_RCC_OscConfig+0x208>
 8003414:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003418:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003420:	fa93 f3a3 	rbit	r3, r3
 8003424:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003428:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800342c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003430:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003434:	fa93 f3a3 	rbit	r3, r3
 8003438:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800343c:	4b3c      	ldr	r3, [pc, #240]	; (8003530 <HAL_RCC_OscConfig+0x2f8>)
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003444:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003448:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800344c:	fa92 f2a2 	rbit	r2, r2
 8003450:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8003454:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003458:	fab2 f282 	clz	r2, r2
 800345c:	b252      	sxtb	r2, r2
 800345e:	f042 0220 	orr.w	r2, r2, #32
 8003462:	b252      	sxtb	r2, r2
 8003464:	b2d2      	uxtb	r2, r2
 8003466:	f002 021f 	and.w	r2, r2, #31
 800346a:	2101      	movs	r1, #1
 800346c:	fa01 f202 	lsl.w	r2, r1, r2
 8003470:	4013      	ands	r3, r2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0aa      	beq.n	80033cc <HAL_RCC_OscConfig+0x194>
 8003476:	e05e      	b.n	8003536 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003478:	f7fc ff00 	bl	800027c <HAL_GetTick>
 800347c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003480:	e00a      	b.n	8003498 <HAL_RCC_OscConfig+0x260>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003482:	f7fc fefb 	bl	800027c <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b64      	cmp	r3, #100	; 0x64
 8003490:	d902      	bls.n	8003498 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	f000 bdb3 	b.w	8003ffe <HAL_RCC_OscConfig+0xdc6>
 8003498:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800349c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80034a4:	fa93 f3a3 	rbit	r3, r3
 80034a8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 80034ac:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034b0:	fab3 f383 	clz	r3, r3
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	095b      	lsrs	r3, r3, #5
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	f043 0301 	orr.w	r3, r3, #1
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d102      	bne.n	80034ca <HAL_RCC_OscConfig+0x292>
 80034c4:	4b1a      	ldr	r3, [pc, #104]	; (8003530 <HAL_RCC_OscConfig+0x2f8>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	e015      	b.n	80034f6 <HAL_RCC_OscConfig+0x2be>
 80034ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034ce:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80034d6:	fa93 f3a3 	rbit	r3, r3
 80034da:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80034de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034e2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80034e6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80034ea:	fa93 f3a3 	rbit	r3, r3
 80034ee:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80034f2:	4b0f      	ldr	r3, [pc, #60]	; (8003530 <HAL_RCC_OscConfig+0x2f8>)
 80034f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034fa:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80034fe:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003502:	fa92 f2a2 	rbit	r2, r2
 8003506:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 800350a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800350e:	fab2 f282 	clz	r2, r2
 8003512:	b252      	sxtb	r2, r2
 8003514:	f042 0220 	orr.w	r2, r2, #32
 8003518:	b252      	sxtb	r2, r2
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	f002 021f 	and.w	r2, r2, #31
 8003520:	2101      	movs	r1, #1
 8003522:	fa01 f202 	lsl.w	r2, r1, r2
 8003526:	4013      	ands	r3, r2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1aa      	bne.n	8003482 <HAL_RCC_OscConfig+0x24a>
 800352c:	e003      	b.n	8003536 <HAL_RCC_OscConfig+0x2fe>
 800352e:	bf00      	nop
 8003530:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003536:	1d3b      	adds	r3, r7, #4
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 8170 	beq.w	8003826 <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003546:	4bd0      	ldr	r3, [pc, #832]	; (8003888 <HAL_RCC_OscConfig+0x650>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f003 030c 	and.w	r3, r3, #12
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00b      	beq.n	800356a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003552:	4bcd      	ldr	r3, [pc, #820]	; (8003888 <HAL_RCC_OscConfig+0x650>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f003 030c 	and.w	r3, r3, #12
 800355a:	2b08      	cmp	r3, #8
 800355c:	d16d      	bne.n	800363a <HAL_RCC_OscConfig+0x402>
 800355e:	4bca      	ldr	r3, [pc, #808]	; (8003888 <HAL_RCC_OscConfig+0x650>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d167      	bne.n	800363a <HAL_RCC_OscConfig+0x402>
 800356a:	2302      	movs	r3, #2
 800356c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003570:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003574:	fa93 f3a3 	rbit	r3, r3
 8003578:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 800357c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003580:	fab3 f383 	clz	r3, r3
 8003584:	b2db      	uxtb	r3, r3
 8003586:	095b      	lsrs	r3, r3, #5
 8003588:	b2db      	uxtb	r3, r3
 800358a:	f043 0301 	orr.w	r3, r3, #1
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b01      	cmp	r3, #1
 8003592:	d102      	bne.n	800359a <HAL_RCC_OscConfig+0x362>
 8003594:	4bbc      	ldr	r3, [pc, #752]	; (8003888 <HAL_RCC_OscConfig+0x650>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	e013      	b.n	80035c2 <HAL_RCC_OscConfig+0x38a>
 800359a:	2302      	movs	r3, #2
 800359c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80035a4:	fa93 f3a3 	rbit	r3, r3
 80035a8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80035ac:	2302      	movs	r3, #2
 80035ae:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80035b2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80035b6:	fa93 f3a3 	rbit	r3, r3
 80035ba:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80035be:	4bb2      	ldr	r3, [pc, #712]	; (8003888 <HAL_RCC_OscConfig+0x650>)
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	2202      	movs	r2, #2
 80035c4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80035c8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80035cc:	fa92 f2a2 	rbit	r2, r2
 80035d0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 80035d4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80035d8:	fab2 f282 	clz	r2, r2
 80035dc:	b252      	sxtb	r2, r2
 80035de:	f042 0220 	orr.w	r2, r2, #32
 80035e2:	b252      	sxtb	r2, r2
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	f002 021f 	and.w	r2, r2, #31
 80035ea:	2101      	movs	r1, #1
 80035ec:	fa01 f202 	lsl.w	r2, r1, r2
 80035f0:	4013      	ands	r3, r2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d007      	beq.n	8003606 <HAL_RCC_OscConfig+0x3ce>
 80035f6:	1d3b      	adds	r3, r7, #4
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d002      	beq.n	8003606 <HAL_RCC_OscConfig+0x3ce>
      {
        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	f000 bcfc 	b.w	8003ffe <HAL_RCC_OscConfig+0xdc6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003606:	48a0      	ldr	r0, [pc, #640]	; (8003888 <HAL_RCC_OscConfig+0x650>)
 8003608:	4b9f      	ldr	r3, [pc, #636]	; (8003888 <HAL_RCC_OscConfig+0x650>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003610:	1d3b      	adds	r3, r7, #4
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6959      	ldr	r1, [r3, #20]
 8003616:	23f8      	movs	r3, #248	; 0xf8
 8003618:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8003620:	fa93 f3a3 	rbit	r3, r3
 8003624:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8003628:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800362c:	fab3 f383 	clz	r3, r3
 8003630:	fa01 f303 	lsl.w	r3, r1, r3
 8003634:	4313      	orrs	r3, r2
 8003636:	6003      	str	r3, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003638:	e0f5      	b.n	8003826 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800363a:	1d3b      	adds	r3, r7, #4
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 8085 	beq.w	8003750 <HAL_RCC_OscConfig+0x518>
 8003646:	2301      	movs	r3, #1
 8003648:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003650:	fa93 f3a3 	rbit	r3, r3
 8003654:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8003658:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800365c:	fab3 f383 	clz	r3, r3
 8003660:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003664:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	461a      	mov	r2, r3
 800366c:	2301      	movs	r3, #1
 800366e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003670:	f7fc fe04 	bl	800027c <HAL_GetTick>
 8003674:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003678:	e00a      	b.n	8003690 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800367a:	f7fc fdff 	bl	800027c <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d902      	bls.n	8003690 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	f000 bcb7 	b.w	8003ffe <HAL_RCC_OscConfig+0xdc6>
 8003690:	2302      	movs	r3, #2
 8003692:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003696:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800369a:	fa93 f3a3 	rbit	r3, r3
 800369e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 80036a2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a6:	fab3 f383 	clz	r3, r3
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	095b      	lsrs	r3, r3, #5
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d102      	bne.n	80036c0 <HAL_RCC_OscConfig+0x488>
 80036ba:	4b73      	ldr	r3, [pc, #460]	; (8003888 <HAL_RCC_OscConfig+0x650>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	e013      	b.n	80036e8 <HAL_RCC_OscConfig+0x4b0>
 80036c0:	2302      	movs	r3, #2
 80036c2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80036ca:	fa93 f3a3 	rbit	r3, r3
 80036ce:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80036d2:	2302      	movs	r3, #2
 80036d4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80036d8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80036dc:	fa93 f3a3 	rbit	r3, r3
 80036e0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80036e4:	4b68      	ldr	r3, [pc, #416]	; (8003888 <HAL_RCC_OscConfig+0x650>)
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	2202      	movs	r2, #2
 80036ea:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80036ee:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80036f2:	fa92 f2a2 	rbit	r2, r2
 80036f6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 80036fa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80036fe:	fab2 f282 	clz	r2, r2
 8003702:	b252      	sxtb	r2, r2
 8003704:	f042 0220 	orr.w	r2, r2, #32
 8003708:	b252      	sxtb	r2, r2
 800370a:	b2d2      	uxtb	r2, r2
 800370c:	f002 021f 	and.w	r2, r2, #31
 8003710:	2101      	movs	r1, #1
 8003712:	fa01 f202 	lsl.w	r2, r1, r2
 8003716:	4013      	ands	r3, r2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0ae      	beq.n	800367a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800371c:	485a      	ldr	r0, [pc, #360]	; (8003888 <HAL_RCC_OscConfig+0x650>)
 800371e:	4b5a      	ldr	r3, [pc, #360]	; (8003888 <HAL_RCC_OscConfig+0x650>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003726:	1d3b      	adds	r3, r7, #4
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6959      	ldr	r1, [r3, #20]
 800372c:	23f8      	movs	r3, #248	; 0xf8
 800372e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003732:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003736:	fa93 f3a3 	rbit	r3, r3
 800373a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 800373e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003742:	fab3 f383 	clz	r3, r3
 8003746:	fa01 f303 	lsl.w	r3, r1, r3
 800374a:	4313      	orrs	r3, r2
 800374c:	6003      	str	r3, [r0, #0]
 800374e:	e06a      	b.n	8003826 <HAL_RCC_OscConfig+0x5ee>
 8003750:	2301      	movs	r3, #1
 8003752:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003756:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800375a:	fa93 f3a3 	rbit	r3, r3
 800375e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8003762:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003766:	fab3 f383 	clz	r3, r3
 800376a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800376e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	461a      	mov	r2, r3
 8003776:	2300      	movs	r3, #0
 8003778:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377a:	f7fc fd7f 	bl	800027c <HAL_GetTick>
 800377e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003782:	e00a      	b.n	800379a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003784:	f7fc fd7a 	bl	800027c <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d902      	bls.n	800379a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	f000 bc32 	b.w	8003ffe <HAL_RCC_OscConfig+0xdc6>
 800379a:	2302      	movs	r3, #2
 800379c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80037a4:	fa93 f3a3 	rbit	r3, r3
 80037a8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 80037ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037b0:	fab3 f383 	clz	r3, r3
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	095b      	lsrs	r3, r3, #5
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	f043 0301 	orr.w	r3, r3, #1
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d102      	bne.n	80037ca <HAL_RCC_OscConfig+0x592>
 80037c4:	4b30      	ldr	r3, [pc, #192]	; (8003888 <HAL_RCC_OscConfig+0x650>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	e013      	b.n	80037f2 <HAL_RCC_OscConfig+0x5ba>
 80037ca:	2302      	movs	r3, #2
 80037cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80037d4:	fa93 f3a3 	rbit	r3, r3
 80037d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80037dc:	2302      	movs	r3, #2
 80037de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80037e2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80037e6:	fa93 f3a3 	rbit	r3, r3
 80037ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80037ee:	4b26      	ldr	r3, [pc, #152]	; (8003888 <HAL_RCC_OscConfig+0x650>)
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	2202      	movs	r2, #2
 80037f4:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80037f8:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80037fc:	fa92 f2a2 	rbit	r2, r2
 8003800:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8003804:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003808:	fab2 f282 	clz	r2, r2
 800380c:	b252      	sxtb	r2, r2
 800380e:	f042 0220 	orr.w	r2, r2, #32
 8003812:	b252      	sxtb	r2, r2
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	f002 021f 	and.w	r2, r2, #31
 800381a:	2101      	movs	r1, #1
 800381c:	fa01 f202 	lsl.w	r2, r1, r2
 8003820:	4013      	ands	r3, r2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1ae      	bne.n	8003784 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003826:	1d3b      	adds	r3, r7, #4
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0308 	and.w	r3, r3, #8
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 80d8 	beq.w	80039e6 <HAL_RCC_OscConfig+0x7ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003836:	1d3b      	adds	r3, r7, #4
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d067      	beq.n	8003910 <HAL_RCC_OscConfig+0x6d8>
 8003840:	2301      	movs	r3, #1
 8003842:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800384a:	fa93 f3a3 	rbit	r3, r3
 800384e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8003852:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003856:	fab3 f383 	clz	r3, r3
 800385a:	461a      	mov	r2, r3
 800385c:	4b0b      	ldr	r3, [pc, #44]	; (800388c <HAL_RCC_OscConfig+0x654>)
 800385e:	4413      	add	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	461a      	mov	r2, r3
 8003864:	2301      	movs	r3, #1
 8003866:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003868:	f7fc fd08 	bl	800027c <HAL_GetTick>
 800386c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003870:	e00e      	b.n	8003890 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003872:	f7fc fd03 	bl	800027c <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d906      	bls.n	8003890 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e3bb      	b.n	8003ffe <HAL_RCC_OscConfig+0xdc6>
 8003886:	bf00      	nop
 8003888:	40021000 	.word	0x40021000
 800388c:	10908120 	.word	0x10908120
 8003890:	2302      	movs	r3, #2
 8003892:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003896:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800389a:	fa93 f3a3 	rbit	r3, r3
 800389e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80038a2:	2302      	movs	r3, #2
 80038a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80038a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038ac:	fa93 f2a3 	rbit	r2, r3
 80038b0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80038ba:	2202      	movs	r2, #2
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	fa93 f2a3 	rbit	r2, r3
 80038c8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80038cc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ce:	4ba5      	ldr	r3, [pc, #660]	; (8003b64 <HAL_RCC_OscConfig+0x92c>)
 80038d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038d2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80038d6:	2102      	movs	r1, #2
 80038d8:	6019      	str	r1, [r3, #0]
 80038da:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	fa93 f1a3 	rbit	r1, r3
 80038e4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80038e8:	6019      	str	r1, [r3, #0]
  return(result);
 80038ea:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	fab3 f383 	clz	r3, r3
 80038f4:	b25b      	sxtb	r3, r3
 80038f6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80038fa:	b25b      	sxtb	r3, r3
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	f003 031f 	and.w	r3, r3, #31
 8003902:	2101      	movs	r1, #1
 8003904:	fa01 f303 	lsl.w	r3, r1, r3
 8003908:	4013      	ands	r3, r2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d0b1      	beq.n	8003872 <HAL_RCC_OscConfig+0x63a>
 800390e:	e06a      	b.n	80039e6 <HAL_RCC_OscConfig+0x7ae>
 8003910:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003914:	2201      	movs	r2, #1
 8003916:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003918:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	fa93 f2a3 	rbit	r2, r3
 8003922:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003926:	601a      	str	r2, [r3, #0]
  return(result);
 8003928:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800392c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800392e:	fab3 f383 	clz	r3, r3
 8003932:	461a      	mov	r2, r3
 8003934:	4b8c      	ldr	r3, [pc, #560]	; (8003b68 <HAL_RCC_OscConfig+0x930>)
 8003936:	4413      	add	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	461a      	mov	r2, r3
 800393c:	2300      	movs	r3, #0
 800393e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003940:	f7fc fc9c 	bl	800027c <HAL_GetTick>
 8003944:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003948:	e009      	b.n	800395e <HAL_RCC_OscConfig+0x726>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800394a:	f7fc fc97 	bl	800027c <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x726>
        {
          return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e34f      	b.n	8003ffe <HAL_RCC_OscConfig+0xdc6>
 800395e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003962:	2202      	movs	r2, #2
 8003964:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003966:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	fa93 f2a3 	rbit	r2, r3
 8003970:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800397a:	2202      	movs	r2, #2
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	fa93 f2a3 	rbit	r2, r3
 8003988:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800398c:	601a      	str	r2, [r3, #0]
 800398e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003992:	2202      	movs	r2, #2
 8003994:	601a      	str	r2, [r3, #0]
 8003996:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	fa93 f2a3 	rbit	r2, r3
 80039a0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80039a4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039a6:	4b6f      	ldr	r3, [pc, #444]	; (8003b64 <HAL_RCC_OscConfig+0x92c>)
 80039a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039aa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80039ae:	2102      	movs	r1, #2
 80039b0:	6019      	str	r1, [r3, #0]
 80039b2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	fa93 f1a3 	rbit	r1, r3
 80039bc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80039c0:	6019      	str	r1, [r3, #0]
  return(result);
 80039c2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	fab3 f383 	clz	r3, r3
 80039cc:	b25b      	sxtb	r3, r3
 80039ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80039d2:	b25b      	sxtb	r3, r3
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	f003 031f 	and.w	r3, r3, #31
 80039da:	2101      	movs	r1, #1
 80039dc:	fa01 f303 	lsl.w	r3, r1, r3
 80039e0:	4013      	ands	r3, r2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1b1      	bne.n	800394a <HAL_RCC_OscConfig+0x712>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039e6:	1d3b      	adds	r3, r7, #4
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 8159 	beq.w	8003ca8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039f6:	2300      	movs	r3, #0
 80039f8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039fc:	4b59      	ldr	r3, [pc, #356]	; (8003b64 <HAL_RCC_OscConfig+0x92c>)
 80039fe:	69db      	ldr	r3, [r3, #28]
 8003a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d112      	bne.n	8003a2e <HAL_RCC_OscConfig+0x7f6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a08:	4a56      	ldr	r2, [pc, #344]	; (8003b64 <HAL_RCC_OscConfig+0x92c>)
 8003a0a:	4b56      	ldr	r3, [pc, #344]	; (8003b64 <HAL_RCC_OscConfig+0x92c>)
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a12:	61d3      	str	r3, [r2, #28]
 8003a14:	4b53      	ldr	r3, [pc, #332]	; (8003b64 <HAL_RCC_OscConfig+0x92c>)
 8003a16:	69db      	ldr	r3, [r3, #28]
 8003a18:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003a1c:	f107 030c 	add.w	r3, r7, #12
 8003a20:	601a      	str	r2, [r3, #0]
 8003a22:	f107 030c 	add.w	r3, r7, #12
 8003a26:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2e:	4b4f      	ldr	r3, [pc, #316]	; (8003b6c <HAL_RCC_OscConfig+0x934>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d11a      	bne.n	8003a70 <HAL_RCC_OscConfig+0x838>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a3a:	4a4c      	ldr	r2, [pc, #304]	; (8003b6c <HAL_RCC_OscConfig+0x934>)
 8003a3c:	4b4b      	ldr	r3, [pc, #300]	; (8003b6c <HAL_RCC_OscConfig+0x934>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a44:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a46:	f7fc fc19 	bl	800027c <HAL_GetTick>
 8003a4a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a4e:	e009      	b.n	8003a64 <HAL_RCC_OscConfig+0x82c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a50:	f7fc fc14 	bl	800027c <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b64      	cmp	r3, #100	; 0x64
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x82c>
        {
          return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e2cc      	b.n	8003ffe <HAL_RCC_OscConfig+0xdc6>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a64:	4b41      	ldr	r3, [pc, #260]	; (8003b6c <HAL_RCC_OscConfig+0x934>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d0ef      	beq.n	8003a50 <HAL_RCC_OscConfig+0x818>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a70:	1d3b      	adds	r3, r7, #4
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d106      	bne.n	8003a88 <HAL_RCC_OscConfig+0x850>
 8003a7a:	4a3a      	ldr	r2, [pc, #232]	; (8003b64 <HAL_RCC_OscConfig+0x92c>)
 8003a7c:	4b39      	ldr	r3, [pc, #228]	; (8003b64 <HAL_RCC_OscConfig+0x92c>)
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	f043 0301 	orr.w	r3, r3, #1
 8003a84:	6213      	str	r3, [r2, #32]
 8003a86:	e02f      	b.n	8003ae8 <HAL_RCC_OscConfig+0x8b0>
 8003a88:	1d3b      	adds	r3, r7, #4
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10c      	bne.n	8003aac <HAL_RCC_OscConfig+0x874>
 8003a92:	4a34      	ldr	r2, [pc, #208]	; (8003b64 <HAL_RCC_OscConfig+0x92c>)
 8003a94:	4b33      	ldr	r3, [pc, #204]	; (8003b64 <HAL_RCC_OscConfig+0x92c>)
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	f023 0301 	bic.w	r3, r3, #1
 8003a9c:	6213      	str	r3, [r2, #32]
 8003a9e:	4a31      	ldr	r2, [pc, #196]	; (8003b64 <HAL_RCC_OscConfig+0x92c>)
 8003aa0:	4b30      	ldr	r3, [pc, #192]	; (8003b64 <HAL_RCC_OscConfig+0x92c>)
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	f023 0304 	bic.w	r3, r3, #4
 8003aa8:	6213      	str	r3, [r2, #32]
 8003aaa:	e01d      	b.n	8003ae8 <HAL_RCC_OscConfig+0x8b0>
 8003aac:	1d3b      	adds	r3, r7, #4
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	2b05      	cmp	r3, #5
 8003ab4:	d10c      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x898>
 8003ab6:	4a2b      	ldr	r2, [pc, #172]	; (8003b64 <HAL_RCC_OscConfig+0x92c>)
 8003ab8:	4b2a      	ldr	r3, [pc, #168]	; (8003b64 <HAL_RCC_OscConfig+0x92c>)
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	f043 0304 	orr.w	r3, r3, #4
 8003ac0:	6213      	str	r3, [r2, #32]
 8003ac2:	4a28      	ldr	r2, [pc, #160]	; (8003b64 <HAL_RCC_OscConfig+0x92c>)
 8003ac4:	4b27      	ldr	r3, [pc, #156]	; (8003b64 <HAL_RCC_OscConfig+0x92c>)
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	f043 0301 	orr.w	r3, r3, #1
 8003acc:	6213      	str	r3, [r2, #32]
 8003ace:	e00b      	b.n	8003ae8 <HAL_RCC_OscConfig+0x8b0>
 8003ad0:	4a24      	ldr	r2, [pc, #144]	; (8003b64 <HAL_RCC_OscConfig+0x92c>)
 8003ad2:	4b24      	ldr	r3, [pc, #144]	; (8003b64 <HAL_RCC_OscConfig+0x92c>)
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	f023 0301 	bic.w	r3, r3, #1
 8003ada:	6213      	str	r3, [r2, #32]
 8003adc:	4a21      	ldr	r2, [pc, #132]	; (8003b64 <HAL_RCC_OscConfig+0x92c>)
 8003ade:	4b21      	ldr	r3, [pc, #132]	; (8003b64 <HAL_RCC_OscConfig+0x92c>)
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	f023 0304 	bic.w	r3, r3, #4
 8003ae6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ae8:	1d3b      	adds	r3, r7, #4
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d06b      	beq.n	8003bca <HAL_RCC_OscConfig+0x992>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af2:	f7fc fbc3 	bl	800027c <HAL_GetTick>
 8003af6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003afa:	e00b      	b.n	8003b14 <HAL_RCC_OscConfig+0x8dc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003afc:	f7fc fbbe 	bl	800027c <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_OscConfig+0x8dc>
        {
          return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e274      	b.n	8003ffe <HAL_RCC_OscConfig+0xdc6>
 8003b14:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003b18:	2202      	movs	r2, #2
 8003b1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	fa93 f2a3 	rbit	r2, r3
 8003b26:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003b30:	2202      	movs	r2, #2
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	fa93 f2a3 	rbit	r2, r3
 8003b3e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003b42:	601a      	str	r2, [r3, #0]
  return(result);
 8003b44:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003b48:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b4a:	fab3 f383 	clz	r3, r3
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	095b      	lsrs	r3, r3, #5
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	f043 0302 	orr.w	r3, r3, #2
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d108      	bne.n	8003b70 <HAL_RCC_OscConfig+0x938>
 8003b5e:	4b01      	ldr	r3, [pc, #4]	; (8003b64 <HAL_RCC_OscConfig+0x92c>)
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	e013      	b.n	8003b8c <HAL_RCC_OscConfig+0x954>
 8003b64:	40021000 	.word	0x40021000
 8003b68:	10908120 	.word	0x10908120
 8003b6c:	40007000 	.word	0x40007000
 8003b70:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003b74:	2202      	movs	r2, #2
 8003b76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b78:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	fa93 f2a3 	rbit	r2, r3
 8003b82:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	4bbb      	ldr	r3, [pc, #748]	; (8003e78 <HAL_RCC_OscConfig+0xc40>)
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003b90:	2102      	movs	r1, #2
 8003b92:	6011      	str	r1, [r2, #0]
 8003b94:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003b98:	6812      	ldr	r2, [r2, #0]
 8003b9a:	fa92 f1a2 	rbit	r1, r2
 8003b9e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003ba2:	6011      	str	r1, [r2, #0]
  return(result);
 8003ba4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003ba8:	6812      	ldr	r2, [r2, #0]
 8003baa:	fab2 f282 	clz	r2, r2
 8003bae:	b252      	sxtb	r2, r2
 8003bb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bb4:	b252      	sxtb	r2, r2
 8003bb6:	b2d2      	uxtb	r2, r2
 8003bb8:	f002 021f 	and.w	r2, r2, #31
 8003bbc:	2101      	movs	r1, #1
 8003bbe:	fa01 f202 	lsl.w	r2, r1, r2
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d099      	beq.n	8003afc <HAL_RCC_OscConfig+0x8c4>
 8003bc8:	e064      	b.n	8003c94 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bca:	f7fc fb57 	bl	800027c <HAL_GetTick>
 8003bce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bd2:	e00b      	b.n	8003bec <HAL_RCC_OscConfig+0x9b4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bd4:	f7fc fb52 	bl	800027c <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d901      	bls.n	8003bec <HAL_RCC_OscConfig+0x9b4>
        {
          return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e208      	b.n	8003ffe <HAL_RCC_OscConfig+0xdc6>
 8003bec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	fa93 f2a3 	rbit	r2, r3
 8003bfe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003c08:	2202      	movs	r2, #2
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	fa93 f2a3 	rbit	r2, r3
 8003c16:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003c1a:	601a      	str	r2, [r3, #0]
  return(result);
 8003c1c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003c20:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c22:	fab3 f383 	clz	r3, r3
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	095b      	lsrs	r3, r3, #5
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	f043 0302 	orr.w	r3, r3, #2
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d102      	bne.n	8003c3c <HAL_RCC_OscConfig+0xa04>
 8003c36:	4b90      	ldr	r3, [pc, #576]	; (8003e78 <HAL_RCC_OscConfig+0xc40>)
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	e00d      	b.n	8003c58 <HAL_RCC_OscConfig+0xa20>
 8003c3c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003c40:	2202      	movs	r2, #2
 8003c42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c44:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	fa93 f2a3 	rbit	r2, r3
 8003c4e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	4b88      	ldr	r3, [pc, #544]	; (8003e78 <HAL_RCC_OscConfig+0xc40>)
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003c5c:	2102      	movs	r1, #2
 8003c5e:	6011      	str	r1, [r2, #0]
 8003c60:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003c64:	6812      	ldr	r2, [r2, #0]
 8003c66:	fa92 f1a2 	rbit	r1, r2
 8003c6a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003c6e:	6011      	str	r1, [r2, #0]
  return(result);
 8003c70:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003c74:	6812      	ldr	r2, [r2, #0]
 8003c76:	fab2 f282 	clz	r2, r2
 8003c7a:	b252      	sxtb	r2, r2
 8003c7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c80:	b252      	sxtb	r2, r2
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	f002 021f 	and.w	r2, r2, #31
 8003c88:	2101      	movs	r1, #1
 8003c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c8e:	4013      	ands	r3, r2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d19f      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x99c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c94:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d105      	bne.n	8003ca8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c9c:	4a76      	ldr	r2, [pc, #472]	; (8003e78 <HAL_RCC_OscConfig+0xc40>)
 8003c9e:	4b76      	ldr	r3, [pc, #472]	; (8003e78 <HAL_RCC_OscConfig+0xc40>)
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ca6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ca8:	1d3b      	adds	r3, r7, #4
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 81a4 	beq.w	8003ffc <HAL_RCC_OscConfig+0xdc4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cb4:	4b70      	ldr	r3, [pc, #448]	; (8003e78 <HAL_RCC_OscConfig+0xc40>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f003 030c 	and.w	r3, r3, #12
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	f000 819b 	beq.w	8003ff8 <HAL_RCC_OscConfig+0xdc0>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cc2:	1d3b      	adds	r3, r7, #4
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	69db      	ldr	r3, [r3, #28]
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	f040 8113 	bne.w	8003ef4 <HAL_RCC_OscConfig+0xcbc>
 8003cce:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003cd2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003cd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	fa93 f2a3 	rbit	r2, r3
 8003ce2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003ce6:	601a      	str	r2, [r3, #0]
  return(result);
 8003ce8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003cec:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cee:	fab3 f383 	clz	r3, r3
 8003cf2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003cf6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	2300      	movs	r3, #0
 8003d00:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d02:	f7fc fabb 	bl	800027c <HAL_GetTick>
 8003d06:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d0a:	e009      	b.n	8003d20 <HAL_RCC_OscConfig+0xae8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d0c:	f7fc fab6 	bl	800027c <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_OscConfig+0xae8>
          {
            return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e16e      	b.n	8003ffe <HAL_RCC_OscConfig+0xdc6>
 8003d20:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003d24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	fa93 f2a3 	rbit	r2, r3
 8003d34:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003d38:	601a      	str	r2, [r3, #0]
  return(result);
 8003d3a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003d3e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d40:	fab3 f383 	clz	r3, r3
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	095b      	lsrs	r3, r3, #5
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	f043 0301 	orr.w	r3, r3, #1
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d102      	bne.n	8003d5a <HAL_RCC_OscConfig+0xb22>
 8003d54:	4b48      	ldr	r3, [pc, #288]	; (8003e78 <HAL_RCC_OscConfig+0xc40>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	e01b      	b.n	8003d92 <HAL_RCC_OscConfig+0xb5a>
 8003d5a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003d5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d64:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	fa93 f2a3 	rbit	r2, r3
 8003d6e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003d78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	fa93 f2a3 	rbit	r2, r3
 8003d88:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	4b3a      	ldr	r3, [pc, #232]	; (8003e78 <HAL_RCC_OscConfig+0xc40>)
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003d96:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003d9a:	6011      	str	r1, [r2, #0]
 8003d9c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003da0:	6812      	ldr	r2, [r2, #0]
 8003da2:	fa92 f1a2 	rbit	r1, r2
 8003da6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003daa:	6011      	str	r1, [r2, #0]
  return(result);
 8003dac:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003db0:	6812      	ldr	r2, [r2, #0]
 8003db2:	fab2 f282 	clz	r2, r2
 8003db6:	b252      	sxtb	r2, r2
 8003db8:	f042 0220 	orr.w	r2, r2, #32
 8003dbc:	b252      	sxtb	r2, r2
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	f002 021f 	and.w	r2, r2, #31
 8003dc4:	2101      	movs	r1, #1
 8003dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8003dca:	4013      	ands	r3, r2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d19d      	bne.n	8003d0c <HAL_RCC_OscConfig+0xad4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dd0:	4829      	ldr	r0, [pc, #164]	; (8003e78 <HAL_RCC_OscConfig+0xc40>)
 8003dd2:	4b29      	ldr	r3, [pc, #164]	; (8003e78 <HAL_RCC_OscConfig+0xc40>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003dda:	1d3b      	adds	r3, r7, #4
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003de0:	1d3b      	adds	r3, r7, #4
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	430b      	orrs	r3, r1
 8003de8:	4313      	orrs	r3, r2
 8003dea:	6043      	str	r3, [r0, #4]
 8003dec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003df0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003df4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	fa93 f2a3 	rbit	r2, r3
 8003e00:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e04:	601a      	str	r2, [r3, #0]
  return(result);
 8003e06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e0a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e0c:	fab3 f383 	clz	r3, r3
 8003e10:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e14:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e20:	f7fc fa2c 	bl	800027c <HAL_GetTick>
 8003e24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e28:	e009      	b.n	8003e3e <HAL_RCC_OscConfig+0xc06>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e2a:	f7fc fa27 	bl	800027c <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0xc06>
          {
            return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e0df      	b.n	8003ffe <HAL_RCC_OscConfig+0xdc6>
 8003e3e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e48:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	fa93 f2a3 	rbit	r2, r3
 8003e52:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003e56:	601a      	str	r2, [r3, #0]
  return(result);
 8003e58:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003e5c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e5e:	fab3 f383 	clz	r3, r3
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	095b      	lsrs	r3, r3, #5
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	f043 0301 	orr.w	r3, r3, #1
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d104      	bne.n	8003e7c <HAL_RCC_OscConfig+0xc44>
 8003e72:	4b01      	ldr	r3, [pc, #4]	; (8003e78 <HAL_RCC_OscConfig+0xc40>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	e01d      	b.n	8003eb4 <HAL_RCC_OscConfig+0xc7c>
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e86:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	fa93 f2a3 	rbit	r2, r3
 8003e90:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e94:	601a      	str	r2, [r3, #0]
 8003e96:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003e9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	fa93 f2a3 	rbit	r2, r3
 8003eaa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	4b55      	ldr	r3, [pc, #340]	; (8004008 <HAL_RCC_OscConfig+0xdd0>)
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003eb8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ebc:	6011      	str	r1, [r2, #0]
 8003ebe:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003ec2:	6812      	ldr	r2, [r2, #0]
 8003ec4:	fa92 f1a2 	rbit	r1, r2
 8003ec8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003ecc:	6011      	str	r1, [r2, #0]
  return(result);
 8003ece:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003ed2:	6812      	ldr	r2, [r2, #0]
 8003ed4:	fab2 f282 	clz	r2, r2
 8003ed8:	b252      	sxtb	r2, r2
 8003eda:	f042 0220 	orr.w	r2, r2, #32
 8003ede:	b252      	sxtb	r2, r2
 8003ee0:	b2d2      	uxtb	r2, r2
 8003ee2:	f002 021f 	and.w	r2, r2, #31
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8003eec:	4013      	ands	r3, r2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d09b      	beq.n	8003e2a <HAL_RCC_OscConfig+0xbf2>
 8003ef2:	e083      	b.n	8003ffc <HAL_RCC_OscConfig+0xdc4>
 8003ef4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003ef8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003efc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	fa93 f2a3 	rbit	r2, r3
 8003f08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f0c:	601a      	str	r2, [r3, #0]
  return(result);
 8003f0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f12:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f14:	fab3 f383 	clz	r3, r3
 8003f18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	461a      	mov	r2, r3
 8003f24:	2300      	movs	r3, #0
 8003f26:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f28:	f7fc f9a8 	bl	800027c <HAL_GetTick>
 8003f2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f30:	e009      	b.n	8003f46 <HAL_RCC_OscConfig+0xd0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f32:	f7fc f9a3 	bl	800027c <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0xd0e>
          {
            return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e05b      	b.n	8003ffe <HAL_RCC_OscConfig+0xdc6>
 8003f46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	fa93 f2a3 	rbit	r2, r3
 8003f5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f5e:	601a      	str	r2, [r3, #0]
  return(result);
 8003f60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f64:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f66:	fab3 f383 	clz	r3, r3
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	095b      	lsrs	r3, r3, #5
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	f043 0301 	orr.w	r3, r3, #1
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d102      	bne.n	8003f80 <HAL_RCC_OscConfig+0xd48>
 8003f7a:	4b23      	ldr	r3, [pc, #140]	; (8004008 <HAL_RCC_OscConfig+0xdd0>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	e01b      	b.n	8003fb8 <HAL_RCC_OscConfig+0xd80>
 8003f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	fa93 f2a3 	rbit	r2, r3
 8003f94:	f107 0320 	add.w	r3, r7, #32
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	f107 031c 	add.w	r3, r7, #28
 8003f9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	f107 031c 	add.w	r3, r7, #28
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	fa93 f2a3 	rbit	r2, r3
 8003fae:	f107 0318 	add.w	r3, r7, #24
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	4b14      	ldr	r3, [pc, #80]	; (8004008 <HAL_RCC_OscConfig+0xdd0>)
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	f107 0214 	add.w	r2, r7, #20
 8003fbc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003fc0:	6011      	str	r1, [r2, #0]
 8003fc2:	f107 0214 	add.w	r2, r7, #20
 8003fc6:	6812      	ldr	r2, [r2, #0]
 8003fc8:	fa92 f1a2 	rbit	r1, r2
 8003fcc:	f107 0210 	add.w	r2, r7, #16
 8003fd0:	6011      	str	r1, [r2, #0]
  return(result);
 8003fd2:	f107 0210 	add.w	r2, r7, #16
 8003fd6:	6812      	ldr	r2, [r2, #0]
 8003fd8:	fab2 f282 	clz	r2, r2
 8003fdc:	b252      	sxtb	r2, r2
 8003fde:	f042 0220 	orr.w	r2, r2, #32
 8003fe2:	b252      	sxtb	r2, r2
 8003fe4:	b2d2      	uxtb	r2, r2
 8003fe6:	f002 021f 	and.w	r2, r2, #31
 8003fea:	2101      	movs	r1, #1
 8003fec:	fa01 f202 	lsl.w	r2, r1, r2
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d19d      	bne.n	8003f32 <HAL_RCC_OscConfig+0xcfa>
 8003ff6:	e001      	b.n	8003ffc <HAL_RCC_OscConfig+0xdc4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e000      	b.n	8003ffe <HAL_RCC_OscConfig+0xdc6>
    }
  }
  
  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40021000 	.word	0x40021000

0800400c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b09e      	sub	sp, #120	; 0x78
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004016:	2300      	movs	r3, #0
 8004018:	677b      	str	r3, [r7, #116]	; 0x74
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800401a:	4ba7      	ldr	r3, [pc, #668]	; (80042b8 <HAL_RCC_ClockConfig+0x2ac>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0207 	and.w	r2, r3, #7
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	429a      	cmp	r2, r3
 8004026:	d210      	bcs.n	800404a <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004028:	49a3      	ldr	r1, [pc, #652]	; (80042b8 <HAL_RCC_ClockConfig+0x2ac>)
 800402a:	4ba3      	ldr	r3, [pc, #652]	; (80042b8 <HAL_RCC_ClockConfig+0x2ac>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f023 0207 	bic.w	r2, r3, #7
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	4313      	orrs	r3, r2
 8004036:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004038:	4b9f      	ldr	r3, [pc, #636]	; (80042b8 <HAL_RCC_ClockConfig+0x2ac>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0207 	and.w	r2, r3, #7
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	429a      	cmp	r2, r3
 8004044:	d001      	beq.n	800404a <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e175      	b.n	8004336 <HAL_RCC_ClockConfig+0x32a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d008      	beq.n	8004068 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004056:	4999      	ldr	r1, [pc, #612]	; (80042bc <HAL_RCC_ClockConfig+0x2b0>)
 8004058:	4b98      	ldr	r3, [pc, #608]	; (80042bc <HAL_RCC_ClockConfig+0x2b0>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	4313      	orrs	r3, r2
 8004066:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 8109 	beq.w	8004288 <HAL_RCC_ClockConfig+0x27c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d13d      	bne.n	80040fa <HAL_RCC_ClockConfig+0xee>
 800407e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004082:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004084:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004086:	fa93 f3a3 	rbit	r3, r3
 800408a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 800408c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800408e:	fab3 f383 	clz	r3, r3
 8004092:	b2db      	uxtb	r3, r3
 8004094:	095b      	lsrs	r3, r3, #5
 8004096:	b2db      	uxtb	r3, r3
 8004098:	f043 0301 	orr.w	r3, r3, #1
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d102      	bne.n	80040a8 <HAL_RCC_ClockConfig+0x9c>
 80040a2:	4b86      	ldr	r3, [pc, #536]	; (80042bc <HAL_RCC_ClockConfig+0x2b0>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	e00f      	b.n	80040c8 <HAL_RCC_ClockConfig+0xbc>
 80040a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040b0:	fa93 f3a3 	rbit	r3, r3
 80040b4:	667b      	str	r3, [r7, #100]	; 0x64
 80040b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040ba:	663b      	str	r3, [r7, #96]	; 0x60
 80040bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040be:	fa93 f3a3 	rbit	r3, r3
 80040c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040c4:	4b7d      	ldr	r3, [pc, #500]	; (80042bc <HAL_RCC_ClockConfig+0x2b0>)
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80040cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80040ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040d0:	fa92 f2a2 	rbit	r2, r2
 80040d4:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 80040d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80040d8:	fab2 f282 	clz	r2, r2
 80040dc:	b252      	sxtb	r2, r2
 80040de:	f042 0220 	orr.w	r2, r2, #32
 80040e2:	b252      	sxtb	r2, r2
 80040e4:	b2d2      	uxtb	r2, r2
 80040e6:	f002 021f 	and.w	r2, r2, #31
 80040ea:	2101      	movs	r1, #1
 80040ec:	fa01 f202 	lsl.w	r2, r1, r2
 80040f0:	4013      	ands	r3, r2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d17d      	bne.n	80041f2 <HAL_RCC_ClockConfig+0x1e6>
      {
        return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e11d      	b.n	8004336 <HAL_RCC_ClockConfig+0x32a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d13d      	bne.n	800417e <HAL_RCC_ClockConfig+0x172>
 8004102:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004106:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800410a:	fa93 f3a3 	rbit	r3, r3
 800410e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8004110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004112:	fab3 f383 	clz	r3, r3
 8004116:	b2db      	uxtb	r3, r3
 8004118:	095b      	lsrs	r3, r3, #5
 800411a:	b2db      	uxtb	r3, r3
 800411c:	f043 0301 	orr.w	r3, r3, #1
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b01      	cmp	r3, #1
 8004124:	d102      	bne.n	800412c <HAL_RCC_ClockConfig+0x120>
 8004126:	4b65      	ldr	r3, [pc, #404]	; (80042bc <HAL_RCC_ClockConfig+0x2b0>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	e00f      	b.n	800414c <HAL_RCC_ClockConfig+0x140>
 800412c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004130:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004134:	fa93 f3a3 	rbit	r3, r3
 8004138:	647b      	str	r3, [r7, #68]	; 0x44
 800413a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800413e:	643b      	str	r3, [r7, #64]	; 0x40
 8004140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004142:	fa93 f3a3 	rbit	r3, r3
 8004146:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004148:	4b5c      	ldr	r3, [pc, #368]	; (80042bc <HAL_RCC_ClockConfig+0x2b0>)
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004150:	63ba      	str	r2, [r7, #56]	; 0x38
 8004152:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004154:	fa92 f2a2 	rbit	r2, r2
 8004158:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 800415a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800415c:	fab2 f282 	clz	r2, r2
 8004160:	b252      	sxtb	r2, r2
 8004162:	f042 0220 	orr.w	r2, r2, #32
 8004166:	b252      	sxtb	r2, r2
 8004168:	b2d2      	uxtb	r2, r2
 800416a:	f002 021f 	and.w	r2, r2, #31
 800416e:	2101      	movs	r1, #1
 8004170:	fa01 f202 	lsl.w	r2, r1, r2
 8004174:	4013      	ands	r3, r2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d13b      	bne.n	80041f2 <HAL_RCC_ClockConfig+0x1e6>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e0db      	b.n	8004336 <HAL_RCC_ClockConfig+0x32a>
 800417e:	2302      	movs	r3, #2
 8004180:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004184:	fa93 f3a3 	rbit	r3, r3
 8004188:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800418a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800418c:	fab3 f383 	clz	r3, r3
 8004190:	b2db      	uxtb	r3, r3
 8004192:	095b      	lsrs	r3, r3, #5
 8004194:	b2db      	uxtb	r3, r3
 8004196:	f043 0301 	orr.w	r3, r3, #1
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b01      	cmp	r3, #1
 800419e:	d102      	bne.n	80041a6 <HAL_RCC_ClockConfig+0x19a>
 80041a0:	4b46      	ldr	r3, [pc, #280]	; (80042bc <HAL_RCC_ClockConfig+0x2b0>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	e00d      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1b6>
 80041a6:	2302      	movs	r3, #2
 80041a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ac:	fa93 f3a3 	rbit	r3, r3
 80041b0:	627b      	str	r3, [r7, #36]	; 0x24
 80041b2:	2302      	movs	r3, #2
 80041b4:	623b      	str	r3, [r7, #32]
 80041b6:	6a3b      	ldr	r3, [r7, #32]
 80041b8:	fa93 f3a3 	rbit	r3, r3
 80041bc:	61fb      	str	r3, [r7, #28]
 80041be:	4b3f      	ldr	r3, [pc, #252]	; (80042bc <HAL_RCC_ClockConfig+0x2b0>)
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	2202      	movs	r2, #2
 80041c4:	61ba      	str	r2, [r7, #24]
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	fa92 f2a2 	rbit	r2, r2
 80041cc:	617a      	str	r2, [r7, #20]
  return(result);
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	fab2 f282 	clz	r2, r2
 80041d4:	b252      	sxtb	r2, r2
 80041d6:	f042 0220 	orr.w	r2, r2, #32
 80041da:	b252      	sxtb	r2, r2
 80041dc:	b2d2      	uxtb	r2, r2
 80041de:	f002 021f 	and.w	r2, r2, #31
 80041e2:	2101      	movs	r1, #1
 80041e4:	fa01 f202 	lsl.w	r2, r1, r2
 80041e8:	4013      	ands	r3, r2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_RCC_ClockConfig+0x1e6>
      {
        return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e0a1      	b.n	8004336 <HAL_RCC_ClockConfig+0x32a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041f2:	4932      	ldr	r1, [pc, #200]	; (80042bc <HAL_RCC_ClockConfig+0x2b0>)
 80041f4:	4b31      	ldr	r3, [pc, #196]	; (80042bc <HAL_RCC_ClockConfig+0x2b0>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f023 0203 	bic.w	r2, r3, #3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	4313      	orrs	r3, r2
 8004202:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004204:	f7fc f83a 	bl	800027c <HAL_GetTick>
 8004208:	6778      	str	r0, [r7, #116]	; 0x74
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d112      	bne.n	8004238 <HAL_RCC_ClockConfig+0x22c>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004212:	e00a      	b.n	800422a <HAL_RCC_ClockConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004214:	f7fc f832 	bl	800027c <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004222:	4293      	cmp	r3, r2
 8004224:	d901      	bls.n	800422a <HAL_RCC_ClockConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e085      	b.n	8004336 <HAL_RCC_ClockConfig+0x32a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800422a:	4b24      	ldr	r3, [pc, #144]	; (80042bc <HAL_RCC_ClockConfig+0x2b0>)
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f003 030c 	and.w	r3, r3, #12
 8004232:	2b04      	cmp	r3, #4
 8004234:	d1ee      	bne.n	8004214 <HAL_RCC_ClockConfig+0x208>
 8004236:	e027      	b.n	8004288 <HAL_RCC_ClockConfig+0x27c>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	2b02      	cmp	r3, #2
 800423e:	d11d      	bne.n	800427c <HAL_RCC_ClockConfig+0x270>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004240:	e00a      	b.n	8004258 <HAL_RCC_ClockConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004242:	f7fc f81b 	bl	800027c <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004250:	4293      	cmp	r3, r2
 8004252:	d901      	bls.n	8004258 <HAL_RCC_ClockConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e06e      	b.n	8004336 <HAL_RCC_ClockConfig+0x32a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004258:	4b18      	ldr	r3, [pc, #96]	; (80042bc <HAL_RCC_ClockConfig+0x2b0>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f003 030c 	and.w	r3, r3, #12
 8004260:	2b08      	cmp	r3, #8
 8004262:	d1ee      	bne.n	8004242 <HAL_RCC_ClockConfig+0x236>
 8004264:	e010      	b.n	8004288 <HAL_RCC_ClockConfig+0x27c>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004266:	f7fc f809 	bl	800027c <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	f241 3288 	movw	r2, #5000	; 0x1388
 8004274:	4293      	cmp	r3, r2
 8004276:	d901      	bls.n	800427c <HAL_RCC_ClockConfig+0x270>
        {
          return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e05c      	b.n	8004336 <HAL_RCC_ClockConfig+0x32a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800427c:	4b0f      	ldr	r3, [pc, #60]	; (80042bc <HAL_RCC_ClockConfig+0x2b0>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f003 030c 	and.w	r3, r3, #12
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1ee      	bne.n	8004266 <HAL_RCC_ClockConfig+0x25a>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8004288:	4b0b      	ldr	r3, [pc, #44]	; (80042b8 <HAL_RCC_ClockConfig+0x2ac>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0207 	and.w	r2, r3, #7
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	429a      	cmp	r2, r3
 8004294:	d914      	bls.n	80042c0 <HAL_RCC_ClockConfig+0x2b4>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004296:	4908      	ldr	r1, [pc, #32]	; (80042b8 <HAL_RCC_ClockConfig+0x2ac>)
 8004298:	4b07      	ldr	r3, [pc, #28]	; (80042b8 <HAL_RCC_ClockConfig+0x2ac>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f023 0207 	bic.w	r2, r3, #7
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80042a6:	4b04      	ldr	r3, [pc, #16]	; (80042b8 <HAL_RCC_ClockConfig+0x2ac>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0207 	and.w	r2, r3, #7
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d005      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x2b4>
    {
      return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e03e      	b.n	8004336 <HAL_RCC_ClockConfig+0x32a>
 80042b8:	40022000 	.word	0x40022000
 80042bc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d008      	beq.n	80042de <HAL_RCC_ClockConfig+0x2d2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042cc:	491c      	ldr	r1, [pc, #112]	; (8004340 <HAL_RCC_ClockConfig+0x334>)
 80042ce:	4b1c      	ldr	r3, [pc, #112]	; (8004340 <HAL_RCC_ClockConfig+0x334>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	4313      	orrs	r3, r2
 80042dc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0308 	and.w	r3, r3, #8
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d009      	beq.n	80042fe <HAL_RCC_ClockConfig+0x2f2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042ea:	4915      	ldr	r1, [pc, #84]	; (8004340 <HAL_RCC_ClockConfig+0x334>)
 80042ec:	4b14      	ldr	r3, [pc, #80]	; (8004340 <HAL_RCC_ClockConfig+0x334>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	00db      	lsls	r3, r3, #3
 80042fa:	4313      	orrs	r3, r2
 80042fc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80042fe:	f000 f825 	bl	800434c <HAL_RCC_GetSysClockFreq>
 8004302:	4601      	mov	r1, r0
 8004304:	4b0e      	ldr	r3, [pc, #56]	; (8004340 <HAL_RCC_ClockConfig+0x334>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800430c:	23f0      	movs	r3, #240	; 0xf0
 800430e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	fa93 f3a3 	rbit	r3, r3
 8004316:	60fb      	str	r3, [r7, #12]
  return(result);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	fab3 f383 	clz	r3, r3
 800431e:	fa22 f303 	lsr.w	r3, r2, r3
 8004322:	4a08      	ldr	r2, [pc, #32]	; (8004344 <HAL_RCC_ClockConfig+0x338>)
 8004324:	5cd3      	ldrb	r3, [r2, r3]
 8004326:	fa21 f303 	lsr.w	r3, r1, r3
 800432a:	4a07      	ldr	r2, [pc, #28]	; (8004348 <HAL_RCC_ClockConfig+0x33c>)
 800432c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800432e:	2000      	movs	r0, #0
 8004330:	f7fb ff60 	bl	80001f4 <HAL_InitTick>
  
  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3778      	adds	r7, #120	; 0x78
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	40021000 	.word	0x40021000
 8004344:	08006a7c 	.word	0x08006a7c
 8004348:	20000118 	.word	0x20000118

0800434c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800434c:	b480      	push	{r7}
 800434e:	b08b      	sub	sp, #44	; 0x2c
 8004350:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004352:	2300      	movs	r3, #0
 8004354:	61fb      	str	r3, [r7, #28]
 8004356:	2300      	movs	r3, #0
 8004358:	61bb      	str	r3, [r7, #24]
 800435a:	2300      	movs	r3, #0
 800435c:	627b      	str	r3, [r7, #36]	; 0x24
 800435e:	2300      	movs	r3, #0
 8004360:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004362:	2300      	movs	r3, #0
 8004364:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004366:	4b29      	ldr	r3, [pc, #164]	; (800440c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	f003 030c 	and.w	r3, r3, #12
 8004372:	2b04      	cmp	r3, #4
 8004374:	d002      	beq.n	800437c <HAL_RCC_GetSysClockFreq+0x30>
 8004376:	2b08      	cmp	r3, #8
 8004378:	d003      	beq.n	8004382 <HAL_RCC_GetSysClockFreq+0x36>
 800437a:	e03c      	b.n	80043f6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800437c:	4b24      	ldr	r3, [pc, #144]	; (8004410 <HAL_RCC_GetSysClockFreq+0xc4>)
 800437e:	623b      	str	r3, [r7, #32]
      break;
 8004380:	e03c      	b.n	80043fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004388:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800438c:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	fa93 f3a3 	rbit	r3, r3
 8004394:	607b      	str	r3, [r7, #4]
  return(result);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	fab3 f383 	clz	r3, r3
 800439c:	fa22 f303 	lsr.w	r3, r2, r3
 80043a0:	4a1c      	ldr	r2, [pc, #112]	; (8004414 <HAL_RCC_GetSysClockFreq+0xc8>)
 80043a2:	5cd3      	ldrb	r3, [r2, r3]
 80043a4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80043a6:	4b19      	ldr	r3, [pc, #100]	; (800440c <HAL_RCC_GetSysClockFreq+0xc0>)
 80043a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043aa:	f003 020f 	and.w	r2, r3, #15
 80043ae:	230f      	movs	r3, #15
 80043b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	fa93 f3a3 	rbit	r3, r3
 80043b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	fab3 f383 	clz	r3, r3
 80043c0:	fa22 f303 	lsr.w	r3, r2, r3
 80043c4:	4a14      	ldr	r2, [pc, #80]	; (8004418 <HAL_RCC_GetSysClockFreq+0xcc>)
 80043c6:	5cd3      	ldrb	r3, [r2, r3]
 80043c8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d008      	beq.n	80043e6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80043d4:	4a0e      	ldr	r2, [pc, #56]	; (8004410 <HAL_RCC_GetSysClockFreq+0xc4>)
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	fb02 f303 	mul.w	r3, r2, r3
 80043e2:	627b      	str	r3, [r7, #36]	; 0x24
 80043e4:	e004      	b.n	80043f0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	4a0c      	ldr	r2, [pc, #48]	; (800441c <HAL_RCC_GetSysClockFreq+0xd0>)
 80043ea:	fb02 f303 	mul.w	r3, r2, r3
 80043ee:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	623b      	str	r3, [r7, #32]
      break;
 80043f4:	e002      	b.n	80043fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043f6:	4b06      	ldr	r3, [pc, #24]	; (8004410 <HAL_RCC_GetSysClockFreq+0xc4>)
 80043f8:	623b      	str	r3, [r7, #32]
      break;
 80043fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043fc:	6a3b      	ldr	r3, [r7, #32]
}
 80043fe:	4618      	mov	r0, r3
 8004400:	372c      	adds	r7, #44	; 0x2c
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	40021000 	.word	0x40021000
 8004410:	007a1200 	.word	0x007a1200
 8004414:	08006a5c 	.word	0x08006a5c
 8004418:	08006a6c 	.word	0x08006a6c
 800441c:	003d0900 	.word	0x003d0900

08004420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004424:	4b03      	ldr	r3, [pc, #12]	; (8004434 <HAL_RCC_GetHCLKFreq+0x14>)
 8004426:	681b      	ldr	r3, [r3, #0]
}
 8004428:	4618      	mov	r0, r3
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	20000118 	.word	0x20000118

08004438 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b092      	sub	sp, #72	; 0x48
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 80d6 	beq.w	8004602 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004456:	2300      	movs	r3, #0
 8004458:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800445c:	4b4d      	ldr	r3, [pc, #308]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10e      	bne.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004468:	4a4a      	ldr	r2, [pc, #296]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800446a:	4b4a      	ldr	r3, [pc, #296]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004472:	61d3      	str	r3, [r2, #28]
 8004474:	4b47      	ldr	r3, [pc, #284]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004476:	69db      	ldr	r3, [r3, #28]
 8004478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447c:	60bb      	str	r3, [r7, #8]
 800447e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004480:	2301      	movs	r3, #1
 8004482:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004486:	4b44      	ldr	r3, [pc, #272]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800448e:	2b00      	cmp	r3, #0
 8004490:	d118      	bne.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004492:	4a41      	ldr	r2, [pc, #260]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004494:	4b40      	ldr	r3, [pc, #256]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800449c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800449e:	f7fb feed 	bl	800027c <HAL_GetTick>
 80044a2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a4:	e008      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a6:	f7fb fee9 	bl	800027c <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b64      	cmp	r3, #100	; 0x64
 80044b2:	d901      	bls.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e14a      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x316>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b8:	4b37      	ldr	r3, [pc, #220]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d0f0      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044c4:	4b33      	ldr	r3, [pc, #204]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 8083 	beq.w	80045dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80044de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d07b      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044e4:	4b2b      	ldr	r3, [pc, #172]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f6:	fa93 f3a3 	rbit	r3, r3
 80044fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80044fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044fe:	fab3 f383 	clz	r3, r3
 8004502:	461a      	mov	r2, r3
 8004504:	4b25      	ldr	r3, [pc, #148]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004506:	4413      	add	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	461a      	mov	r2, r3
 800450c:	2301      	movs	r3, #1
 800450e:	6013      	str	r3, [r2, #0]
 8004510:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004514:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004518:	fa93 f3a3 	rbit	r3, r3
 800451c:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800451e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004520:	fab3 f383 	clz	r3, r3
 8004524:	461a      	mov	r2, r3
 8004526:	4b1d      	ldr	r3, [pc, #116]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004528:	4413      	add	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	461a      	mov	r2, r3
 800452e:	2300      	movs	r3, #0
 8004530:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004532:	4a18      	ldr	r2, [pc, #96]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004536:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d04c      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004542:	f7fb fe9b 	bl	800027c <HAL_GetTick>
 8004546:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004548:	e00a      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x128>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800454a:	f7fb fe97 	bl	800027c <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	f241 3288 	movw	r2, #5000	; 0x1388
 8004558:	4293      	cmp	r3, r2
 800455a:	d901      	bls.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x128>
          {
            return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e0f6      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x316>
 8004560:	2302      	movs	r3, #2
 8004562:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004566:	fa93 f3a3 	rbit	r3, r3
 800456a:	627b      	str	r3, [r7, #36]	; 0x24
 800456c:	2302      	movs	r3, #2
 800456e:	623b      	str	r3, [r7, #32]
 8004570:	6a3b      	ldr	r3, [r7, #32]
 8004572:	fa93 f3a3 	rbit	r3, r3
 8004576:	61fb      	str	r3, [r7, #28]
  return(result);
 8004578:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800457a:	fab3 f383 	clz	r3, r3
 800457e:	b2db      	uxtb	r3, r3
 8004580:	095b      	lsrs	r3, r3, #5
 8004582:	b2db      	uxtb	r3, r3
 8004584:	f043 0302 	orr.w	r3, r3, #2
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d108      	bne.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800458e:	4b01      	ldr	r3, [pc, #4]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	e00d      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004594:	40021000 	.word	0x40021000
 8004598:	40007000 	.word	0x40007000
 800459c:	10908100 	.word	0x10908100
 80045a0:	2302      	movs	r3, #2
 80045a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	fa93 f3a3 	rbit	r3, r3
 80045aa:	617b      	str	r3, [r7, #20]
 80045ac:	4b6a      	ldr	r3, [pc, #424]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	2202      	movs	r2, #2
 80045b2:	613a      	str	r2, [r7, #16]
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	fa92 f2a2 	rbit	r2, r2
 80045ba:	60fa      	str	r2, [r7, #12]
  return(result);
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	fab2 f282 	clz	r2, r2
 80045c2:	b252      	sxtb	r2, r2
 80045c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045c8:	b252      	sxtb	r2, r2
 80045ca:	b2d2      	uxtb	r2, r2
 80045cc:	f002 021f 	and.w	r2, r2, #31
 80045d0:	2101      	movs	r1, #1
 80045d2:	fa01 f202 	lsl.w	r2, r1, r2
 80045d6:	4013      	ands	r3, r2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0b6      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x112>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80045dc:	495e      	ldr	r1, [pc, #376]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80045de:	4b5e      	ldr	r3, [pc, #376]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80045ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d105      	bne.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045f6:	4a58      	ldr	r2, [pc, #352]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80045f8:	4b57      	ldr	r3, [pc, #348]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004600:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	d008      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800460e:	4952      	ldr	r1, [pc, #328]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004610:	4b51      	ldr	r3, [pc, #324]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004614:	f023 0203 	bic.w	r2, r3, #3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	4313      	orrs	r3, r2
 800461e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0320 	and.w	r3, r3, #32
 8004628:	2b00      	cmp	r3, #0
 800462a:	d008      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800462c:	494a      	ldr	r1, [pc, #296]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800462e:	4b4a      	ldr	r3, [pc, #296]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004632:	f023 0210 	bic.w	r2, r3, #16
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	4313      	orrs	r3, r2
 800463c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d008      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800464a:	4943      	ldr	r1, [pc, #268]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800464c:	4b42      	ldr	r3, [pc, #264]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004658:	4313      	orrs	r3, r2
 800465a:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004664:	2b00      	cmp	r3, #0
 8004666:	d008      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004668:	493b      	ldr	r1, [pc, #236]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800466a:	4b3b      	ldr	r3, [pc, #236]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800466c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466e:	f023 0220 	bic.w	r2, r3, #32
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	4313      	orrs	r3, r2
 8004678:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d008      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004686:	4934      	ldr	r1, [pc, #208]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004688:	4b33      	ldr	r3, [pc, #204]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800468a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	4313      	orrs	r3, r2
 8004696:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d008      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80046a4:	492c      	ldr	r1, [pc, #176]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80046a6:	4b2c      	ldr	r3, [pc, #176]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d008      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80046c2:	4925      	ldr	r1, [pc, #148]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80046c4:	4b24      	ldr	r3, [pc, #144]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80046c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d008      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80046e0:	491d      	ldr	r1, [pc, #116]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80046e2:	4b1d      	ldr	r3, [pc, #116]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80046e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d008      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80046fe:	4916      	ldr	r1, [pc, #88]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004700:	4b15      	ldr	r3, [pc, #84]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004704:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470c:	4313      	orrs	r3, r2
 800470e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d008      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800471c:	490e      	ldr	r1, [pc, #56]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800471e:	4b0e      	ldr	r3, [pc, #56]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004722:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472a:	4313      	orrs	r3, r2
 800472c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d008      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800473a:	4907      	ldr	r1, [pc, #28]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800473c:	4b06      	ldr	r3, [pc, #24]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800473e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004740:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004748:	4313      	orrs	r3, r2
 800474a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3748      	adds	r7, #72	; 0x48
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	40021000 	.word	0x40021000

0800475c <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	460b      	mov	r3, r1
 8004766:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8004768:	2300      	movs	r3, #0
 800476a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	7c1b      	ldrb	r3, [r3, #16]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10e      	bne.n	8004792 <USBD_CDC_Init+0x36>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8004774:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004778:	2202      	movs	r2, #2
 800477a:	2181      	movs	r1, #129	; 0x81
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f001 fe37 	bl	80063f0 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8004782:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004786:	2202      	movs	r2, #2
 8004788:	2101      	movs	r1, #1
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f001 fe30 	bl	80063f0 <USBD_LL_OpenEP>
 8004790:	e00b      	b.n	80047aa <USBD_CDC_Init+0x4e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8004792:	2340      	movs	r3, #64	; 0x40
 8004794:	2202      	movs	r2, #2
 8004796:	2181      	movs	r1, #129	; 0x81
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f001 fe29 	bl	80063f0 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800479e:	2340      	movs	r3, #64	; 0x40
 80047a0:	2202      	movs	r2, #2
 80047a2:	2101      	movs	r1, #1
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f001 fe23 	bl	80063f0 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 80047aa:	2308      	movs	r3, #8
 80047ac:	2203      	movs	r2, #3
 80047ae:	2182      	movs	r1, #130	; 0x82
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f001 fe1d 	bl	80063f0 <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80047b6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80047ba:	f001 ffe3 	bl	8006784 <USBD_static_malloc>
 80047be:	4602      	mov	r2, r0
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d102      	bne.n	80047d6 <USBD_CDC_Init+0x7a>
  {
    ret = 1; 
 80047d0:	2301      	movs	r3, #1
 80047d2:	73fb      	strb	r3, [r7, #15]
 80047d4:	e026      	b.n	8004824 <USBD_CDC_Init+0xc8>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80047dc:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState =0;
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	7c1b      	ldrb	r3, [r3, #16]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d109      	bne.n	8004814 <USBD_CDC_Init+0xb8>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004806:	f44f 7300 	mov.w	r3, #512	; 0x200
 800480a:	2101      	movs	r1, #1
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f001 ff6b 	bl	80066e8 <USBD_LL_PrepareReceive>
 8004812:	e007      	b.n	8004824 <USBD_CDC_Init+0xc8>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800481a:	2340      	movs	r3, #64	; 0x40
 800481c:	2101      	movs	r1, #1
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f001 ff62 	bl	80066e8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 8004824:	7bfb      	ldrb	r3, [r7, #15]
}
 8004826:	4618      	mov	r0, r3
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b084      	sub	sp, #16
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
 8004836:	460b      	mov	r3, r1
 8004838:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 800483a:	2300      	movs	r3, #0
 800483c:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 800483e:	2181      	movs	r1, #129	; 0x81
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f001 fe13 	bl	800646c <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8004846:	2101      	movs	r1, #1
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f001 fe0f 	bl	800646c <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 800484e:	2182      	movs	r1, #130	; 0x82
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f001 fe0b 	bl	800646c <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00e      	beq.n	800487e <USBD_CDC_DeInit+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004870:	4618      	mov	r0, r3
 8004872:	f001 ff95 	bl	80067a0 <USBD_static_free>
    pdev->pClassData = NULL;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  
  return ret;
 800487e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004898:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d03a      	beq.n	800491c <USBD_CDC_Setup+0x94>
 80048a6:	2b20      	cmp	r3, #32
 80048a8:	d000      	beq.n	80048ac <USBD_CDC_Setup+0x24>
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 80048aa:	e043      	b.n	8004934 <USBD_CDC_Setup+0xac>
    if (req->wLength)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	88db      	ldrh	r3, [r3, #6]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d029      	beq.n	8004908 <USBD_CDC_Setup+0x80>
      if (req->bmRequest & 0x80)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	b25b      	sxtb	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	da11      	bge.n	80048e2 <USBD_CDC_Setup+0x5a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80048ca:	68f9      	ldr	r1, [r7, #12]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	88d2      	ldrh	r2, [r2, #6]
 80048d0:	4798      	blx	r3
                            (uint8_t *)hcdc->data,
 80048d2:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev, 
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	88db      	ldrh	r3, [r3, #6]
 80048d8:	461a      	mov	r2, r3
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f001 f81a 	bl	8005914 <USBD_CtlSendData>
    break;
 80048e0:	e029      	b.n	8004936 <USBD_CDC_Setup+0xae>
        hcdc->CmdOpCode = req->bRequest;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	785a      	ldrb	r2, [r3, #1]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	88db      	ldrh	r3, [r3, #6]
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
                           (uint8_t *)hcdc->data,
 80048f8:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev, 
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	88db      	ldrh	r3, [r3, #6]
 80048fe:	461a      	mov	r2, r3
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f001 f835 	bl	8005970 <USBD_CtlPrepareRx>
    break;
 8004906:	e016      	b.n	8004936 <USBD_CDC_Setup+0xae>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	7850      	ldrb	r0, [r2, #1]
 8004914:	2200      	movs	r2, #0
 8004916:	6839      	ldr	r1, [r7, #0]
 8004918:	4798      	blx	r3
    break;
 800491a:	e00c      	b.n	8004936 <USBD_CDC_Setup+0xae>
    switch (req->bRequest)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	785b      	ldrb	r3, [r3, #1]
 8004920:	2b0a      	cmp	r3, #10
 8004922:	d001      	beq.n	8004928 <USBD_CDC_Setup+0xa0>
 8004924:	2b0b      	cmp	r3, #11
      break;
 8004926:	e005      	b.n	8004934 <USBD_CDC_Setup+0xac>
      USBD_CtlSendData (pdev,
 8004928:	2201      	movs	r2, #1
 800492a:	4905      	ldr	r1, [pc, #20]	; (8004940 <USBD_CDC_Setup+0xb8>)
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 fff1 	bl	8005914 <USBD_CtlSendData>
      break;
 8004932:	bf00      	nop
    break;
 8004934:	bf00      	nop
  }
  return USBD_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	2000017c 	.word	0x2000017c

08004944 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	460b      	mov	r3, r1
 800494e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004956:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800495e:	2b00      	cmp	r3, #0
 8004960:	d005      	beq.n	800496e <USBD_CDC_DataIn+0x2a>
  {
    
    hcdc->TxState = 0;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    return USBD_OK;
 800496a:	2300      	movs	r3, #0
 800496c:	e000      	b.n	8004970 <USBD_CDC_DataIn+0x2c>
  }
  else
  {
    return USBD_FAIL;
 800496e:	2302      	movs	r3, #2
  }
}
 8004970:	4618      	mov	r0, r3
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	460b      	mov	r3, r1
 8004986:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800498e:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8004990:	78fb      	ldrb	r3, [r7, #3]
 8004992:	4619      	mov	r1, r3
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f001 fee1 	bl	800675c <USBD_LL_GetRxDataSize>
 800499a:	4602      	mov	r2, r0
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00d      	beq.n	80049c8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80049c0:	4611      	mov	r1, r2
 80049c2:	4798      	blx	r3

    return USBD_OK;
 80049c4:	2300      	movs	r3, #0
 80049c6:	e000      	b.n	80049ca <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80049c8:	2302      	movs	r3, #2
  }
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b084      	sub	sp, #16
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80049e0:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d015      	beq.n	8004a18 <USBD_CDC_EP0_RxReady+0x46>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80049f2:	2bff      	cmp	r3, #255	; 0xff
 80049f4:	d010      	beq.n	8004a18 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8004a04:	68f9      	ldr	r1, [r7, #12]
                                                      hcdc->CmdLength);
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004a0c:	b292      	uxth	r2, r2
 8004a0e:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFF; 
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	22ff      	movs	r2, #255	; 0xff
 8004a14:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
      
  }
  return USBD_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
	...

08004a24 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2243      	movs	r2, #67	; 0x43
 8004a30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8004a32:	4b03      	ldr	r3, [pc, #12]	; (8004a40 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr
 8004a40:	20000090 	.word	0x20000090

08004a44 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2243      	movs	r2, #67	; 0x43
 8004a50:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8004a52:	4b03      	ldr	r3, [pc, #12]	; (8004a60 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	2000004c 	.word	0x2000004c

08004a64 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2243      	movs	r2, #67	; 0x43
 8004a70:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8004a72:	4b03      	ldr	r3, [pc, #12]	; (8004a80 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr
 8004a80:	200000d4 	.word	0x200000d4

08004a84 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	220a      	movs	r2, #10
 8004a90:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8004a92:	4b03      	ldr	r3, [pc, #12]	; (8004aa0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	20000008 	.word	0x20000008

08004aa4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8004aae:	2302      	movs	r3, #2
 8004ab0:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d005      	beq.n	8004ac4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;    
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b087      	sub	sp, #28
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	60f8      	str	r0, [r7, #12]
 8004ada:	60b9      	str	r1, [r7, #8]
 8004adc:	4613      	mov	r3, r2
 8004ade:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004ae6:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8004af0:	88fa      	ldrh	r2, [r7, #6]
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	371c      	adds	r7, #28
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8004b06:	b480      	push	{r7}
 8004b08:	b085      	sub	sp, #20
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
 8004b0e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004b16:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
  return USBD_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3714      	adds	r7, #20
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b084      	sub	sp, #16
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004b3c:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d017      	beq.n	8004b78 <USBD_CDC_TransmitPacket+0x4a>
  {
    if(hcdc->TxState == 0)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d110      	bne.n	8004b74 <USBD_CDC_TransmitPacket+0x46>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev,
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	2181      	movs	r1, #129	; 0x81
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f001 fd82 	bl	8006674 <USBD_LL_Transmit>
      
      return USBD_OK;
 8004b70:	2300      	movs	r3, #0
 8004b72:	e002      	b.n	8004b7a <USBD_CDC_TransmitPacket+0x4c>
    }
    else
    {
      return USBD_BUSY;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e000      	b.n	8004b7a <USBD_CDC_TransmitPacket+0x4c>
    }
  }
  else
  {
    return USBD_FAIL;
 8004b78:	2302      	movs	r3, #2
  }
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b084      	sub	sp, #16
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004b90:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d017      	beq.n	8004bcc <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	7c1b      	ldrb	r3, [r3, #16]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d109      	bne.n	8004bb8 <USBD_CDC_ReceivePacket+0x36>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004baa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bae:	2101      	movs	r1, #1
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f001 fd99 	bl	80066e8 <USBD_LL_PrepareReceive>
 8004bb6:	e007      	b.n	8004bc8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004bbe:	2340      	movs	r3, #64	; 0x40
 8004bc0:	2101      	movs	r1, #1
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f001 fd90 	bl	80066e8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	e000      	b.n	8004bce <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8004bcc:	2302      	movs	r3, #2
  }
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b084      	sub	sp, #16
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	60f8      	str	r0, [r7, #12]
 8004bde:	60b9      	str	r1, [r7, #8]
 8004be0:	4613      	mov	r3, r2
 8004be2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8004bea:	2302      	movs	r3, #2
 8004bec:	e01a      	b.n	8004c24 <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d003      	beq.n	8004c00 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	79fa      	ldrb	r2, [r7, #7]
 8004c1a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f001 fb53 	bl	80062c8 <USBD_LL_Init>
  
  return USBD_OK; 
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8004c36:	2300      	movs	r3, #0
 8004c38:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d006      	beq.n	8004c4e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	73fb      	strb	r3, [r7, #15]
 8004c4c:	e001      	b.n	8004c52 <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8004c4e:	2302      	movs	r3, #2
 8004c50:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8004c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f001 fb8f 	bl	800638c <USBD_LL_Start>
  
  return USBD_OK;  
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b084      	sub	sp, #16
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
 8004c96:	460b      	mov	r3, r1
 8004c98:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00c      	beq.n	8004cc2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	78fa      	ldrb	r2, [r7, #3]
 8004cb2:	4611      	mov	r1, r2
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	4798      	blx	r3
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 8004cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	78fa      	ldrb	r2, [r7, #3]
 8004ce2:	4611      	mov	r1, r2
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	4798      	blx	r3
  return USBD_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b082      	sub	sp, #8
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
 8004cfa:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004d02:	6839      	ldr	r1, [r7, #0]
 8004d04:	4618      	mov	r0, r3
 8004d06:	f000 fd5c 	bl	80057c2 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004d18:	461a      	mov	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004d26:	f003 031f 	and.w	r3, r3, #31
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d00b      	beq.n	8004d46 <USBD_LL_SetupStage+0x54>
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d011      	beq.n	8004d56 <USBD_LL_SetupStage+0x64>
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d117      	bne.n	8004d66 <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f98a 	bl	8005058 <USBD_StdDevReq>
    break;
 8004d44:	e01a      	b.n	8004d7c <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f9d2 	bl	80050f8 <USBD_StdItfReq>
    break;
 8004d54:	e012      	b.n	8004d7c <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f9fd 	bl	800515e <USBD_StdEPReq>
    break;
 8004d64:	e00a      	b.n	8004d7c <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004d6c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	4619      	mov	r1, r3
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f001 fbaf 	bl	80064d8 <USBD_LL_StallEP>
    break;
 8004d7a:	bf00      	nop
  }  
  return USBD_OK;  
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b086      	sub	sp, #24
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	60f8      	str	r0, [r7, #12]
 8004d8e:	460b      	mov	r3, r1
 8004d90:	607a      	str	r2, [r7, #4]
 8004d92:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8004d94:	7afb      	ldrb	r3, [r7, #11]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d138      	bne.n	8004e0c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8004da0:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8004da8:	2b03      	cmp	r3, #3
 8004daa:	d142      	bne.n	8004e32 <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d914      	bls.n	8004de2 <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	689a      	ldr	r2, [r3, #8]
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	1ad2      	subs	r2, r2, r3
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	68da      	ldr	r2, [r3, #12]
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	bf28      	it	cs
 8004dd2:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	6879      	ldr	r1, [r7, #4]
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 fde6 	bl	80059ac <USBD_CtlContinueRx>
 8004de0:	e027      	b.n	8004e32 <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00a      	beq.n	8004e04 <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004df4:	2b03      	cmp	r3, #3
 8004df6:	d105      	bne.n	8004e04 <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f000 fde3 	bl	80059d0 <USBD_CtlSendStatus>
 8004e0a:	e012      	b.n	8004e32 <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00c      	beq.n	8004e32 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 8004e1e:	2b03      	cmp	r3, #3
 8004e20:	d107      	bne.n	8004e32 <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	7afa      	ldrb	r2, [r7, #11]
 8004e2c:	4611      	mov	r1, r2
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	4798      	blx	r3
  }  
  return USBD_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3718      	adds	r7, #24
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	460b      	mov	r3, r1
 8004e46:	607a      	str	r2, [r7, #4]
 8004e48:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8004e4a:	7afb      	ldrb	r3, [r7, #11]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d16c      	bne.n	8004f2a <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	3314      	adds	r3, #20
 8004e54:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d157      	bne.n	8004f10 <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	689a      	ldr	r2, [r3, #8]
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d915      	bls.n	8004e98 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	689a      	ldr	r2, [r3, #8]
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	1ad2      	subs	r2, r2, r3
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	461a      	mov	r2, r3
 8004e82:	6879      	ldr	r1, [r7, #4]
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f000 fd61 	bl	800594c <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	2100      	movs	r1, #0
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f001 fc29 	bl	80066e8 <USBD_LL_PrepareReceive>
 8004e96:	e03b      	b.n	8004f10 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	68d2      	ldr	r2, [r2, #12]
 8004ea0:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ea4:	fb02 f201 	mul.w	r2, r2, r1
 8004ea8:	1a9b      	subs	r3, r3, r2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d11c      	bne.n	8004ee8 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	685a      	ldr	r2, [r3, #4]
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d316      	bcc.n	8004ee8 <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	685a      	ldr	r2, [r3, #4]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d20f      	bcs.n	8004ee8 <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8004ec8:	2200      	movs	r2, #0
 8004eca:	2100      	movs	r1, #0
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f000 fd3d 	bl	800594c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8004eda:	2300      	movs	r3, #0
 8004edc:	2200      	movs	r2, #0
 8004ede:	2100      	movs	r1, #0
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f001 fc01 	bl	80066e8 <USBD_LL_PrepareReceive>
 8004ee6:	e013      	b.n	8004f10 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00a      	beq.n	8004f0a <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004efa:	2b03      	cmp	r3, #3
 8004efc:	d105      	bne.n	8004f0a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f000 fd73 	bl	80059f6 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d11a      	bne.n	8004f50 <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f7ff feac 	bl	8004c78 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8004f28:	e012      	b.n	8004f50 <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00c      	beq.n	8004f50 <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 8004f3c:	2b03      	cmp	r3, #3
 8004f3e:	d107      	bne.n	8004f50 <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	7afa      	ldrb	r2, [r7, #11]
 8004f4a:	4611      	mov	r1, r2
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	4798      	blx	r3
  }  
  return USBD_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3718      	adds	r7, #24
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b082      	sub	sp, #8
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8004f62:	2340      	movs	r3, #64	; 0x40
 8004f64:	2200      	movs	r2, #0
 8004f66:	2100      	movs	r1, #0
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f001 fa41 	bl	80063f0 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2240      	movs	r2, #64	; 0x40
 8004f72:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8004f76:	2340      	movs	r3, #64	; 0x40
 8004f78:	2200      	movs	r2, #0
 8004f7a:	2180      	movs	r1, #128	; 0x80
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f001 fa37 	bl	80063f0 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2240      	movs	r2, #64	; 0x40
 8004f86:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d009      	beq.n	8004fae <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	6852      	ldr	r2, [r2, #4]
 8004fa6:	b2d2      	uxtb	r2, r2
 8004fa8:	4611      	mov	r1, r2
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	4798      	blx	r3
 
  
  return USBD_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	78fa      	ldrb	r2, [r7, #3]
 8004fc8:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2204      	movs	r2, #4
 8004ff0:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005032:	2b03      	cmp	r3, #3
 8005034:	d10b      	bne.n	800504e <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800503c:	69db      	ldr	r3, [r3, #28]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d005      	beq.n	800504e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3708      	adds	r7, #8
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 8005062:	2300      	movs	r3, #0
 8005064:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	785b      	ldrb	r3, [r3, #1]
 800506a:	2b09      	cmp	r3, #9
 800506c:	d839      	bhi.n	80050e2 <USBD_StdDevReq+0x8a>
 800506e:	a201      	add	r2, pc, #4	; (adr r2, 8005074 <USBD_StdDevReq+0x1c>)
 8005070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005074:	080050c5 	.word	0x080050c5
 8005078:	080050d9 	.word	0x080050d9
 800507c:	080050e3 	.word	0x080050e3
 8005080:	080050cf 	.word	0x080050cf
 8005084:	080050e3 	.word	0x080050e3
 8005088:	080050a7 	.word	0x080050a7
 800508c:	0800509d 	.word	0x0800509d
 8005090:	080050e3 	.word	0x080050e3
 8005094:	080050bb 	.word	0x080050bb
 8005098:	080050b1 	.word	0x080050b1
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 800509c:	6839      	ldr	r1, [r7, #0]
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f936 	bl	8005310 <USBD_GetDescriptor>
    break;
 80050a4:	e022      	b.n	80050ec <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 80050a6:	6839      	ldr	r1, [r7, #0]
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 fa25 	bl	80054f8 <USBD_SetAddress>
    break;
 80050ae:	e01d      	b.n	80050ec <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 80050b0:	6839      	ldr	r1, [r7, #0]
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 fa5e 	bl	8005574 <USBD_SetConfig>
    break;
 80050b8:	e018      	b.n	80050ec <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 80050ba:	6839      	ldr	r1, [r7, #0]
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 fae1 	bl	8005684 <USBD_GetConfig>
    break;
 80050c2:	e013      	b.n	80050ec <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 80050c4:	6839      	ldr	r1, [r7, #0]
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 fb0e 	bl	80056e8 <USBD_GetStatus>
    break;
 80050cc:	e00e      	b.n	80050ec <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 80050ce:	6839      	ldr	r1, [r7, #0]
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 fb33 	bl	800573c <USBD_SetFeature>
    break;
 80050d6:	e009      	b.n	80050ec <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 80050d8:	6839      	ldr	r1, [r7, #0]
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 fb49 	bl	8005772 <USBD_ClrFeature>
    break;
 80050e0:	e004      	b.n	80050ec <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 80050e2:	6839      	ldr	r1, [r7, #0]
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 fba9 	bl	800583c <USBD_CtlError>
    break;
 80050ea:	bf00      	nop
  }
  
  return ret;
 80050ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop

080050f8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 8005102:	2300      	movs	r3, #0
 8005104:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800510c:	2b03      	cmp	r3, #3
 800510e:	d11b      	bne.n	8005148 <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	889b      	ldrh	r3, [r3, #4]
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b01      	cmp	r3, #1
 8005118:	d811      	bhi.n	800513e <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	6839      	ldr	r1, [r7, #0]
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	88db      	ldrh	r3, [r3, #6]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d110      	bne.n	8005152 <USBD_StdItfReq+0x5a>
 8005130:	7bfb      	ldrb	r3, [r7, #15]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10d      	bne.n	8005152 <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 fc4a 	bl	80059d0 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 800513c:	e009      	b.n	8005152 <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 800513e:	6839      	ldr	r1, [r7, #0]
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 fb7b 	bl	800583c <USBD_CtlError>
    break;
 8005146:	e004      	b.n	8005152 <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 8005148:	6839      	ldr	r1, [r7, #0]
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 fb76 	bl	800583c <USBD_CtlError>
    break;
 8005150:	e000      	b.n	8005154 <USBD_StdItfReq+0x5c>
    break;
 8005152:	bf00      	nop
  }
  return USBD_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b084      	sub	sp, #16
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
 8005166:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 8005168:	2300      	movs	r3, #0
 800516a:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	889b      	ldrh	r3, [r3, #4]
 8005170:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800517a:	2b20      	cmp	r3, #32
 800517c:	d108      	bne.n	8005190 <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	6839      	ldr	r1, [r7, #0]
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	4798      	blx	r3
    
    return USBD_OK;
 800518c:	2300      	movs	r3, #0
 800518e:	e0ba      	b.n	8005306 <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	785b      	ldrb	r3, [r3, #1]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d039      	beq.n	800520c <USBD_StdEPReq+0xae>
 8005198:	2b03      	cmp	r3, #3
 800519a:	d002      	beq.n	80051a2 <USBD_StdEPReq+0x44>
 800519c:	2b00      	cmp	r3, #0
 800519e:	d06b      	beq.n	8005278 <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 80051a0:	e0b0      	b.n	8005304 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d002      	beq.n	80051b2 <USBD_StdEPReq+0x54>
 80051ac:	2b03      	cmp	r3, #3
 80051ae:	d00c      	beq.n	80051ca <USBD_StdEPReq+0x6c>
 80051b0:	e025      	b.n	80051fe <USBD_StdEPReq+0xa0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80051b2:	7bbb      	ldrb	r3, [r7, #14]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d027      	beq.n	8005208 <USBD_StdEPReq+0xaa>
 80051b8:	7bbb      	ldrb	r3, [r7, #14]
 80051ba:	2b80      	cmp	r3, #128	; 0x80
 80051bc:	d024      	beq.n	8005208 <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
 80051be:	7bbb      	ldrb	r3, [r7, #14]
 80051c0:	4619      	mov	r1, r3
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f001 f988 	bl	80064d8 <USBD_LL_StallEP>
      break;	
 80051c8:	e01e      	b.n	8005208 <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	885b      	ldrh	r3, [r3, #2]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10a      	bne.n	80051e8 <USBD_StdEPReq+0x8a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80051d2:	7bbb      	ldrb	r3, [r7, #14]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d007      	beq.n	80051e8 <USBD_StdEPReq+0x8a>
 80051d8:	7bbb      	ldrb	r3, [r7, #14]
 80051da:	2b80      	cmp	r3, #128	; 0x80
 80051dc:	d004      	beq.n	80051e8 <USBD_StdEPReq+0x8a>
          USBD_LL_StallEP(pdev , ep_addr);
 80051de:	7bbb      	ldrb	r3, [r7, #14]
 80051e0:	4619      	mov	r1, r3
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f001 f978 	bl	80064d8 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	6839      	ldr	r1, [r7, #0]
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 fbea 	bl	80059d0 <USBD_CtlSendStatus>
      break;
 80051fc:	e005      	b.n	800520a <USBD_StdEPReq+0xac>
      USBD_CtlError(pdev , req);
 80051fe:	6839      	ldr	r1, [r7, #0]
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 fb1b 	bl	800583c <USBD_CtlError>
      break;    
 8005206:	e000      	b.n	800520a <USBD_StdEPReq+0xac>
      break;	
 8005208:	bf00      	nop
    break;
 800520a:	e07b      	b.n	8005304 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005212:	2b02      	cmp	r3, #2
 8005214:	d002      	beq.n	800521c <USBD_StdEPReq+0xbe>
 8005216:	2b03      	cmp	r3, #3
 8005218:	d00c      	beq.n	8005234 <USBD_StdEPReq+0xd6>
 800521a:	e024      	b.n	8005266 <USBD_StdEPReq+0x108>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800521c:	7bbb      	ldrb	r3, [r7, #14]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d026      	beq.n	8005270 <USBD_StdEPReq+0x112>
 8005222:	7bbb      	ldrb	r3, [r7, #14]
 8005224:	2b80      	cmp	r3, #128	; 0x80
 8005226:	d023      	beq.n	8005270 <USBD_StdEPReq+0x112>
        USBD_LL_StallEP(pdev , ep_addr);
 8005228:	7bbb      	ldrb	r3, [r7, #14]
 800522a:	4619      	mov	r1, r3
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f001 f953 	bl	80064d8 <USBD_LL_StallEP>
      break;	
 8005232:	e01d      	b.n	8005270 <USBD_StdEPReq+0x112>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	885b      	ldrh	r3, [r3, #2]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d11b      	bne.n	8005274 <USBD_StdEPReq+0x116>
        if ((ep_addr & 0x7F) != 0x00) 
 800523c:	7bbb      	ldrb	r3, [r7, #14]
 800523e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00b      	beq.n	800525e <USBD_StdEPReq+0x100>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8005246:	7bbb      	ldrb	r3, [r7, #14]
 8005248:	4619      	mov	r1, r3
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f001 f97a 	bl	8006544 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	6839      	ldr	r1, [r7, #0]
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fbb6 	bl	80059d0 <USBD_CtlSendStatus>
      break;
 8005264:	e006      	b.n	8005274 <USBD_StdEPReq+0x116>
      USBD_CtlError(pdev , req);
 8005266:	6839      	ldr	r1, [r7, #0]
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 fae7 	bl	800583c <USBD_CtlError>
      break;    
 800526e:	e002      	b.n	8005276 <USBD_StdEPReq+0x118>
      break;	
 8005270:	bf00      	nop
 8005272:	e047      	b.n	8005304 <USBD_StdEPReq+0x1a6>
      break;
 8005274:	bf00      	nop
    break;
 8005276:	e045      	b.n	8005304 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800527e:	2b02      	cmp	r3, #2
 8005280:	d002      	beq.n	8005288 <USBD_StdEPReq+0x12a>
 8005282:	2b03      	cmp	r3, #3
 8005284:	d00b      	beq.n	800529e <USBD_StdEPReq+0x140>
 8005286:	e036      	b.n	80052f6 <USBD_StdEPReq+0x198>
      if ((ep_addr & 0x7F) != 0x00) 
 8005288:	7bbb      	ldrb	r3, [r7, #14]
 800528a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800528e:	2b00      	cmp	r3, #0
 8005290:	d036      	beq.n	8005300 <USBD_StdEPReq+0x1a2>
        USBD_LL_StallEP(pdev , ep_addr);
 8005292:	7bbb      	ldrb	r3, [r7, #14]
 8005294:	4619      	mov	r1, r3
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f001 f91e 	bl	80064d8 <USBD_LL_StallEP>
      break;	
 800529c:	e030      	b.n	8005300 <USBD_StdEPReq+0x1a2>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800529e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	da08      	bge.n	80052b8 <USBD_StdEPReq+0x15a>
 80052a6:	7bbb      	ldrb	r3, [r7, #14]
 80052a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052ac:	3301      	adds	r3, #1
 80052ae:	011b      	lsls	r3, r3, #4
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	4413      	add	r3, r2
 80052b4:	3304      	adds	r3, #4
 80052b6:	e007      	b.n	80052c8 <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 80052b8:	7bbb      	ldrb	r3, [r7, #14]
 80052ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80052be:	3310      	adds	r3, #16
 80052c0:	011b      	lsls	r3, r3, #4
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	4413      	add	r3, r2
 80052c6:	3304      	adds	r3, #4
 80052c8:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80052ca:	7bbb      	ldrb	r3, [r7, #14]
 80052cc:	4619      	mov	r1, r3
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f001 f96e 	bl	80065b0 <USBD_LL_IsStallEP>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d003      	beq.n	80052e2 <USBD_StdEPReq+0x184>
        pep->status = 0x0001;     
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	2201      	movs	r2, #1
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	e002      	b.n	80052e8 <USBD_StdEPReq+0x18a>
        pep->status = 0x0000;  
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	2200      	movs	r2, #0
 80052e6:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 80052e8:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 80052ea:	2202      	movs	r2, #2
 80052ec:	4619      	mov	r1, r3
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 fb10 	bl	8005914 <USBD_CtlSendData>
      break;
 80052f4:	e005      	b.n	8005302 <USBD_StdEPReq+0x1a4>
      USBD_CtlError(pdev , req);
 80052f6:	6839      	ldr	r1, [r7, #0]
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 fa9f 	bl	800583c <USBD_CtlError>
      break;
 80052fe:	e000      	b.n	8005302 <USBD_StdEPReq+0x1a4>
      break;	
 8005300:	bf00      	nop
    break;
 8005302:	bf00      	nop
  }
  return ret;
 8005304:	7bfb      	ldrb	r3, [r7, #15]
}
 8005306:	4618      	mov	r0, r3
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
	...

08005310 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	885b      	ldrh	r3, [r3, #2]
 800531e:	0a1b      	lsrs	r3, r3, #8
 8005320:	b29b      	uxth	r3, r3
 8005322:	3b01      	subs	r3, #1
 8005324:	2b06      	cmp	r3, #6
 8005326:	f200 80c9 	bhi.w	80054bc <USBD_GetDescriptor+0x1ac>
 800532a:	a201      	add	r2, pc, #4	; (adr r2, 8005330 <USBD_GetDescriptor+0x20>)
 800532c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005330:	0800534d 	.word	0x0800534d
 8005334:	08005365 	.word	0x08005365
 8005338:	080053a5 	.word	0x080053a5
 800533c:	080054bd 	.word	0x080054bd
 8005340:	080054bd 	.word	0x080054bd
 8005344:	08005469 	.word	0x08005469
 8005348:	0800548f 	.word	0x0800548f
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	7c12      	ldrb	r2, [r2, #16]
 8005358:	f107 010a 	add.w	r1, r7, #10
 800535c:	4610      	mov	r0, r2
 800535e:	4798      	blx	r3
 8005360:	60f8      	str	r0, [r7, #12]
    break;
 8005362:	e0b0      	b.n	80054c6 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	7c1b      	ldrb	r3, [r3, #16]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d10d      	bne.n	8005388 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005374:	f107 020a 	add.w	r2, r7, #10
 8005378:	4610      	mov	r0, r2
 800537a:	4798      	blx	r3
 800537c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	3301      	adds	r3, #1
 8005382:	2202      	movs	r2, #2
 8005384:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005386:	e09e      	b.n	80054c6 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800538e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005390:	f107 020a 	add.w	r2, r7, #10
 8005394:	4610      	mov	r0, r2
 8005396:	4798      	blx	r3
 8005398:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	3301      	adds	r3, #1
 800539e:	2202      	movs	r2, #2
 80053a0:	701a      	strb	r2, [r3, #0]
    break;
 80053a2:	e090      	b.n	80054c6 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	885b      	ldrh	r3, [r3, #2]
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b05      	cmp	r3, #5
 80053ac:	d856      	bhi.n	800545c <USBD_GetDescriptor+0x14c>
 80053ae:	a201      	add	r2, pc, #4	; (adr r2, 80053b4 <USBD_GetDescriptor+0xa4>)
 80053b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b4:	080053cd 	.word	0x080053cd
 80053b8:	080053e5 	.word	0x080053e5
 80053bc:	080053fd 	.word	0x080053fd
 80053c0:	08005415 	.word	0x08005415
 80053c4:	0800542d 	.word	0x0800542d
 80053c8:	08005445 	.word	0x08005445
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	7c12      	ldrb	r2, [r2, #16]
 80053d8:	f107 010a 	add.w	r1, r7, #10
 80053dc:	4610      	mov	r0, r2
 80053de:	4798      	blx	r3
 80053e0:	60f8      	str	r0, [r7, #12]
      break;
 80053e2:	e040      	b.n	8005466 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	7c12      	ldrb	r2, [r2, #16]
 80053f0:	f107 010a 	add.w	r1, r7, #10
 80053f4:	4610      	mov	r0, r2
 80053f6:	4798      	blx	r3
 80053f8:	60f8      	str	r0, [r7, #12]
      break;
 80053fa:	e034      	b.n	8005466 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	7c12      	ldrb	r2, [r2, #16]
 8005408:	f107 010a 	add.w	r1, r7, #10
 800540c:	4610      	mov	r0, r2
 800540e:	4798      	blx	r3
 8005410:	60f8      	str	r0, [r7, #12]
      break;
 8005412:	e028      	b.n	8005466 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	7c12      	ldrb	r2, [r2, #16]
 8005420:	f107 010a 	add.w	r1, r7, #10
 8005424:	4610      	mov	r0, r2
 8005426:	4798      	blx	r3
 8005428:	60f8      	str	r0, [r7, #12]
      break;
 800542a:	e01c      	b.n	8005466 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005432:	695b      	ldr	r3, [r3, #20]
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	7c12      	ldrb	r2, [r2, #16]
 8005438:	f107 010a 	add.w	r1, r7, #10
 800543c:	4610      	mov	r0, r2
 800543e:	4798      	blx	r3
 8005440:	60f8      	str	r0, [r7, #12]
      break;
 8005442:	e010      	b.n	8005466 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	7c12      	ldrb	r2, [r2, #16]
 8005450:	f107 010a 	add.w	r1, r7, #10
 8005454:	4610      	mov	r0, r2
 8005456:	4798      	blx	r3
 8005458:	60f8      	str	r0, [r7, #12]
      break;
 800545a:	e004      	b.n	8005466 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 800545c:	6839      	ldr	r1, [r7, #0]
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f9ec 	bl	800583c <USBD_CtlError>
      return;
 8005464:	e044      	b.n	80054f0 <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 8005466:	e02e      	b.n	80054c6 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	7c1b      	ldrb	r3, [r3, #16]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d109      	bne.n	8005484 <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005478:	f107 020a 	add.w	r2, r7, #10
 800547c:	4610      	mov	r0, r2
 800547e:	4798      	blx	r3
 8005480:	60f8      	str	r0, [r7, #12]
      break;
 8005482:	e020      	b.n	80054c6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8005484:	6839      	ldr	r1, [r7, #0]
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 f9d8 	bl	800583c <USBD_CtlError>
      return;
 800548c:	e030      	b.n	80054f0 <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	7c1b      	ldrb	r3, [r3, #16]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10d      	bne.n	80054b2 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800549c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549e:	f107 020a 	add.w	r2, r7, #10
 80054a2:	4610      	mov	r0, r2
 80054a4:	4798      	blx	r3
 80054a6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	3301      	adds	r3, #1
 80054ac:	2207      	movs	r2, #7
 80054ae:	701a      	strb	r2, [r3, #0]
      break; 
 80054b0:	e009      	b.n	80054c6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80054b2:	6839      	ldr	r1, [r7, #0]
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 f9c1 	bl	800583c <USBD_CtlError>
      return;
 80054ba:	e019      	b.n	80054f0 <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 80054bc:	6839      	ldr	r1, [r7, #0]
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f9bc 	bl	800583c <USBD_CtlError>
    return;
 80054c4:	e014      	b.n	80054f0 <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 80054c6:	897b      	ldrh	r3, [r7, #10]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d011      	beq.n	80054f0 <USBD_GetDescriptor+0x1e0>
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	88db      	ldrh	r3, [r3, #6]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00d      	beq.n	80054f0 <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	88da      	ldrh	r2, [r3, #6]
 80054d8:	897b      	ldrh	r3, [r7, #10]
 80054da:	4293      	cmp	r3, r2
 80054dc:	bf28      	it	cs
 80054de:	4613      	movcs	r3, r2
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 80054e4:	897b      	ldrh	r3, [r7, #10]
 80054e6:	461a      	mov	r2, r3
 80054e8:	68f9      	ldr	r1, [r7, #12]
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 fa12 	bl	8005914 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop

080054f8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	889b      	ldrh	r3, [r3, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d12c      	bne.n	8005564 <USBD_SetAddress+0x6c>
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	88db      	ldrh	r3, [r3, #6]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d128      	bne.n	8005564 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	885b      	ldrh	r3, [r3, #2]
 8005516:	b2db      	uxtb	r3, r3
 8005518:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800551c:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005524:	2b03      	cmp	r3, #3
 8005526:	d104      	bne.n	8005532 <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 8005528:	6839      	ldr	r1, [r7, #0]
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f986 	bl	800583c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8005530:	e01c      	b.n	800556c <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	7bfa      	ldrb	r2, [r7, #15]
 8005536:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800553a:	7bfb      	ldrb	r3, [r7, #15]
 800553c:	4619      	mov	r1, r3
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f001 f862 	bl	8006608 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 fa43 	bl	80059d0 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 800554a:	7bfb      	ldrb	r3, [r7, #15]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d004      	beq.n	800555a <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8005558:	e008      	b.n	800556c <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8005562:	e003      	b.n	800556c <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8005564:	6839      	ldr	r1, [r7, #0]
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f968 	bl	800583c <USBD_CtlError>
  } 
}
 800556c:	bf00      	nop
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	885b      	ldrh	r3, [r3, #2]
 8005582:	b2da      	uxtb	r2, r3
 8005584:	4b3e      	ldr	r3, [pc, #248]	; (8005680 <USBD_SetConfig+0x10c>)
 8005586:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8005588:	4b3d      	ldr	r3, [pc, #244]	; (8005680 <USBD_SetConfig+0x10c>)
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d904      	bls.n	800559a <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 8005590:	6839      	ldr	r1, [r7, #0]
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f952 	bl	800583c <USBD_CtlError>
 8005598:	e06f      	b.n	800567a <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d002      	beq.n	80055aa <USBD_SetConfig+0x36>
 80055a4:	2b03      	cmp	r3, #3
 80055a6:	d023      	beq.n	80055f0 <USBD_SetConfig+0x7c>
 80055a8:	e062      	b.n	8005670 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 80055aa:	4b35      	ldr	r3, [pc, #212]	; (8005680 <USBD_SetConfig+0x10c>)
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d01a      	beq.n	80055e8 <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 80055b2:	4b33      	ldr	r3, [pc, #204]	; (8005680 <USBD_SetConfig+0x10c>)
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	461a      	mov	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2203      	movs	r2, #3
 80055c0:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80055c4:	4b2e      	ldr	r3, [pc, #184]	; (8005680 <USBD_SetConfig+0x10c>)
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	4619      	mov	r1, r3
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7ff fb5f 	bl	8004c8e <USBD_SetClassConfig>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d104      	bne.n	80055e0 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 80055d6:	6839      	ldr	r1, [r7, #0]
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f92f 	bl	800583c <USBD_CtlError>
          return;
 80055de:	e04c      	b.n	800567a <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 f9f5 	bl	80059d0 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 80055e6:	e048      	b.n	800567a <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f9f1 	bl	80059d0 <USBD_CtlSendStatus>
      break;
 80055ee:	e044      	b.n	800567a <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 80055f0:	4b23      	ldr	r3, [pc, #140]	; (8005680 <USBD_SetConfig+0x10c>)
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d112      	bne.n	800561e <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2202      	movs	r2, #2
 80055fc:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8005600:	4b1f      	ldr	r3, [pc, #124]	; (8005680 <USBD_SetConfig+0x10c>)
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	461a      	mov	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800560a:	4b1d      	ldr	r3, [pc, #116]	; (8005680 <USBD_SetConfig+0x10c>)
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	4619      	mov	r1, r3
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f7ff fb5b 	bl	8004ccc <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f9da 	bl	80059d0 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800561c:	e02d      	b.n	800567a <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 800561e:	4b18      	ldr	r3, [pc, #96]	; (8005680 <USBD_SetConfig+0x10c>)
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	461a      	mov	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	429a      	cmp	r2, r3
 800562a:	d01d      	beq.n	8005668 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	b2db      	uxtb	r3, r3
 8005632:	4619      	mov	r1, r3
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f7ff fb49 	bl	8004ccc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800563a:	4b11      	ldr	r3, [pc, #68]	; (8005680 <USBD_SetConfig+0x10c>)
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	461a      	mov	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8005644:	4b0e      	ldr	r3, [pc, #56]	; (8005680 <USBD_SetConfig+0x10c>)
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	4619      	mov	r1, r3
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f7ff fb1f 	bl	8004c8e <USBD_SetClassConfig>
 8005650:	4603      	mov	r3, r0
 8005652:	2b02      	cmp	r3, #2
 8005654:	d104      	bne.n	8005660 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 8005656:	6839      	ldr	r1, [r7, #0]
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 f8ef 	bl	800583c <USBD_CtlError>
          return;
 800565e:	e00c      	b.n	800567a <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 f9b5 	bl	80059d0 <USBD_CtlSendStatus>
      break;
 8005666:	e008      	b.n	800567a <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 f9b1 	bl	80059d0 <USBD_CtlSendStatus>
      break;
 800566e:	e004      	b.n	800567a <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 8005670:	6839      	ldr	r1, [r7, #0]
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f8e2 	bl	800583c <USBD_CtlError>
      break;
 8005678:	bf00      	nop
    }
  }
}
 800567a:	3708      	adds	r7, #8
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	2000017d 	.word	0x2000017d

08005684 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	88db      	ldrh	r3, [r3, #6]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d004      	beq.n	80056a0 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 8005696:	6839      	ldr	r1, [r7, #0]
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 f8cf 	bl	800583c <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800569e:	e01f      	b.n	80056e0 <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d002      	beq.n	80056b0 <USBD_GetConfig+0x2c>
 80056aa:	2b03      	cmp	r3, #3
 80056ac:	d00b      	beq.n	80056c6 <USBD_GetConfig+0x42>
 80056ae:	e012      	b.n	80056d6 <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 80056ba:	2201      	movs	r2, #1
 80056bc:	4619      	mov	r1, r3
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 f928 	bl	8005914 <USBD_CtlSendData>
      break;
 80056c4:	e00c      	b.n	80056e0 <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 80056ca:	2201      	movs	r2, #1
 80056cc:	4619      	mov	r1, r3
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f920 	bl	8005914 <USBD_CtlSendData>
      break;
 80056d4:	e004      	b.n	80056e0 <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 80056d6:	6839      	ldr	r1, [r7, #0]
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 f8af 	bl	800583c <USBD_CtlError>
      break;
 80056de:	bf00      	nop
}
 80056e0:	bf00      	nop
 80056e2:	3708      	adds	r7, #8
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80056f8:	3b02      	subs	r3, #2
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d815      	bhi.n	800572a <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800570a:	2b00      	cmp	r3, #0
 800570c:	d005      	beq.n	800571a <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	f043 0202 	orr.w	r2, r3, #2
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 800571e:	2202      	movs	r2, #2
 8005720:	4619      	mov	r1, r3
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f8f6 	bl	8005914 <USBD_CtlSendData>
                      2);
    break;
 8005728:	e004      	b.n	8005734 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 800572a:	6839      	ldr	r1, [r7, #0]
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 f885 	bl	800583c <USBD_CtlError>
    break;
 8005732:	bf00      	nop
  }
}
 8005734:	bf00      	nop
 8005736:	3708      	adds	r7, #8
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	885b      	ldrh	r3, [r3, #2]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d10d      	bne.n	800576a <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2201      	movs	r2, #1
 8005752:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	6839      	ldr	r1, [r7, #0]
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 f933 	bl	80059d0 <USBD_CtlSendStatus>
  }

}
 800576a:	bf00      	nop
 800576c:	3708      	adds	r7, #8
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8005772:	b580      	push	{r7, lr}
 8005774:	b082      	sub	sp, #8
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
 800577a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005782:	3b02      	subs	r3, #2
 8005784:	2b01      	cmp	r3, #1
 8005786:	d812      	bhi.n	80057ae <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	885b      	ldrh	r3, [r3, #2]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d113      	bne.n	80057b8 <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	6839      	ldr	r1, [r7, #0]
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 f912 	bl	80059d0 <USBD_CtlSendStatus>
    }
    break;
 80057ac:	e004      	b.n	80057b8 <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 80057ae:	6839      	ldr	r1, [r7, #0]
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 f843 	bl	800583c <USBD_CtlError>
    break;
 80057b6:	e000      	b.n	80057ba <USBD_ClrFeature+0x48>
    break;
 80057b8:	bf00      	nop
  }
}
 80057ba:	bf00      	nop
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80057c2:	b480      	push	{r7}
 80057c4:	b083      	sub	sp, #12
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
 80057ca:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	781a      	ldrb	r2, [r3, #0]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	785a      	ldrb	r2, [r3, #1]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	3302      	adds	r3, #2
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	3303      	adds	r3, #3
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	021b      	lsls	r3, r3, #8
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	4413      	add	r3, r2
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	3304      	adds	r3, #4
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	b29a      	uxth	r2, r3
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	3305      	adds	r3, #5
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	b29b      	uxth	r3, r3
 8005808:	021b      	lsls	r3, r3, #8
 800580a:	b29b      	uxth	r3, r3
 800580c:	4413      	add	r3, r2
 800580e:	b29a      	uxth	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	3306      	adds	r3, #6
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	b29a      	uxth	r2, r3
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	3307      	adds	r3, #7
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	b29b      	uxth	r3, r3
 8005824:	021b      	lsls	r3, r3, #8
 8005826:	b29b      	uxth	r3, r3
 8005828:	4413      	add	r3, r2
 800582a:	b29a      	uxth	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	80da      	strh	r2, [r3, #6]

}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 8005846:	2180      	movs	r1, #128	; 0x80
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 fe45 	bl	80064d8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800584e:	2100      	movs	r1, #0
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 fe41 	bl	80064d8 <USBD_LL_StallEP>
}
 8005856:	bf00      	nop
 8005858:	3708      	adds	r7, #8
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b086      	sub	sp, #24
 8005862:	af00      	add	r7, sp, #0
 8005864:	60f8      	str	r0, [r7, #12]
 8005866:	60b9      	str	r1, [r7, #8]
 8005868:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 800586a:	2300      	movs	r3, #0
 800586c:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d033      	beq.n	80058dc <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f000 f835 	bl	80058e4 <USBD_GetLen>
 800587a:	4603      	mov	r3, r0
 800587c:	3301      	adds	r3, #1
 800587e:	b29b      	uxth	r3, r3
 8005880:	005b      	lsls	r3, r3, #1
 8005882:	b29a      	uxth	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 8005888:	7dfb      	ldrb	r3, [r7, #23]
 800588a:	1c5a      	adds	r2, r3, #1
 800588c:	75fa      	strb	r2, [r7, #23]
 800588e:	461a      	mov	r2, r3
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	4413      	add	r3, r2
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	8812      	ldrh	r2, [r2, #0]
 8005898:	b2d2      	uxtb	r2, r2
 800589a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800589c:	7dfb      	ldrb	r3, [r7, #23]
 800589e:	1c5a      	adds	r2, r3, #1
 80058a0:	75fa      	strb	r2, [r7, #23]
 80058a2:	461a      	mov	r2, r3
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	4413      	add	r3, r2
 80058a8:	2203      	movs	r2, #3
 80058aa:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 80058ac:	e012      	b.n	80058d4 <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 80058ae:	7dfb      	ldrb	r3, [r7, #23]
 80058b0:	1c5a      	adds	r2, r3, #1
 80058b2:	75fa      	strb	r2, [r7, #23]
 80058b4:	461a      	mov	r2, r3
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	441a      	add	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	1c59      	adds	r1, r3, #1
 80058be:	60f9      	str	r1, [r7, #12]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 80058c4:	7dfb      	ldrb	r3, [r7, #23]
 80058c6:	1c5a      	adds	r2, r3, #1
 80058c8:	75fa      	strb	r2, [r7, #23]
 80058ca:	461a      	mov	r2, r3
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	4413      	add	r3, r2
 80058d0:	2200      	movs	r2, #0
 80058d2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1e8      	bne.n	80058ae <USBD_GetString+0x50>
    }
  } 
}
 80058dc:	bf00      	nop
 80058de:	3718      	adds	r7, #24
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 80058ec:	2300      	movs	r3, #0
 80058ee:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 80058f0:	e005      	b.n	80058fe <USBD_GetLen+0x1a>
    {
        len++;
 80058f2:	7bfb      	ldrb	r3, [r7, #15]
 80058f4:	3301      	adds	r3, #1
 80058f6:	73fb      	strb	r3, [r7, #15]
        buf++;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	3301      	adds	r3, #1
 80058fc:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1f5      	bne.n	80058f2 <USBD_GetLen+0xe>
    }

    return len;
 8005906:	7bfb      	ldrb	r3, [r7, #15]
}
 8005908:	4618      	mov	r0, r3
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	4613      	mov	r3, r2
 8005920:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2202      	movs	r2, #2
 8005926:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 800592a:	88fa      	ldrh	r2, [r7, #6]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8005930:	88fa      	ldrh	r2, [r7, #6]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8005936:	88fb      	ldrh	r3, [r7, #6]
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	2100      	movs	r1, #0
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f000 fe99 	bl	8006674 <USBD_LL_Transmit>
  
  return USBD_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	4613      	mov	r3, r2
 8005958:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800595a:	88fb      	ldrh	r3, [r7, #6]
 800595c:	68ba      	ldr	r2, [r7, #8]
 800595e:	2100      	movs	r1, #0
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f000 fe87 	bl	8006674 <USBD_LL_Transmit>
  
  return USBD_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	4613      	mov	r3, r2
 800597c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2203      	movs	r2, #3
 8005982:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8005986:	88fa      	ldrh	r2, [r7, #6]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 800598e:	88fa      	ldrh	r2, [r7, #6]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8005996:	88fb      	ldrh	r3, [r7, #6]
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	2100      	movs	r1, #0
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f000 fea3 	bl	80066e8 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3710      	adds	r7, #16
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	4613      	mov	r3, r2
 80059b8:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 80059ba:	88fb      	ldrh	r3, [r7, #6]
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	2100      	movs	r1, #0
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f000 fe91 	bl	80066e8 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2204      	movs	r2, #4
 80059dc:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80059e0:	2300      	movs	r3, #0
 80059e2:	2200      	movs	r2, #0
 80059e4:	2100      	movs	r1, #0
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 fe44 	bl	8006674 <USBD_LL_Transmit>
  
  return USBD_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3708      	adds	r7, #8
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b082      	sub	sp, #8
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2205      	movs	r2, #5
 8005a02:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8005a06:	2300      	movs	r3, #0
 8005a08:	2200      	movs	r2, #0
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 fe6b 	bl	80066e8 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3708      	adds	r7, #8
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005a22:	f7fa fbd1 	bl	80001c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005a26:	f000 f839 	bl	8005a9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005a2a:	f000 f8f7 	bl	8005c1c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8005a2e:	f000 fab5 	bl	8005f9c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8005a32:	f000 f89b 	bl	8005b6c <MX_ADC1_Init>
  while (1)
  {

  /* USER CODE END WHILE */

	  HAL_ADC_Start(&hadc1);
 8005a36:	4816      	ldr	r0, [pc, #88]	; (8005a90 <main+0x74>)
 8005a38:	f7fa fdd2 	bl	80005e0 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc1, 2) == HAL_OK)  // 2ms is TimeOut Of Conversion
 8005a3c:	2102      	movs	r1, #2
 8005a3e:	4814      	ldr	r0, [pc, #80]	; (8005a90 <main+0x74>)
 8005a40:	f7fa fe3c 	bl	80006bc <HAL_ADC_PollForConversion>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d11e      	bne.n	8005a88 <main+0x6c>
	  {
	  	 adcValue= HAL_ADC_GetValue(&hadc1);              // Get ADC-Value
 8005a4a:	4811      	ldr	r0, [pc, #68]	; (8005a90 <main+0x74>)
 8005a4c:	f7fa feec 	bl	8000828 <HAL_ADC_GetValue>
 8005a50:	4603      	mov	r3, r0
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	4b0f      	ldr	r3, [pc, #60]	; (8005a94 <main+0x78>)
 8005a56:	801a      	strh	r2, [r3, #0]
	  	 intToStr(adcValue, buffer, 0);                   // Convert ADC-Value Integer to String for Print
 8005a58:	4b0e      	ldr	r3, [pc, #56]	; (8005a94 <main+0x78>)
 8005a5a:	881b      	ldrh	r3, [r3, #0]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	463b      	mov	r3, r7
 8005a60:	2200      	movs	r2, #0
 8005a62:	4619      	mov	r1, r3
 8005a64:	f000 f97a 	bl	8005d5c <intToStr>
	  	 buffer[4] = '\n';
 8005a68:	230a      	movs	r3, #10
 8005a6a:	713b      	strb	r3, [r7, #4]
	  	 CDC_Transmit_FS(&buffer[0], 5);                  // USB-Transmit
 8005a6c:	463b      	mov	r3, r7
 8005a6e:	2105      	movs	r1, #5
 8005a70:	4618      	mov	r0, r3
 8005a72:	f000 fb3d 	bl	80060f0 <CDC_Transmit_FS>
	  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8005a76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a7a:	4807      	ldr	r0, [pc, #28]	; (8005a98 <main+0x7c>)
 8005a7c:	f7fb fd16 	bl	80014ac <HAL_GPIO_TogglePin>
	  	 HAL_Delay(1000);                                 // Display Delay
 8005a80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a84:	f7fa fc06 	bl	8000294 <HAL_Delay>
	  }
	  HAL_Delay(50);
 8005a88:	2032      	movs	r0, #50	; 0x32
 8005a8a:	f7fa fc03 	bl	8000294 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8005a8e:	e7d2      	b.n	8005a36 <main+0x1a>
 8005a90:	200003a4 	.word	0x200003a4
 8005a94:	2000017e 	.word	0x2000017e
 8005a98:	48000400 	.word	0x48000400

08005a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b09c      	sub	sp, #112	; 0x70
 8005aa0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8005aa6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8005aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005aac:	2300      	movs	r3, #0
 8005aae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005ab8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005abc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8005abe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005ac2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005ac4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7fd fbb5 	bl	8003238 <HAL_RCC_OscConfig>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d003      	beq.n	8005adc <SystemClock_Config+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005ad4:	21a5      	movs	r1, #165	; 0xa5
 8005ad6:	4822      	ldr	r0, [pc, #136]	; (8005b60 <SystemClock_Config+0xc4>)
 8005ad8:	f000 f988 	bl	8005dec <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005adc:	230f      	movs	r3, #15
 8005ade:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005ae8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005aec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005aee:	2300      	movs	r3, #0
 8005af0:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8005af2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005af6:	2101      	movs	r1, #1
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7fe fa87 	bl	800400c <HAL_RCC_ClockConfig>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d003      	beq.n	8005b0c <SystemClock_Config+0x70>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005b04:	21b3      	movs	r1, #179	; 0xb3
 8005b06:	4816      	ldr	r0, [pc, #88]	; (8005b60 <SystemClock_Config+0xc4>)
 8005b08:	f000 f970 	bl	8005dec <_Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC1;
 8005b0c:	4b15      	ldr	r3, [pc, #84]	; (8005b64 <SystemClock_Config+0xc8>)
 8005b0e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8005b10:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005b14:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8005b16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b1a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005b1c:	463b      	mov	r3, r7
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7fe fc8a 	bl	8004438 <HAL_RCCEx_PeriphCLKConfig>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <SystemClock_Config+0x96>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005b2a:	21bc      	movs	r1, #188	; 0xbc
 8005b2c:	480c      	ldr	r0, [pc, #48]	; (8005b60 <SystemClock_Config+0xc4>)
 8005b2e:	f000 f95d 	bl	8005dec <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8005b32:	f7fe fc75 	bl	8004420 <HAL_RCC_GetHCLKFreq>
 8005b36:	4602      	mov	r2, r0
 8005b38:	4b0b      	ldr	r3, [pc, #44]	; (8005b68 <SystemClock_Config+0xcc>)
 8005b3a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b3e:	099b      	lsrs	r3, r3, #6
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7fb faee 	bl	8001122 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8005b46:	2004      	movs	r0, #4
 8005b48:	f7fb faf8 	bl	800113c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	2100      	movs	r1, #0
 8005b50:	f04f 30ff 	mov.w	r0, #4294967295
 8005b54:	f7fb fabb 	bl	80010ce <HAL_NVIC_SetPriority>
}
 8005b58:	bf00      	nop
 8005b5a:	3770      	adds	r7, #112	; 0x70
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	080069e0 	.word	0x080069e0
 8005b64:	00020080 	.word	0x00020080
 8005b68:	10624dd3 	.word	0x10624dd3

08005b6c <MX_ADC1_Init>:

/* ADC1 init function */
static void MX_ADC1_Init(void)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0

  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 8005b72:	4b28      	ldr	r3, [pc, #160]	; (8005c14 <MX_ADC1_Init+0xa8>)
 8005b74:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005b78:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8005b7a:	4b26      	ldr	r3, [pc, #152]	; (8005c14 <MX_ADC1_Init+0xa8>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005b80:	4b24      	ldr	r3, [pc, #144]	; (8005c14 <MX_ADC1_Init+0xa8>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005b86:	4b23      	ldr	r3, [pc, #140]	; (8005c14 <MX_ADC1_Init+0xa8>)
 8005b88:	2200      	movs	r2, #0
 8005b8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005b8c:	4b21      	ldr	r3, [pc, #132]	; (8005c14 <MX_ADC1_Init+0xa8>)
 8005b8e:	2200      	movs	r2, #0
 8005b90:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005b92:	4b20      	ldr	r3, [pc, #128]	; (8005c14 <MX_ADC1_Init+0xa8>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005b98:	4b1e      	ldr	r3, [pc, #120]	; (8005c14 <MX_ADC1_Init+0xa8>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005b9e:	4b1d      	ldr	r3, [pc, #116]	; (8005c14 <MX_ADC1_Init+0xa8>)
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005ba4:	4b1b      	ldr	r3, [pc, #108]	; (8005c14 <MX_ADC1_Init+0xa8>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8005baa:	4b1a      	ldr	r3, [pc, #104]	; (8005c14 <MX_ADC1_Init+0xa8>)
 8005bac:	2201      	movs	r2, #1
 8005bae:	621a      	str	r2, [r3, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8005bb0:	4b18      	ldr	r3, [pc, #96]	; (8005c14 <MX_ADC1_Init+0xa8>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005bb6:	4b17      	ldr	r3, [pc, #92]	; (8005c14 <MX_ADC1_Init+0xa8>)
 8005bb8:	2204      	movs	r2, #4
 8005bba:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005bbc:	4b15      	ldr	r3, [pc, #84]	; (8005c14 <MX_ADC1_Init+0xa8>)
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	619a      	str	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8005bc2:	4b14      	ldr	r3, [pc, #80]	; (8005c14 <MX_ADC1_Init+0xa8>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005bc8:	4812      	ldr	r0, [pc, #72]	; (8005c14 <MX_ADC1_Init+0xa8>)
 8005bca:	f7fa fb85 	bl	80002d8 <HAL_ADC_Init>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d003      	beq.n	8005bdc <MX_ADC1_Init+0x70>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005bd4:	21e3      	movs	r1, #227	; 0xe3
 8005bd6:	4810      	ldr	r0, [pc, #64]	; (8005c18 <MX_ADC1_Init+0xac>)
 8005bd8:	f000 f908 	bl	8005dec <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_1;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005be0:	2301      	movs	r3, #1
 8005be2:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005be4:	2300      	movs	r3, #0
 8005be6:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005be8:	2300      	movs	r3, #0
 8005bea:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005bec:	2300      	movs	r3, #0
 8005bee:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005bf4:	463b      	mov	r3, r7
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	4806      	ldr	r0, [pc, #24]	; (8005c14 <MX_ADC1_Init+0xa8>)
 8005bfa:	f7fa fe23 	bl	8000844 <HAL_ADC_ConfigChannel>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d003      	beq.n	8005c0c <MX_ADC1_Init+0xa0>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005c04:	21f0      	movs	r1, #240	; 0xf0
 8005c06:	4804      	ldr	r0, [pc, #16]	; (8005c18 <MX_ADC1_Init+0xac>)
 8005c08:	f000 f8f0 	bl	8005dec <_Error_Handler>
  }

}
 8005c0c:	bf00      	nop
 8005c0e:	3718      	adds	r7, #24
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	200003a4 	.word	0x200003a4
 8005c18:	080069e0 	.word	0x080069e0

08005c1c <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
static void MX_GPIO_Init(void)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b08a      	sub	sp, #40	; 0x28
 8005c20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c22:	4a33      	ldr	r2, [pc, #204]	; (8005cf0 <MX_GPIO_Init+0xd4>)
 8005c24:	4b32      	ldr	r3, [pc, #200]	; (8005cf0 <MX_GPIO_Init+0xd4>)
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c2c:	6153      	str	r3, [r2, #20]
 8005c2e:	4b30      	ldr	r3, [pc, #192]	; (8005cf0 <MX_GPIO_Init+0xd4>)
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c36:	613b      	str	r3, [r7, #16]
 8005c38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005c3a:	4a2d      	ldr	r2, [pc, #180]	; (8005cf0 <MX_GPIO_Init+0xd4>)
 8005c3c:	4b2c      	ldr	r3, [pc, #176]	; (8005cf0 <MX_GPIO_Init+0xd4>)
 8005c3e:	695b      	ldr	r3, [r3, #20]
 8005c40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005c44:	6153      	str	r3, [r2, #20]
 8005c46:	4b2a      	ldr	r3, [pc, #168]	; (8005cf0 <MX_GPIO_Init+0xd4>)
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c4e:	60fb      	str	r3, [r7, #12]
 8005c50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c52:	4a27      	ldr	r2, [pc, #156]	; (8005cf0 <MX_GPIO_Init+0xd4>)
 8005c54:	4b26      	ldr	r3, [pc, #152]	; (8005cf0 <MX_GPIO_Init+0xd4>)
 8005c56:	695b      	ldr	r3, [r3, #20]
 8005c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c5c:	6153      	str	r3, [r2, #20]
 8005c5e:	4b24      	ldr	r3, [pc, #144]	; (8005cf0 <MX_GPIO_Init+0xd4>)
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c66:	60bb      	str	r3, [r7, #8]
 8005c68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c6a:	4a21      	ldr	r2, [pc, #132]	; (8005cf0 <MX_GPIO_Init+0xd4>)
 8005c6c:	4b20      	ldr	r3, [pc, #128]	; (8005cf0 <MX_GPIO_Init+0xd4>)
 8005c6e:	695b      	ldr	r3, [r3, #20]
 8005c70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c74:	6153      	str	r3, [r2, #20]
 8005c76:	4b1e      	ldr	r3, [pc, #120]	; (8005cf0 <MX_GPIO_Init+0xd4>)
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c7e:	607b      	str	r3, [r7, #4]
 8005c80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8005c82:	2200      	movs	r2, #0
 8005c84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c88:	481a      	ldr	r0, [pc, #104]	; (8005cf4 <MX_GPIO_Init+0xd8>)
 8005c8a:	f7fb fbf7 	bl	800147c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8005c8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005c94:	4b18      	ldr	r3, [pc, #96]	; (8005cf8 <MX_GPIO_Init+0xdc>)
 8005c96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005c9c:	f107 0314 	add.w	r3, r7, #20
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	4816      	ldr	r0, [pc, #88]	; (8005cfc <MX_GPIO_Init+0xe0>)
 8005ca4:	f7fb fa74 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005ca8:	230c      	movs	r3, #12
 8005caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cac:	2302      	movs	r3, #2
 8005cae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005cb8:	2307      	movs	r3, #7
 8005cba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cbc:	f107 0314 	add.w	r3, r7, #20
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005cc6:	f7fb fa63 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8005cca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005cce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8005cdc:	f107 0314 	add.w	r3, r7, #20
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	4804      	ldr	r0, [pc, #16]	; (8005cf4 <MX_GPIO_Init+0xd8>)
 8005ce4:	f7fb fa54 	bl	8001190 <HAL_GPIO_Init>

}
 8005ce8:	bf00      	nop
 8005cea:	3728      	adds	r7, #40	; 0x28
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	40021000 	.word	0x40021000
 8005cf4:	48000400 	.word	0x48000400
 8005cf8:	10210000 	.word	0x10210000
 8005cfc:	48000800 	.word	0x48000800

08005d00 <reverse>:

/* USER CODE BEGIN 4 */
void reverse(char *str, int len)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b087      	sub	sp, #28
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
    int i=0, j=len-1, temp;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	617b      	str	r3, [r7, #20]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	3b01      	subs	r3, #1
 8005d12:	613b      	str	r3, [r7, #16]
    while (i<j)
 8005d14:	e018      	b.n	8005d48 <reverse+0x48>
    {
        temp = str[i];
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	4413      	add	r3, r2
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	6879      	ldr	r1, [r7, #4]
 8005d2a:	440a      	add	r2, r1
 8005d2c:	7812      	ldrb	r2, [r2, #0]
 8005d2e:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	4413      	add	r3, r2
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	b2d2      	uxtb	r2, r2
 8005d3a:	701a      	strb	r2, [r3, #0]
        i++; j--;
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	617b      	str	r3, [r7, #20]
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	3b01      	subs	r3, #1
 8005d46:	613b      	str	r3, [r7, #16]
    while (i<j)
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	dbe2      	blt.n	8005d16 <reverse+0x16>
    }
}
 8005d50:	bf00      	nop
 8005d52:	371c      	adds	r7, #28
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <intToStr>:

int intToStr(int x, uint8_t str[], int d)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
    int i = 0;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	617b      	str	r3, [r7, #20]
    while (x)
 8005d6c:	e01d      	b.n	8005daa <intToStr+0x4e>
    {
        str[i++] = (x%10) + '0';
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	1c5a      	adds	r2, r3, #1
 8005d72:	617a      	str	r2, [r7, #20]
 8005d74:	461a      	mov	r2, r3
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	1898      	adds	r0, r3, r2
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	4b1a      	ldr	r3, [pc, #104]	; (8005de8 <intToStr+0x8c>)
 8005d7e:	fb83 1302 	smull	r1, r3, r3, r2
 8005d82:	1099      	asrs	r1, r3, #2
 8005d84:	17d3      	asrs	r3, r2, #31
 8005d86:	1ac9      	subs	r1, r1, r3
 8005d88:	460b      	mov	r3, r1
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	440b      	add	r3, r1
 8005d8e:	005b      	lsls	r3, r3, #1
 8005d90:	1ad1      	subs	r1, r2, r3
 8005d92:	b2cb      	uxtb	r3, r1
 8005d94:	3330      	adds	r3, #48	; 0x30
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	7003      	strb	r3, [r0, #0]
        x = x/10;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	4a12      	ldr	r2, [pc, #72]	; (8005de8 <intToStr+0x8c>)
 8005d9e:	fb82 1203 	smull	r1, r2, r2, r3
 8005da2:	1092      	asrs	r2, r2, #2
 8005da4:	17db      	asrs	r3, r3, #31
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	60fb      	str	r3, [r7, #12]
    while (x)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d1de      	bne.n	8005d6e <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8005db0:	e007      	b.n	8005dc2 <intToStr+0x66>
        str[i++] = '0';
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	1c5a      	adds	r2, r3, #1
 8005db6:	617a      	str	r2, [r7, #20]
 8005db8:	461a      	mov	r2, r3
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	2230      	movs	r2, #48	; 0x30
 8005dc0:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	dbf3      	blt.n	8005db2 <intToStr+0x56>

    reverse(str, i);
 8005dca:	6979      	ldr	r1, [r7, #20]
 8005dcc:	68b8      	ldr	r0, [r7, #8]
 8005dce:	f7ff ff97 	bl	8005d00 <reverse>
    str[i] = '\0';
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	2200      	movs	r2, #0
 8005dda:	701a      	strb	r2, [r3, #0]
    return i;
 8005ddc:	697b      	ldr	r3, [r7, #20]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3718      	adds	r7, #24
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	66666667 	.word	0x66666667

08005dec <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8005df6:	e7fe      	b.n	8005df6 <_Error_Handler+0xa>

08005df8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dfe:	4a24      	ldr	r2, [pc, #144]	; (8005e90 <HAL_MspInit+0x98>)
 8005e00:	4b23      	ldr	r3, [pc, #140]	; (8005e90 <HAL_MspInit+0x98>)
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	f043 0301 	orr.w	r3, r3, #1
 8005e08:	6193      	str	r3, [r2, #24]
 8005e0a:	4b21      	ldr	r3, [pc, #132]	; (8005e90 <HAL_MspInit+0x98>)
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	f003 0301 	and.w	r3, r3, #1
 8005e12:	607b      	str	r3, [r7, #4]
 8005e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e16:	4a1e      	ldr	r2, [pc, #120]	; (8005e90 <HAL_MspInit+0x98>)
 8005e18:	4b1d      	ldr	r3, [pc, #116]	; (8005e90 <HAL_MspInit+0x98>)
 8005e1a:	69db      	ldr	r3, [r3, #28]
 8005e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e20:	61d3      	str	r3, [r2, #28]
 8005e22:	4b1b      	ldr	r3, [pc, #108]	; (8005e90 <HAL_MspInit+0x98>)
 8005e24:	69db      	ldr	r3, [r3, #28]
 8005e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e2a:	603b      	str	r3, [r7, #0]
 8005e2c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8005e2e:	2007      	movs	r0, #7
 8005e30:	f7fb f942 	bl	80010b8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8005e34:	2200      	movs	r2, #0
 8005e36:	2100      	movs	r1, #0
 8005e38:	f06f 000b 	mvn.w	r0, #11
 8005e3c:	f7fb f947 	bl	80010ce <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8005e40:	2200      	movs	r2, #0
 8005e42:	2100      	movs	r1, #0
 8005e44:	f06f 000a 	mvn.w	r0, #10
 8005e48:	f7fb f941 	bl	80010ce <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	2100      	movs	r1, #0
 8005e50:	f06f 0009 	mvn.w	r0, #9
 8005e54:	f7fb f93b 	bl	80010ce <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8005e58:	2200      	movs	r2, #0
 8005e5a:	2100      	movs	r1, #0
 8005e5c:	f06f 0004 	mvn.w	r0, #4
 8005e60:	f7fb f935 	bl	80010ce <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8005e64:	2200      	movs	r2, #0
 8005e66:	2100      	movs	r1, #0
 8005e68:	f06f 0003 	mvn.w	r0, #3
 8005e6c:	f7fb f92f 	bl	80010ce <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8005e70:	2200      	movs	r2, #0
 8005e72:	2100      	movs	r1, #0
 8005e74:	f06f 0001 	mvn.w	r0, #1
 8005e78:	f7fb f929 	bl	80010ce <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	2100      	movs	r1, #0
 8005e80:	f04f 30ff 	mov.w	r0, #4294967295
 8005e84:	f7fb f923 	bl	80010ce <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005e88:	bf00      	nop
 8005e8a:	3708      	adds	r7, #8
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	40021000 	.word	0x40021000

08005e94 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b088      	sub	sp, #32
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ea4:	d118      	bne.n	8005ed8 <HAL_ADC_MspInit+0x44>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005ea6:	4a0e      	ldr	r2, [pc, #56]	; (8005ee0 <HAL_ADC_MspInit+0x4c>)
 8005ea8:	4b0d      	ldr	r3, [pc, #52]	; (8005ee0 <HAL_ADC_MspInit+0x4c>)
 8005eaa:	695b      	ldr	r3, [r3, #20]
 8005eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eb0:	6153      	str	r3, [r2, #20]
 8005eb2:	4b0b      	ldr	r3, [pc, #44]	; (8005ee0 <HAL_ADC_MspInit+0x4c>)
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eba:	60bb      	str	r3, [r7, #8]
 8005ebc:	68bb      	ldr	r3, [r7, #8]
  
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005eca:	f107 030c 	add.w	r3, r7, #12
 8005ece:	4619      	mov	r1, r3
 8005ed0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ed4:	f7fb f95c 	bl	8001190 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005ed8:	bf00      	nop
 8005eda:	3720      	adds	r7, #32
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	40021000 	.word	0x40021000

08005ee4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005ee8:	f7fa f9b4 	bl	8000254 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8005eec:	f7fb f942 	bl	8001174 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005ef0:	bf00      	nop
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <USB_LP_CAN_RX0_IRQHandler>:

/**
* @brief This function handles CAN RX0 and USB low priority interrupts.
*/
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005ef8:	4802      	ldr	r0, [pc, #8]	; (8005f04 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8005efa:	f7fb feeb 	bl	8001cd4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8005efe:	bf00      	nop
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	20000dec 	.word	0x20000dec

08005f08 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005f0c:	4a1f      	ldr	r2, [pc, #124]	; (8005f8c <SystemInit+0x84>)
 8005f0e:	4b1f      	ldr	r3, [pc, #124]	; (8005f8c <SystemInit+0x84>)
 8005f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005f1c:	4a1c      	ldr	r2, [pc, #112]	; (8005f90 <SystemInit+0x88>)
 8005f1e:	4b1c      	ldr	r3, [pc, #112]	; (8005f90 <SystemInit+0x88>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f043 0301 	orr.w	r3, r3, #1
 8005f26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8005f28:	4919      	ldr	r1, [pc, #100]	; (8005f90 <SystemInit+0x88>)
 8005f2a:	4b19      	ldr	r3, [pc, #100]	; (8005f90 <SystemInit+0x88>)
 8005f2c:	685a      	ldr	r2, [r3, #4]
 8005f2e:	4b19      	ldr	r3, [pc, #100]	; (8005f94 <SystemInit+0x8c>)
 8005f30:	4013      	ands	r3, r2
 8005f32:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005f34:	4a16      	ldr	r2, [pc, #88]	; (8005f90 <SystemInit+0x88>)
 8005f36:	4b16      	ldr	r3, [pc, #88]	; (8005f90 <SystemInit+0x88>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f42:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005f44:	4a12      	ldr	r2, [pc, #72]	; (8005f90 <SystemInit+0x88>)
 8005f46:	4b12      	ldr	r3, [pc, #72]	; (8005f90 <SystemInit+0x88>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f4e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005f50:	4a0f      	ldr	r2, [pc, #60]	; (8005f90 <SystemInit+0x88>)
 8005f52:	4b0f      	ldr	r3, [pc, #60]	; (8005f90 <SystemInit+0x88>)
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8005f5a:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8005f5c:	4a0c      	ldr	r2, [pc, #48]	; (8005f90 <SystemInit+0x88>)
 8005f5e:	4b0c      	ldr	r3, [pc, #48]	; (8005f90 <SystemInit+0x88>)
 8005f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f62:	f023 030f 	bic.w	r3, r3, #15
 8005f66:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8005f68:	4909      	ldr	r1, [pc, #36]	; (8005f90 <SystemInit+0x88>)
 8005f6a:	4b09      	ldr	r3, [pc, #36]	; (8005f90 <SystemInit+0x88>)
 8005f6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f6e:	4b0a      	ldr	r3, [pc, #40]	; (8005f98 <SystemInit+0x90>)
 8005f70:	4013      	ands	r3, r2
 8005f72:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8005f74:	4b06      	ldr	r3, [pc, #24]	; (8005f90 <SystemInit+0x88>)
 8005f76:	2200      	movs	r2, #0
 8005f78:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005f7a:	4b04      	ldr	r3, [pc, #16]	; (8005f8c <SystemInit+0x84>)
 8005f7c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005f80:	609a      	str	r2, [r3, #8]
#endif
}
 8005f82:	bf00      	nop
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr
 8005f8c:	e000ed00 	.word	0xe000ed00
 8005f90:	40021000 	.word	0x40021000
 8005f94:	f87fc00c 	.word	0xf87fc00c
 8005f98:	ff00fccc 	.word	0xff00fccc

08005f9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	4908      	ldr	r1, [pc, #32]	; (8005fc4 <MX_USB_DEVICE_Init+0x28>)
 8005fa4:	4808      	ldr	r0, [pc, #32]	; (8005fc8 <MX_USB_DEVICE_Init+0x2c>)
 8005fa6:	f7fe fe16 	bl	8004bd6 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 8005faa:	4908      	ldr	r1, [pc, #32]	; (8005fcc <MX_USB_DEVICE_Init+0x30>)
 8005fac:	4806      	ldr	r0, [pc, #24]	; (8005fc8 <MX_USB_DEVICE_Init+0x2c>)
 8005fae:	f7fe fe3d 	bl	8004c2c <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8005fb2:	4907      	ldr	r1, [pc, #28]	; (8005fd0 <MX_USB_DEVICE_Init+0x34>)
 8005fb4:	4804      	ldr	r0, [pc, #16]	; (8005fc8 <MX_USB_DEVICE_Init+0x2c>)
 8005fb6:	f7fe fd75 	bl	8004aa4 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 8005fba:	4803      	ldr	r0, [pc, #12]	; (8005fc8 <MX_USB_DEVICE_Init+0x2c>)
 8005fbc:	f7fe fe50 	bl	8004c60 <USBD_Start>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005fc0:	bf00      	nop
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	2000012c 	.word	0x2000012c
 8005fc8:	200003f8 	.word	0x200003f8
 8005fcc:	20000014 	.word	0x20000014
 8005fd0:	2000011c 	.word	0x2000011c

08005fd4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005fd8:	2200      	movs	r2, #0
 8005fda:	4905      	ldr	r1, [pc, #20]	; (8005ff0 <CDC_Init_FS+0x1c>)
 8005fdc:	4805      	ldr	r0, [pc, #20]	; (8005ff4 <CDC_Init_FS+0x20>)
 8005fde:	f7fe fd78 	bl	8004ad2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005fe2:	4905      	ldr	r1, [pc, #20]	; (8005ff8 <CDC_Init_FS+0x24>)
 8005fe4:	4803      	ldr	r0, [pc, #12]	; (8005ff4 <CDC_Init_FS+0x20>)
 8005fe6:	f7fe fd8e 	bl	8004b06 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005fea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	20000a04 	.word	0x20000a04
 8005ff4:	200003f8 	.word	0x200003f8
 8005ff8:	2000061c 	.word	0x2000061c

08005ffc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006000:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006002:	4618      	mov	r0, r3
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	4603      	mov	r3, r0
 8006014:	6039      	str	r1, [r7, #0]
 8006016:	71fb      	strb	r3, [r7, #7]
 8006018:	4613      	mov	r3, r2
 800601a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800601c:	79fb      	ldrb	r3, [r7, #7]
 800601e:	2b23      	cmp	r3, #35	; 0x23
 8006020:	d84a      	bhi.n	80060b8 <CDC_Control_FS+0xac>
 8006022:	a201      	add	r2, pc, #4	; (adr r2, 8006028 <CDC_Control_FS+0x1c>)
 8006024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006028:	080060b9 	.word	0x080060b9
 800602c:	080060b9 	.word	0x080060b9
 8006030:	080060b9 	.word	0x080060b9
 8006034:	080060b9 	.word	0x080060b9
 8006038:	080060b9 	.word	0x080060b9
 800603c:	080060b9 	.word	0x080060b9
 8006040:	080060b9 	.word	0x080060b9
 8006044:	080060b9 	.word	0x080060b9
 8006048:	080060b9 	.word	0x080060b9
 800604c:	080060b9 	.word	0x080060b9
 8006050:	080060b9 	.word	0x080060b9
 8006054:	080060b9 	.word	0x080060b9
 8006058:	080060b9 	.word	0x080060b9
 800605c:	080060b9 	.word	0x080060b9
 8006060:	080060b9 	.word	0x080060b9
 8006064:	080060b9 	.word	0x080060b9
 8006068:	080060b9 	.word	0x080060b9
 800606c:	080060b9 	.word	0x080060b9
 8006070:	080060b9 	.word	0x080060b9
 8006074:	080060b9 	.word	0x080060b9
 8006078:	080060b9 	.word	0x080060b9
 800607c:	080060b9 	.word	0x080060b9
 8006080:	080060b9 	.word	0x080060b9
 8006084:	080060b9 	.word	0x080060b9
 8006088:	080060b9 	.word	0x080060b9
 800608c:	080060b9 	.word	0x080060b9
 8006090:	080060b9 	.word	0x080060b9
 8006094:	080060b9 	.word	0x080060b9
 8006098:	080060b9 	.word	0x080060b9
 800609c:	080060b9 	.word	0x080060b9
 80060a0:	080060b9 	.word	0x080060b9
 80060a4:	080060b9 	.word	0x080060b9
 80060a8:	080060b9 	.word	0x080060b9
 80060ac:	080060b9 	.word	0x080060b9
 80060b0:	080060b9 	.word	0x080060b9
 80060b4:	080060b9 	.word	0x080060b9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80060b8:	bf00      	nop
  }

  return (USBD_OK);
 80060ba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80060bc:	4618      	mov	r0, r3
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80060d2:	6879      	ldr	r1, [r7, #4]
 80060d4:	4805      	ldr	r0, [pc, #20]	; (80060ec <CDC_Receive_FS+0x24>)
 80060d6:	f7fe fd16 	bl	8004b06 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80060da:	4804      	ldr	r0, [pc, #16]	; (80060ec <CDC_Receive_FS+0x24>)
 80060dc:	f7fe fd51 	bl	8004b82 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80060e0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	200003f8 	.word	0x200003f8

080060f0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	460b      	mov	r3, r1
 80060fa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80060fc:	2300      	movs	r3, #0
 80060fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006100:	4b0d      	ldr	r3, [pc, #52]	; (8006138 <CDC_Transmit_FS+0x48>)
 8006102:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006106:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800610e:	2b00      	cmp	r3, #0
 8006110:	d001      	beq.n	8006116 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006112:	2301      	movs	r3, #1
 8006114:	e00b      	b.n	800612e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006116:	887b      	ldrh	r3, [r7, #2]
 8006118:	461a      	mov	r2, r3
 800611a:	6879      	ldr	r1, [r7, #4]
 800611c:	4806      	ldr	r0, [pc, #24]	; (8006138 <CDC_Transmit_FS+0x48>)
 800611e:	f7fe fcd8 	bl	8004ad2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006122:	4805      	ldr	r0, [pc, #20]	; (8006138 <CDC_Transmit_FS+0x48>)
 8006124:	f7fe fd03 	bl	8004b2e <USBD_CDC_TransmitPacket>
 8006128:	4603      	mov	r3, r0
 800612a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800612c:	7bfb      	ldrb	r3, [r7, #15]
}
 800612e:	4618      	mov	r0, r3
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	200003f8 	.word	0x200003f8

0800613c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a0d      	ldr	r2, [pc, #52]	; (8006180 <HAL_PCD_MspInit+0x44>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d113      	bne.n	8006176 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800614e:	4a0d      	ldr	r2, [pc, #52]	; (8006184 <HAL_PCD_MspInit+0x48>)
 8006150:	4b0c      	ldr	r3, [pc, #48]	; (8006184 <HAL_PCD_MspInit+0x48>)
 8006152:	69db      	ldr	r3, [r3, #28]
 8006154:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006158:	61d3      	str	r3, [r2, #28]
 800615a:	4b0a      	ldr	r3, [pc, #40]	; (8006184 <HAL_PCD_MspInit+0x48>)
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006162:	60fb      	str	r3, [r7, #12]
 8006164:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8006166:	2200      	movs	r2, #0
 8006168:	2100      	movs	r1, #0
 800616a:	2014      	movs	r0, #20
 800616c:	f7fa ffaf 	bl	80010ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8006170:	2014      	movs	r0, #20
 8006172:	f7fa ffc8 	bl	8001106 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006176:	bf00      	nop
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	40005c00 	.word	0x40005c00
 8006184:	40021000 	.word	0x40021000

08006188 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 23a4 	ldr.w	r2, [r3, #932]	; 0x3a4
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f503 735d 	add.w	r3, r3, #884	; 0x374
 800619c:	4619      	mov	r1, r3
 800619e:	4610      	mov	r0, r2
 80061a0:	f7fe fda7 	bl	8004cf2 <USBD_LL_SetupStage>
}
 80061a4:	bf00      	nop
 80061a6:	3708      	adds	r7, #8
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	460b      	mov	r3, r1
 80061b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 03a4 	ldr.w	r0, [r3, #932]	; 0x3a4
 80061be:	78fa      	ldrb	r2, [r7, #3]
 80061c0:	6879      	ldr	r1, [r7, #4]
 80061c2:	4613      	mov	r3, r2
 80061c4:	00db      	lsls	r3, r3, #3
 80061c6:	1a9b      	subs	r3, r3, r2
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	440b      	add	r3, r1
 80061cc:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	78fb      	ldrb	r3, [r7, #3]
 80061d4:	4619      	mov	r1, r3
 80061d6:	f7fe fdd6 	bl	8004d86 <USBD_LL_DataOutStage>
}
 80061da:	bf00      	nop
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b082      	sub	sp, #8
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
 80061ea:	460b      	mov	r3, r1
 80061ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8d3 03a4 	ldr.w	r0, [r3, #932]	; 0x3a4
 80061f4:	78fa      	ldrb	r2, [r7, #3]
 80061f6:	6879      	ldr	r1, [r7, #4]
 80061f8:	4613      	mov	r3, r2
 80061fa:	00db      	lsls	r3, r3, #3
 80061fc:	1a9b      	subs	r3, r3, r2
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	440b      	add	r3, r1
 8006202:	3338      	adds	r3, #56	; 0x38
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	78fb      	ldrb	r3, [r7, #3]
 8006208:	4619      	mov	r1, r3
 800620a:	f7fe fe17 	bl	8004e3c <USBD_LL_DataInStage>
}
 800620e:	bf00      	nop
 8006210:	3708      	adds	r7, #8
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8006216:	b580      	push	{r7, lr}
 8006218:	b082      	sub	sp, #8
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 8006224:	4618      	mov	r0, r3
 8006226:	f7fe fefd 	bl	8005024 <USBD_LL_SOF>
}
 800622a:	bf00      	nop
 800622c:	3708      	adds	r7, #8
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8006232:	b580      	push	{r7, lr}
 8006234:	b084      	sub	sp, #16
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800623a:	2301      	movs	r3, #1
 800623c:	73fb      	strb	r3, [r7, #15]

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	2b02      	cmp	r3, #2
 8006244:	d102      	bne.n	800624c <HAL_PCD_ResetCallback+0x1a>
  {
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 8006246:	2301      	movs	r3, #1
 8006248:	73fb      	strb	r3, [r7, #15]
    break;
 800624a:	e002      	b.n	8006252 <HAL_PCD_ResetCallback+0x20>
	
  default:
    speed = USBD_SPEED_FULL;
 800624c:	2301      	movs	r3, #1
 800624e:	73fb      	strb	r3, [r7, #15]
    break;    
 8006250:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 8006258:	7bfa      	ldrb	r2, [r7, #15]
 800625a:	4611      	mov	r1, r2
 800625c:	4618      	mov	r0, r3
 800625e:	f7fe feab 	bl	8004fb8 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 8006268:	4618      	mov	r0, r3
 800626a:	f7fe fe76 	bl	8004f5a <USBD_LL_Reset>
}
 800626e:	bf00      	nop
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
	...

08006278 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 8006286:	4618      	mov	r0, r3
 8006288:	f7fe fea6 	bl	8004fd8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d005      	beq.n	80062a0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006294:	4a04      	ldr	r2, [pc, #16]	; (80062a8 <HAL_PCD_SuspendCallback+0x30>)
 8006296:	4b04      	ldr	r3, [pc, #16]	; (80062a8 <HAL_PCD_SuspendCallback+0x30>)
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	f043 0306 	orr.w	r3, r3, #6
 800629e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80062a0:	bf00      	nop
 80062a2:	3708      	adds	r7, #8
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	e000ed00 	.word	0xe000ed00

080062ac <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7fe fea1 	bl	8005002 <USBD_LL_Resume>
}
 80062c0:	bf00      	nop
 80062c2:	3708      	adds	r7, #8
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80062d0:	4a2b      	ldr	r2, [pc, #172]	; (8006380 <USBD_LL_Init+0xb8>)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8c2 33a4 	str.w	r3, [r2, #932]	; 0x3a4
  pdev->pData = &hpcd_USB_FS;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a29      	ldr	r2, [pc, #164]	; (8006380 <USBD_LL_Init+0xb8>)
 80062dc:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

  hpcd_USB_FS.Instance = USB;
 80062e0:	4b27      	ldr	r3, [pc, #156]	; (8006380 <USBD_LL_Init+0xb8>)
 80062e2:	4a28      	ldr	r2, [pc, #160]	; (8006384 <USBD_LL_Init+0xbc>)
 80062e4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80062e6:	4b26      	ldr	r3, [pc, #152]	; (8006380 <USBD_LL_Init+0xb8>)
 80062e8:	2208      	movs	r2, #8
 80062ea:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80062ec:	4b24      	ldr	r3, [pc, #144]	; (8006380 <USBD_LL_Init+0xb8>)
 80062ee:	2202      	movs	r2, #2
 80062f0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 80062f2:	4b23      	ldr	r3, [pc, #140]	; (8006380 <USBD_LL_Init+0xb8>)
 80062f4:	2200      	movs	r2, #0
 80062f6:	60da      	str	r2, [r3, #12]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80062f8:	4b21      	ldr	r3, [pc, #132]	; (8006380 <USBD_LL_Init+0xb8>)
 80062fa:	2202      	movs	r2, #2
 80062fc:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80062fe:	4b20      	ldr	r3, [pc, #128]	; (8006380 <USBD_LL_Init+0xb8>)
 8006300:	2200      	movs	r2, #0
 8006302:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006304:	4b1e      	ldr	r3, [pc, #120]	; (8006380 <USBD_LL_Init+0xb8>)
 8006306:	2200      	movs	r2, #0
 8006308:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800630a:	481d      	ldr	r0, [pc, #116]	; (8006380 <USBD_LL_Init+0xb8>)
 800630c:	f7fb f8e0 	bl	80014d0 <HAL_PCD_Init>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d004      	beq.n	8006320 <USBD_LL_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006316:	f240 112d 	movw	r1, #301	; 0x12d
 800631a:	481b      	ldr	r0, [pc, #108]	; (8006388 <USBD_LL_Init+0xc0>)
 800631c:	f7ff fd66 	bl	8005dec <_Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006326:	2318      	movs	r3, #24
 8006328:	2200      	movs	r2, #0
 800632a:	2100      	movs	r1, #0
 800632c:	f7fc febe 	bl	80030ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006336:	2358      	movs	r3, #88	; 0x58
 8006338:	2200      	movs	r2, #0
 800633a:	2180      	movs	r1, #128	; 0x80
 800633c:	f7fc feb6 	bl	80030ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006346:	23c0      	movs	r3, #192	; 0xc0
 8006348:	2200      	movs	r2, #0
 800634a:	2181      	movs	r1, #129	; 0x81
 800634c:	f7fc feae 	bl	80030ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006356:	f44f 7388 	mov.w	r3, #272	; 0x110
 800635a:	2200      	movs	r2, #0
 800635c:	2101      	movs	r1, #1
 800635e:	f7fc fea5 	bl	80030ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006368:	f44f 7380 	mov.w	r3, #256	; 0x100
 800636c:	2200      	movs	r2, #0
 800636e:	2182      	movs	r1, #130	; 0x82
 8006370:	f7fc fe9c 	bl	80030ac <HAL_PCDEx_PMAConfig>
  return USBD_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3708      	adds	r7, #8
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	20000dec 	.word	0x20000dec
 8006384:	40005c00 	.word	0x40005c00
 8006388:	080069f0 	.word	0x080069f0

0800638c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006394:	2300      	movs	r3, #0
 8006396:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006398:	2300      	movs	r3, #0
 800639a:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7fb f974 	bl	8001690 <HAL_PCD_Start>
 80063a8:	4603      	mov	r3, r0
 80063aa:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 80063ac:	7bbb      	ldrb	r3, [r7, #14]
 80063ae:	2b03      	cmp	r3, #3
 80063b0:	d816      	bhi.n	80063e0 <USBD_LL_Start+0x54>
 80063b2:	a201      	add	r2, pc, #4	; (adr r2, 80063b8 <USBD_LL_Start+0x2c>)
 80063b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b8:	080063c9 	.word	0x080063c9
 80063bc:	080063cf 	.word	0x080063cf
 80063c0:	080063d5 	.word	0x080063d5
 80063c4:	080063db 	.word	0x080063db
    case HAL_OK :
      usb_status = USBD_OK;
 80063c8:	2300      	movs	r3, #0
 80063ca:	73fb      	strb	r3, [r7, #15]
    break;
 80063cc:	e00b      	b.n	80063e6 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80063ce:	2302      	movs	r3, #2
 80063d0:	73fb      	strb	r3, [r7, #15]
    break;
 80063d2:	e008      	b.n	80063e6 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80063d4:	2301      	movs	r3, #1
 80063d6:	73fb      	strb	r3, [r7, #15]
    break;
 80063d8:	e005      	b.n	80063e6 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80063da:	2302      	movs	r3, #2
 80063dc:	73fb      	strb	r3, [r7, #15]
    break;
 80063de:	e002      	b.n	80063e6 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80063e0:	2302      	movs	r3, #2
 80063e2:	73fb      	strb	r3, [r7, #15]
    break;
 80063e4:	bf00      	nop
  }
  return usb_status;
 80063e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3710      	adds	r7, #16
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	4608      	mov	r0, r1
 80063fa:	4611      	mov	r1, r2
 80063fc:	461a      	mov	r2, r3
 80063fe:	4603      	mov	r3, r0
 8006400:	70fb      	strb	r3, [r7, #3]
 8006402:	460b      	mov	r3, r1
 8006404:	70bb      	strb	r3, [r7, #2]
 8006406:	4613      	mov	r3, r2
 8006408:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800640a:	2300      	movs	r3, #0
 800640c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800640e:	2300      	movs	r3, #0
 8006410:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006418:	78bb      	ldrb	r3, [r7, #2]
 800641a:	883a      	ldrh	r2, [r7, #0]
 800641c:	78f9      	ldrb	r1, [r7, #3]
 800641e:	f7fb fd51 	bl	8001ec4 <HAL_PCD_EP_Open>
 8006422:	4603      	mov	r3, r0
 8006424:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006426:	7bbb      	ldrb	r3, [r7, #14]
 8006428:	2b03      	cmp	r3, #3
 800642a:	d817      	bhi.n	800645c <USBD_LL_OpenEP+0x6c>
 800642c:	a201      	add	r2, pc, #4	; (adr r2, 8006434 <USBD_LL_OpenEP+0x44>)
 800642e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006432:	bf00      	nop
 8006434:	08006445 	.word	0x08006445
 8006438:	0800644b 	.word	0x0800644b
 800643c:	08006451 	.word	0x08006451
 8006440:	08006457 	.word	0x08006457
    case HAL_OK :
      usb_status = USBD_OK;
 8006444:	2300      	movs	r3, #0
 8006446:	73fb      	strb	r3, [r7, #15]
    break;
 8006448:	e00b      	b.n	8006462 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800644a:	2302      	movs	r3, #2
 800644c:	73fb      	strb	r3, [r7, #15]
    break;
 800644e:	e008      	b.n	8006462 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006450:	2301      	movs	r3, #1
 8006452:	73fb      	strb	r3, [r7, #15]
    break;
 8006454:	e005      	b.n	8006462 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006456:	2302      	movs	r3, #2
 8006458:	73fb      	strb	r3, [r7, #15]
    break;
 800645a:	e002      	b.n	8006462 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800645c:	2302      	movs	r3, #2
 800645e:	73fb      	strb	r3, [r7, #15]
    break;
 8006460:	bf00      	nop
  }
  return usb_status;
 8006462:	7bfb      	ldrb	r3, [r7, #15]
}
 8006464:	4618      	mov	r0, r3
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	460b      	mov	r3, r1
 8006476:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006478:	2300      	movs	r3, #0
 800647a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800647c:	2300      	movs	r3, #0
 800647e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006486:	78fa      	ldrb	r2, [r7, #3]
 8006488:	4611      	mov	r1, r2
 800648a:	4618      	mov	r0, r3
 800648c:	f7fc f890 	bl	80025b0 <HAL_PCD_EP_Close>
 8006490:	4603      	mov	r3, r0
 8006492:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8006494:	7bbb      	ldrb	r3, [r7, #14]
 8006496:	2b03      	cmp	r3, #3
 8006498:	d816      	bhi.n	80064c8 <USBD_LL_CloseEP+0x5c>
 800649a:	a201      	add	r2, pc, #4	; (adr r2, 80064a0 <USBD_LL_CloseEP+0x34>)
 800649c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a0:	080064b1 	.word	0x080064b1
 80064a4:	080064b7 	.word	0x080064b7
 80064a8:	080064bd 	.word	0x080064bd
 80064ac:	080064c3 	.word	0x080064c3
    case HAL_OK :
      usb_status = USBD_OK;
 80064b0:	2300      	movs	r3, #0
 80064b2:	73fb      	strb	r3, [r7, #15]
    break;
 80064b4:	e00b      	b.n	80064ce <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80064b6:	2302      	movs	r3, #2
 80064b8:	73fb      	strb	r3, [r7, #15]
    break;
 80064ba:	e008      	b.n	80064ce <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80064bc:	2301      	movs	r3, #1
 80064be:	73fb      	strb	r3, [r7, #15]
    break;
 80064c0:	e005      	b.n	80064ce <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80064c2:	2302      	movs	r3, #2
 80064c4:	73fb      	strb	r3, [r7, #15]
    break;
 80064c6:	e002      	b.n	80064ce <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80064c8:	2302      	movs	r3, #2
 80064ca:	73fb      	strb	r3, [r7, #15]
    break;
 80064cc:	bf00      	nop
  }
  return usb_status;  
 80064ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	460b      	mov	r3, r1
 80064e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064e4:	2300      	movs	r3, #0
 80064e6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064e8:	2300      	movs	r3, #0
 80064ea:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80064f2:	78fa      	ldrb	r2, [r7, #3]
 80064f4:	4611      	mov	r1, r2
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7fc fc56 	bl	8002da8 <HAL_PCD_EP_SetStall>
 80064fc:	4603      	mov	r3, r0
 80064fe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006500:	7bbb      	ldrb	r3, [r7, #14]
 8006502:	2b03      	cmp	r3, #3
 8006504:	d816      	bhi.n	8006534 <USBD_LL_StallEP+0x5c>
 8006506:	a201      	add	r2, pc, #4	; (adr r2, 800650c <USBD_LL_StallEP+0x34>)
 8006508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800650c:	0800651d 	.word	0x0800651d
 8006510:	08006523 	.word	0x08006523
 8006514:	08006529 	.word	0x08006529
 8006518:	0800652f 	.word	0x0800652f
    case HAL_OK :
      usb_status = USBD_OK;
 800651c:	2300      	movs	r3, #0
 800651e:	73fb      	strb	r3, [r7, #15]
    break;
 8006520:	e00b      	b.n	800653a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006522:	2302      	movs	r3, #2
 8006524:	73fb      	strb	r3, [r7, #15]
    break;
 8006526:	e008      	b.n	800653a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006528:	2301      	movs	r3, #1
 800652a:	73fb      	strb	r3, [r7, #15]
    break;
 800652c:	e005      	b.n	800653a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800652e:	2302      	movs	r3, #2
 8006530:	73fb      	strb	r3, [r7, #15]
    break;
 8006532:	e002      	b.n	800653a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006534:	2302      	movs	r3, #2
 8006536:	73fb      	strb	r3, [r7, #15]
    break;
 8006538:	bf00      	nop
  }
  return usb_status;  
 800653a:	7bfb      	ldrb	r3, [r7, #15]
}
 800653c:	4618      	mov	r0, r3
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	460b      	mov	r3, r1
 800654e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006550:	2300      	movs	r3, #0
 8006552:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006554:	2300      	movs	r3, #0
 8006556:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800655e:	78fa      	ldrb	r2, [r7, #3]
 8006560:	4611      	mov	r1, r2
 8006562:	4618      	mov	r0, r3
 8006564:	f7fc fcc8 	bl	8002ef8 <HAL_PCD_EP_ClrStall>
 8006568:	4603      	mov	r3, r0
 800656a:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800656c:	7bbb      	ldrb	r3, [r7, #14]
 800656e:	2b03      	cmp	r3, #3
 8006570:	d816      	bhi.n	80065a0 <USBD_LL_ClearStallEP+0x5c>
 8006572:	a201      	add	r2, pc, #4	; (adr r2, 8006578 <USBD_LL_ClearStallEP+0x34>)
 8006574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006578:	08006589 	.word	0x08006589
 800657c:	0800658f 	.word	0x0800658f
 8006580:	08006595 	.word	0x08006595
 8006584:	0800659b 	.word	0x0800659b
    case HAL_OK :
      usb_status = USBD_OK;
 8006588:	2300      	movs	r3, #0
 800658a:	73fb      	strb	r3, [r7, #15]
    break;
 800658c:	e00b      	b.n	80065a6 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800658e:	2302      	movs	r3, #2
 8006590:	73fb      	strb	r3, [r7, #15]
    break;
 8006592:	e008      	b.n	80065a6 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006594:	2301      	movs	r3, #1
 8006596:	73fb      	strb	r3, [r7, #15]
    break;
 8006598:	e005      	b.n	80065a6 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800659a:	2302      	movs	r3, #2
 800659c:	73fb      	strb	r3, [r7, #15]
    break;
 800659e:	e002      	b.n	80065a6 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80065a0:	2302      	movs	r3, #2
 80065a2:	73fb      	strb	r3, [r7, #15]
    break;
 80065a4:	bf00      	nop
  }
  return usb_status; 
 80065a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3710      	adds	r7, #16
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	460b      	mov	r3, r1
 80065ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80065c2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80065c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	da0b      	bge.n	80065e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80065cc:	78fb      	ldrb	r3, [r7, #3]
 80065ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065d2:	68f9      	ldr	r1, [r7, #12]
 80065d4:	4613      	mov	r3, r2
 80065d6:	00db      	lsls	r3, r3, #3
 80065d8:	1a9b      	subs	r3, r3, r2
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	440b      	add	r3, r1
 80065de:	332a      	adds	r3, #42	; 0x2a
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	e00b      	b.n	80065fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80065e4:	78fb      	ldrb	r3, [r7, #3]
 80065e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065ea:	68f9      	ldr	r1, [r7, #12]
 80065ec:	4613      	mov	r3, r2
 80065ee:	00db      	lsls	r3, r3, #3
 80065f0:	1a9b      	subs	r3, r3, r2
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	440b      	add	r3, r1
 80065f6:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 80065fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3714      	adds	r7, #20
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	460b      	mov	r3, r1
 8006612:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006614:	2300      	movs	r3, #0
 8006616:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006618:	2300      	movs	r3, #0
 800661a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006622:	78fa      	ldrb	r2, [r7, #3]
 8006624:	4611      	mov	r1, r2
 8006626:	4618      	mov	r0, r3
 8006628:	f7fb fc23 	bl	8001e72 <HAL_PCD_SetAddress>
 800662c:	4603      	mov	r3, r0
 800662e:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8006630:	7bbb      	ldrb	r3, [r7, #14]
 8006632:	2b03      	cmp	r3, #3
 8006634:	d816      	bhi.n	8006664 <USBD_LL_SetUSBAddress+0x5c>
 8006636:	a201      	add	r2, pc, #4	; (adr r2, 800663c <USBD_LL_SetUSBAddress+0x34>)
 8006638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663c:	0800664d 	.word	0x0800664d
 8006640:	08006653 	.word	0x08006653
 8006644:	08006659 	.word	0x08006659
 8006648:	0800665f 	.word	0x0800665f
    case HAL_OK :
      usb_status = USBD_OK;
 800664c:	2300      	movs	r3, #0
 800664e:	73fb      	strb	r3, [r7, #15]
    break;
 8006650:	e00b      	b.n	800666a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006652:	2302      	movs	r3, #2
 8006654:	73fb      	strb	r3, [r7, #15]
    break;
 8006656:	e008      	b.n	800666a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006658:	2301      	movs	r3, #1
 800665a:	73fb      	strb	r3, [r7, #15]
    break;
 800665c:	e005      	b.n	800666a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800665e:	2302      	movs	r3, #2
 8006660:	73fb      	strb	r3, [r7, #15]
    break;
 8006662:	e002      	b.n	800666a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8006664:	2302      	movs	r3, #2
 8006666:	73fb      	strb	r3, [r7, #15]
    break;
 8006668:	bf00      	nop
  }
  return usb_status;  
 800666a:	7bfb      	ldrb	r3, [r7, #15]
}
 800666c:	4618      	mov	r0, r3
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b086      	sub	sp, #24
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	607a      	str	r2, [r7, #4]
 800667e:	461a      	mov	r2, r3
 8006680:	460b      	mov	r3, r1
 8006682:	72fb      	strb	r3, [r7, #11]
 8006684:	4613      	mov	r3, r2
 8006686:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006688:	2300      	movs	r3, #0
 800668a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800668c:	2300      	movs	r3, #0
 800668e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006696:	893b      	ldrh	r3, [r7, #8]
 8006698:	7af9      	ldrb	r1, [r7, #11]
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	f7fc faa4 	bl	8002be8 <HAL_PCD_EP_Transmit>
 80066a0:	4603      	mov	r3, r0
 80066a2:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 80066a4:	7dbb      	ldrb	r3, [r7, #22]
 80066a6:	2b03      	cmp	r3, #3
 80066a8:	d816      	bhi.n	80066d8 <USBD_LL_Transmit+0x64>
 80066aa:	a201      	add	r2, pc, #4	; (adr r2, 80066b0 <USBD_LL_Transmit+0x3c>)
 80066ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b0:	080066c1 	.word	0x080066c1
 80066b4:	080066c7 	.word	0x080066c7
 80066b8:	080066cd 	.word	0x080066cd
 80066bc:	080066d3 	.word	0x080066d3
    case HAL_OK :
      usb_status = USBD_OK;
 80066c0:	2300      	movs	r3, #0
 80066c2:	75fb      	strb	r3, [r7, #23]
    break;
 80066c4:	e00b      	b.n	80066de <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80066c6:	2302      	movs	r3, #2
 80066c8:	75fb      	strb	r3, [r7, #23]
    break;
 80066ca:	e008      	b.n	80066de <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80066cc:	2301      	movs	r3, #1
 80066ce:	75fb      	strb	r3, [r7, #23]
    break;
 80066d0:	e005      	b.n	80066de <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80066d2:	2302      	movs	r3, #2
 80066d4:	75fb      	strb	r3, [r7, #23]
    break;
 80066d6:	e002      	b.n	80066de <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 80066d8:	2302      	movs	r3, #2
 80066da:	75fb      	strb	r3, [r7, #23]
    break;
 80066dc:	bf00      	nop
  }
  return usb_status;    
 80066de:	7dfb      	ldrb	r3, [r7, #23]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b086      	sub	sp, #24
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	607a      	str	r2, [r7, #4]
 80066f2:	461a      	mov	r2, r3
 80066f4:	460b      	mov	r3, r1
 80066f6:	72fb      	strb	r3, [r7, #11]
 80066f8:	4613      	mov	r3, r2
 80066fa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066fc:	2300      	movs	r3, #0
 80066fe:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006700:	2300      	movs	r3, #0
 8006702:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800670a:	893b      	ldrh	r3, [r7, #8]
 800670c:	7af9      	ldrb	r1, [r7, #11]
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	f7fc f956 	bl	80029c0 <HAL_PCD_EP_Receive>
 8006714:	4603      	mov	r3, r0
 8006716:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8006718:	7dbb      	ldrb	r3, [r7, #22]
 800671a:	2b03      	cmp	r3, #3
 800671c:	d816      	bhi.n	800674c <USBD_LL_PrepareReceive+0x64>
 800671e:	a201      	add	r2, pc, #4	; (adr r2, 8006724 <USBD_LL_PrepareReceive+0x3c>)
 8006720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006724:	08006735 	.word	0x08006735
 8006728:	0800673b 	.word	0x0800673b
 800672c:	08006741 	.word	0x08006741
 8006730:	08006747 	.word	0x08006747
    case HAL_OK :
      usb_status = USBD_OK;
 8006734:	2300      	movs	r3, #0
 8006736:	75fb      	strb	r3, [r7, #23]
    break;
 8006738:	e00b      	b.n	8006752 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800673a:	2302      	movs	r3, #2
 800673c:	75fb      	strb	r3, [r7, #23]
    break;
 800673e:	e008      	b.n	8006752 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006740:	2301      	movs	r3, #1
 8006742:	75fb      	strb	r3, [r7, #23]
    break;
 8006744:	e005      	b.n	8006752 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006746:	2302      	movs	r3, #2
 8006748:	75fb      	strb	r3, [r7, #23]
    break;
 800674a:	e002      	b.n	8006752 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 800674c:	2302      	movs	r3, #2
 800674e:	75fb      	strb	r3, [r7, #23]
    break;
 8006750:	bf00      	nop
  }
  return usb_status; 
 8006752:	7dfb      	ldrb	r3, [r7, #23]
}
 8006754:	4618      	mov	r0, r3
 8006756:	3718      	adds	r7, #24
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	460b      	mov	r3, r1
 8006766:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800676e:	78fa      	ldrb	r2, [r7, #3]
 8006770:	4611      	mov	r1, r2
 8006772:	4618      	mov	r0, r3
 8006774:	f7fc fa1e 	bl	8002bb4 <HAL_PCD_EP_GetRxCount>
 8006778:	4603      	mov	r3, r0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3708      	adds	r7, #8
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
	...

08006784 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800678c:	4b03      	ldr	r3, [pc, #12]	; (800679c <USBD_static_malloc+0x18>)
}
 800678e:	4618      	mov	r0, r3
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	20000180 	.word	0x20000180

080067a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]

}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <HAL_PCDEx_SetConnectionState>:
  * @param hpcd: PCD handle
  * @param state: Connection state (0: disconnected / 1: connected)
  * @retval None
  */
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	460b      	mov	r3, r1
 80067be:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80067c0:	bf00      	nop
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	4603      	mov	r3, r0
 80067d4:	6039      	str	r1, [r7, #0]
 80067d6:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	2212      	movs	r2, #18
 80067dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80067de:	4b03      	ldr	r3, [pc, #12]	; (80067ec <USBD_FS_DeviceDescriptor+0x20>)
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr
 80067ec:	20000148 	.word	0x20000148

080067f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	4603      	mov	r3, r0
 80067f8:	6039      	str	r1, [r7, #0]
 80067fa:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	2204      	movs	r2, #4
 8006800:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006802:	4b03      	ldr	r3, [pc, #12]	; (8006810 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006804:	4618      	mov	r0, r3
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr
 8006810:	2000015c 	.word	0x2000015c

08006814 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	4603      	mov	r3, r0
 800681c:	6039      	str	r1, [r7, #0]
 800681e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006820:	79fb      	ldrb	r3, [r7, #7]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d105      	bne.n	8006832 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006826:	683a      	ldr	r2, [r7, #0]
 8006828:	4907      	ldr	r1, [pc, #28]	; (8006848 <USBD_FS_ProductStrDescriptor+0x34>)
 800682a:	4808      	ldr	r0, [pc, #32]	; (800684c <USBD_FS_ProductStrDescriptor+0x38>)
 800682c:	f7ff f817 	bl	800585e <USBD_GetString>
 8006830:	e004      	b.n	800683c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006832:	683a      	ldr	r2, [r7, #0]
 8006834:	4904      	ldr	r1, [pc, #16]	; (8006848 <USBD_FS_ProductStrDescriptor+0x34>)
 8006836:	4805      	ldr	r0, [pc, #20]	; (800684c <USBD_FS_ProductStrDescriptor+0x38>)
 8006838:	f7ff f811 	bl	800585e <USBD_GetString>
  }
  return USBD_StrDesc;
 800683c:	4b02      	ldr	r3, [pc, #8]	; (8006848 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800683e:	4618      	mov	r0, r3
 8006840:	3708      	adds	r7, #8
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	20001194 	.word	0x20001194
 800684c:	08006a04 	.word	0x08006a04

08006850 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	4603      	mov	r3, r0
 8006858:	6039      	str	r1, [r7, #0]
 800685a:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800685c:	683a      	ldr	r2, [r7, #0]
 800685e:	4904      	ldr	r1, [pc, #16]	; (8006870 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006860:	4804      	ldr	r0, [pc, #16]	; (8006874 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006862:	f7fe fffc 	bl	800585e <USBD_GetString>
  return USBD_StrDesc;
 8006866:	4b02      	ldr	r3, [pc, #8]	; (8006870 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006868:	4618      	mov	r0, r3
 800686a:	3708      	adds	r7, #8
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	20001194 	.word	0x20001194
 8006874:	08006a1c 	.word	0x08006a1c

08006878 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	4603      	mov	r3, r0
 8006880:	6039      	str	r1, [r7, #0]
 8006882:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006884:	79fb      	ldrb	r3, [r7, #7]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d105      	bne.n	8006896 <USBD_FS_SerialStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800688a:	683a      	ldr	r2, [r7, #0]
 800688c:	4907      	ldr	r1, [pc, #28]	; (80068ac <USBD_FS_SerialStrDescriptor+0x34>)
 800688e:	4808      	ldr	r0, [pc, #32]	; (80068b0 <USBD_FS_SerialStrDescriptor+0x38>)
 8006890:	f7fe ffe5 	bl	800585e <USBD_GetString>
 8006894:	e004      	b.n	80068a0 <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8006896:	683a      	ldr	r2, [r7, #0]
 8006898:	4904      	ldr	r1, [pc, #16]	; (80068ac <USBD_FS_SerialStrDescriptor+0x34>)
 800689a:	4805      	ldr	r0, [pc, #20]	; (80068b0 <USBD_FS_SerialStrDescriptor+0x38>)
 800689c:	f7fe ffdf 	bl	800585e <USBD_GetString>
  }
  return USBD_StrDesc;
 80068a0:	4b02      	ldr	r3, [pc, #8]	; (80068ac <USBD_FS_SerialStrDescriptor+0x34>)
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3708      	adds	r7, #8
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	20001194 	.word	0x20001194
 80068b0:	08006a30 	.word	0x08006a30

080068b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	4603      	mov	r3, r0
 80068bc:	6039      	str	r1, [r7, #0]
 80068be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80068c0:	79fb      	ldrb	r3, [r7, #7]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d105      	bne.n	80068d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80068c6:	683a      	ldr	r2, [r7, #0]
 80068c8:	4907      	ldr	r1, [pc, #28]	; (80068e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80068ca:	4808      	ldr	r0, [pc, #32]	; (80068ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80068cc:	f7fe ffc7 	bl	800585e <USBD_GetString>
 80068d0:	e004      	b.n	80068dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80068d2:	683a      	ldr	r2, [r7, #0]
 80068d4:	4904      	ldr	r1, [pc, #16]	; (80068e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80068d6:	4805      	ldr	r0, [pc, #20]	; (80068ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80068d8:	f7fe ffc1 	bl	800585e <USBD_GetString>
  }
  return USBD_StrDesc;
 80068dc:	4b02      	ldr	r3, [pc, #8]	; (80068e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3708      	adds	r7, #8
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	20001194 	.word	0x20001194
 80068ec:	08006a40 	.word	0x08006a40

080068f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	4603      	mov	r3, r0
 80068f8:	6039      	str	r1, [r7, #0]
 80068fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80068fc:	79fb      	ldrb	r3, [r7, #7]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d105      	bne.n	800690e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006902:	683a      	ldr	r2, [r7, #0]
 8006904:	4907      	ldr	r1, [pc, #28]	; (8006924 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006906:	4808      	ldr	r0, [pc, #32]	; (8006928 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006908:	f7fe ffa9 	bl	800585e <USBD_GetString>
 800690c:	e004      	b.n	8006918 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	4904      	ldr	r1, [pc, #16]	; (8006924 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006912:	4805      	ldr	r0, [pc, #20]	; (8006928 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006914:	f7fe ffa3 	bl	800585e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006918:	4b02      	ldr	r3, [pc, #8]	; (8006924 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800691a:	4618      	mov	r0, r3
 800691c:	3708      	adds	r7, #8
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	20001194 	.word	0x20001194
 8006928:	08006a4c 	.word	0x08006a4c

0800692c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800692c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006964 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006930:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006932:	e003      	b.n	800693c <LoopCopyDataInit>

08006934 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006934:	4b0c      	ldr	r3, [pc, #48]	; (8006968 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006936:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006938:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800693a:	3104      	adds	r1, #4

0800693c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800693c:	480b      	ldr	r0, [pc, #44]	; (800696c <LoopForever+0xa>)
	ldr	r3, =_edata
 800693e:	4b0c      	ldr	r3, [pc, #48]	; (8006970 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006940:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006942:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006944:	d3f6      	bcc.n	8006934 <CopyDataInit>
	ldr	r2, =_sbss
 8006946:	4a0b      	ldr	r2, [pc, #44]	; (8006974 <LoopForever+0x12>)
	b	LoopFillZerobss
 8006948:	e002      	b.n	8006950 <LoopFillZerobss>

0800694a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800694a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800694c:	f842 3b04 	str.w	r3, [r2], #4

08006950 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006950:	4b09      	ldr	r3, [pc, #36]	; (8006978 <LoopForever+0x16>)
	cmp	r2, r3
 8006952:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006954:	d3f9      	bcc.n	800694a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006956:	f7ff fad7 	bl	8005f08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800695a:	f000 f811 	bl	8006980 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800695e:	f7ff f85d 	bl	8005a1c <main>

08006962 <LoopForever>:

LoopForever:
    b LoopForever
 8006962:	e7fe      	b.n	8006962 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006964:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 8006968:	08006a94 	.word	0x08006a94
	ldr	r0, =_sdata
 800696c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006970:	20000160 	.word	0x20000160
	ldr	r2, =_sbss
 8006974:	20000160 	.word	0x20000160
	ldr	r3, = _ebss
 8006978:	20001394 	.word	0x20001394

0800697c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800697c:	e7fe      	b.n	800697c <ADC1_IRQHandler>
	...

08006980 <__libc_init_array>:
 8006980:	b570      	push	{r4, r5, r6, lr}
 8006982:	4e0d      	ldr	r6, [pc, #52]	; (80069b8 <__libc_init_array+0x38>)
 8006984:	4c0d      	ldr	r4, [pc, #52]	; (80069bc <__libc_init_array+0x3c>)
 8006986:	1ba4      	subs	r4, r4, r6
 8006988:	10a4      	asrs	r4, r4, #2
 800698a:	2500      	movs	r5, #0
 800698c:	42a5      	cmp	r5, r4
 800698e:	d109      	bne.n	80069a4 <__libc_init_array+0x24>
 8006990:	4e0b      	ldr	r6, [pc, #44]	; (80069c0 <__libc_init_array+0x40>)
 8006992:	4c0c      	ldr	r4, [pc, #48]	; (80069c4 <__libc_init_array+0x44>)
 8006994:	f000 f818 	bl	80069c8 <_init>
 8006998:	1ba4      	subs	r4, r4, r6
 800699a:	10a4      	asrs	r4, r4, #2
 800699c:	2500      	movs	r5, #0
 800699e:	42a5      	cmp	r5, r4
 80069a0:	d105      	bne.n	80069ae <__libc_init_array+0x2e>
 80069a2:	bd70      	pop	{r4, r5, r6, pc}
 80069a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069a8:	4798      	blx	r3
 80069aa:	3501      	adds	r5, #1
 80069ac:	e7ee      	b.n	800698c <__libc_init_array+0xc>
 80069ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069b2:	4798      	blx	r3
 80069b4:	3501      	adds	r5, #1
 80069b6:	e7f2      	b.n	800699e <__libc_init_array+0x1e>
 80069b8:	08006a8c 	.word	0x08006a8c
 80069bc:	08006a8c 	.word	0x08006a8c
 80069c0:	08006a8c 	.word	0x08006a8c
 80069c4:	08006a90 	.word	0x08006a90

080069c8 <_init>:
 80069c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ca:	bf00      	nop
 80069cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ce:	bc08      	pop	{r3}
 80069d0:	469e      	mov	lr, r3
 80069d2:	4770      	bx	lr

080069d4 <_fini>:
 80069d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d6:	bf00      	nop
 80069d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069da:	bc08      	pop	{r3}
 80069dc:	469e      	mov	lr, r3
 80069de:	4770      	bx	lr
